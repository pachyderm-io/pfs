syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

import "client/pkg/shard/shard.proto";

package pfs;

message Repo {
  string name = 1;
}

message Commit {
  Repo repo = 1;
  string id = 2;
}

message File {
  Commit commit = 1;
  string path = 2;
}

message Block {
  string hash = 1;
}

message Diff {
  Commit commit = 1;
  uint64 shard = 2;
}

message RepoInfo {
  Repo repo = 1;
  google.protobuf.Timestamp created = 2;
  uint64 size_bytes = 3;
  repeated Repo provenance = 4;
}

message RepoInfos {
  repeated RepoInfo repo_info = 1;
}

enum CommitType {
  COMMIT_TYPE_NONE = 0;
  COMMIT_TYPE_READ = 1;
  COMMIT_TYPE_WRITE = 2;
}


message CommitInfo {
  Commit commit = 1;
  string branch = 2;
  CommitType commit_type = 3;
  Commit parent_commit = 4;
  google.protobuf.Timestamp started = 5;
  google.protobuf.Timestamp finished = 6;
  uint64 size_bytes = 7;
  bool cancelled = 8;
  repeated Commit provenance = 9;
}

message CommitInfos {
  repeated CommitInfo commit_info = 1;
}

enum FileType {
  FILE_TYPE_NONE = 0;
  FILE_TYPE_REGULAR = 1;
  FILE_TYPE_DIR = 2;
}

message FileInfo {
  File file = 1;
  FileType file_type = 2;
  uint64 size_bytes = 3;
  google.protobuf.Timestamp modified = 4;
  Commit commit_modified = 5;
  repeated File children = 6;
}

message FileInfos {
  repeated FileInfo file_info = 1;
}

message ByteRange {
  uint64 lower = 1;
  uint64 upper = 2;
}

message BlockRef {
  Block block = 1;
  ByteRange range = 2;
}

message BlockRefs {
  repeated BlockRef block_ref = 1;
}

message Append {
  repeated BlockRef block_refs = 1;
  map<string, bool> children = 2;
  Commit last_ref = 3;
  bool delete = 4;
  map<string, BlockRefs> handles = 5;
  map<string, bool> handle_deletes = 6;
  FileType file_type = 7;
}

message BlockInfo {
  Block block = 1;
  google.protobuf.Timestamp created = 2;
  uint64 size_bytes = 3;
}

message BlockInfos {
  repeated BlockInfo block_info = 1;
}

message DiffInfo {
  Diff diff = 1;
  Commit parent_commit = 2;
  string branch = 3;
  google.protobuf.Timestamp started = 4;
  google.protobuf.Timestamp finished = 5;
  // Appends is the BlockRefs which have been append to files indexed by path.
  map<string, Append> appends = 6;
  uint64 size_bytes = 7;
  bool cancelled = 8;
  repeated Commit provenance = 9;
}

message Shard {
  uint64 file_number = 1;
  uint64 file_modulus = 2;
  uint64 block_number = 3;
  uint64 block_modulus = 4;
}

message CreateRepoRequest {
  Repo repo = 1;
  google.protobuf.Timestamp created = 2;
  repeated Repo provenance = 3;
}

message InspectRepoRequest {
  Repo repo = 1;
}

message ListRepoRequest {
    repeated Repo provenance = 1;
}

message DeleteRepoRequest {
  Repo repo = 1;
  bool force = 2;
}

message CommitFsck {
    Commit commit = 1;
    repeated uint64 shards = 2;
}

message CommitFscks {
    repeated CommitFsck commit_fsck = 1;
}

message FsckRepoRequest {
    Repo repo = 1;
    bool repair = 2;
    repeated CommitFsck commits_to_repair = 3;
}

message StartCommitRequest {
  Repo repo = 1;
  string id = 2;
  string parent_id = 3;
  string branch = 4;
  google.protobuf.Timestamp started = 5;
  repeated Commit provenance = 6;
}

message FinishCommitRequest {
  Commit commit = 1;
  bool cancel = 2;
  google.protobuf.Timestamp finished = 3;
}

message InspectCommitRequest {
  Commit commit = 1;
}

message ListCommitRequest {
  repeated Repo repo = 1;
  CommitType commit_type = 2;
  repeated Commit from_commit = 3;
  repeated Commit provenance = 4;
  bool all = 5;
  bool block = 6;
}

message ListBranchRequest {
  Repo repo = 1;
}

message DeleteCommitRequest {
  Commit commit = 1;
}

message FlushCommitRequest {
  repeated Commit commit = 1;
  repeated Repo to_repo = 2;
}

// DiffMethod specifies how file operations represent changes to files.
// If FromCommit is nil then the whole file will be returned.
// If FromCommit is not nil and FullFile is false then only the changes since
// FromCommit will be returned.
// If FromCommit is not nil and FullFile is true then the whole file will be
// returned if there have been changes since FromCommit.
message DiffMethod {
    Commit from_commit = 1;
    bool full_file = 2;
}

message GetFileRequest {
  File file = 1;
  int64 offset_bytes = 2;
  int64 size_bytes = 3;
  Shard shard = 4;
  DiffMethod diff_method = 5;
  bool unsafe = 7;
  string handle = 8;
}

enum Delimiter {
  NONE = 0;
  JSON = 1;
  LINE = 2;
}

message PutFileRequest {
  File file = 1;
  FileType file_type = 2;
  bytes value = 3;
  string handle = 4;
  Delimiter delimiter = 5;
}

message InspectFileRequest {
  File file = 1;
  Shard shard = 2;
  DiffMethod diff_method = 3;
  bool unsafe = 4;
  string handle = 5;
}

message ListFileRequest {
  File file = 1;
  Shard shard = 2;
  DiffMethod diff_method = 3;
  bool recurse = 4;
  bool unsafe = 5;
  string handle = 6;
}

message DeleteFileRequest {
  File file = 1;
  bool unsafe = 2;
  string handle = 3;
}

service API {
  // Repo rpcs
  // CreateRepo creates a new repo.
  // An error is returned if the repo already exists.
  rpc CreateRepo(CreateRepoRequest) returns (google.protobuf.Empty) {}
  // InspectRepo returns info about a repo.
  rpc InspectRepo(InspectRepoRequest) returns (RepoInfo) {}
  // ListRepo returns info about all repos.
  rpc ListRepo(ListRepoRequest) returns (RepoInfos) {}
  // DeleteRepo deletes a repo.
  rpc DeleteRepo(DeleteRepoRequest) returns (google.protobuf.Empty) {}
  // FsckRepo checks a repo for inconsistencies
  rpc FsckRepo(FsckRepoRequest) returns (CommitFscks) {}

  // Commit rpcs
  // StartCommit creates a new write commit from a parent commit.
  rpc StartCommit(StartCommitRequest) returns (Commit) {}
  // FinishCommit turns a write commit into a read commit.
  rpc FinishCommit(FinishCommitRequest) returns (google.protobuf.Empty) {}
  // InspectCommit returns the info about a commit.
  rpc InspectCommit(InspectCommitRequest) returns (CommitInfo) {}
  // ListCommit returns info about all commits.
  rpc ListCommit(ListCommitRequest) returns (CommitInfos) {}
  // DeleteCommit deletes a commit.
  rpc DeleteCommit(DeleteCommitRequest) returns (google.protobuf.Empty) {}
  // FlushCommit waits for downstream commits to finish
  rpc FlushCommit(FlushCommitRequest) returns (CommitInfos) {}
  // ListBranch returns info about the heads of branches.
  rpc ListBranch(ListBranchRequest) returns (CommitInfos) {}

  // File rpcs
  // PutFile writes the specified file to pfs.
  rpc PutFile(stream PutFileRequest) returns (google.protobuf.Empty) {}
  // GetFile returns a byte stream of the contents of the file.
  rpc GetFile(GetFileRequest) returns (stream google.protobuf.BytesValue) {}
  // InspectFile returns info about a file.
  rpc InspectFile(InspectFileRequest) returns (FileInfo) {}
  // ListFile returns info about all files.
  rpc ListFile(ListFileRequest) returns (FileInfos) {}
  // DeleteFile deletes a file.
  rpc DeleteFile(DeleteFileRequest) returns (google.protobuf.Empty) {}

  // DeleteAll deletes everything
  rpc DeleteAll(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

service InternalAPI {
  // Repo rpcs
  // CreateRepo creates a new repo.
  // An error is returned if the repo already exists.
  rpc CreateRepo(CreateRepoRequest) returns (google.protobuf.Empty) {}
  // InspectRepo returns info about a repo.
  rpc InspectRepo(InspectRepoRequest) returns (RepoInfo) {}
  // ListRepo returns info about all repos.
  rpc ListRepo(ListRepoRequest) returns (RepoInfos) {}
  // DeleteRepo deletes a repo.
  rpc DeleteRepo(DeleteRepoRequest) returns (google.protobuf.Empty) {}
  // FsckRepo checks a repo for inconsistencies
  rpc FsckRepo(FsckRepoRequest) returns (CommitFscks) {}

  // Commit rpcs
  // StartCommit creates a new write commit from a parent commit.
  rpc StartCommit(StartCommitRequest) returns (google.protobuf.Empty) {}
  // FinishCommit turns a write commit into a read commit.
  rpc FinishCommit(FinishCommitRequest) returns (google.protobuf.Empty) {}
  // InspectCommit returns the info about a commit.
  rpc InspectCommit(InspectCommitRequest) returns (CommitInfo) {}
  // ListCommit returns info about all commits.
  rpc ListCommit(ListCommitRequest) returns (CommitInfos) {}
  // DeleteCommit deletes a commit.
  rpc DeleteCommit(DeleteCommitRequest) returns (google.protobuf.Empty) {}
  // FlushCommit waits for downstream commits to finish
  rpc FlushCommit(FlushCommitRequest) returns (CommitInfos) {}
  // ListBranch returns info about the heads of branches.
  rpc ListBranch(ListBranchRequest) returns (CommitInfos) {}

  // File rpcs
  // PutFile writes the specified file to pfs.
  rpc PutFile(stream PutFileRequest) returns (google.protobuf.Empty) {}
  // GetFile returns a byte stream of the contents of the file.
  rpc GetFile(GetFileRequest) returns (stream google.protobuf.BytesValue) {}
  // InspectFile returns info about a file.
  rpc InspectFile(InspectFileRequest) returns (FileInfo) {}
  // ListFile returns info about all files.
  rpc ListFile(ListFileRequest) returns (FileInfos) {}
  // DeleteFile deletes a file.
  rpc DeleteFile(DeleteFileRequest) returns (google.protobuf.Empty) {}

  // DeleteAll deletes everything
  rpc DeleteAll(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

message PutBlockRequest {
  bytes value = 1;
  Delimiter delimiter = 2;
}

message GetBlockRequest {
  Block block = 1;
  uint64 offset_bytes = 2;
  uint64 size_bytes = 3;
}

message DeleteBlockRequest {
  Block block = 1;
}

message InspectBlockRequest {
  Block block = 1;
}

message ListBlockRequest {
}

message InspectDiffRequest {
  Diff diff = 1;
}

message ListDiffRequest {
  Repo repo = 1;
  uint64 shard = 2;
}

message DeleteDiffRequest {
  Diff diff = 1;
}

service BlockAPI {
  rpc PutBlock(stream PutBlockRequest) returns (BlockRefs) {}
  rpc GetBlock(GetBlockRequest) returns (stream google.protobuf.BytesValue) {}
  rpc DeleteBlock(DeleteBlockRequest) returns (google.protobuf.Empty) {}
  rpc InspectBlock(InspectBlockRequest) returns (BlockInfo) {}
  rpc ListBlock(ListBlockRequest) returns (BlockInfos) {}

  rpc CreateDiff(DiffInfo) returns (google.protobuf.Empty) {}
  rpc InspectDiff(InspectDiffRequest) returns (DiffInfo) {}
  rpc ListDiff(ListDiffRequest) returns (stream DiffInfo) {}
  rpc DeleteDiff(DeleteDiffRequest) returns (google.protobuf.Empty) {}
}


