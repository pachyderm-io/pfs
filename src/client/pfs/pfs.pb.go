// Code generated by protoc-gen-go.
// source: client/pfs/pfs.proto
// DO NOT EDIT!

/*
Package pfs is a generated protocol buffer package.

It is generated from these files:
	client/pfs/pfs.proto

It has these top-level messages:
	Repo
	Commit
	File
	Block
	Diff
	RepoInfo
	RepoInfos
	CommitInfo
	CommitInfos
	FileInfo
	FileInfos
	ByteRange
	BlockRef
	BlockRefs
	Append
	BlockInfo
	BlockInfos
	DiffInfo
	Shard
	CreateRepoRequest
	InspectRepoRequest
	ListRepoRequest
	DeleteRepoRequest
	CommitFsck
	CommitFscks
	FsckRepoRequest
	StartCommitRequest
	FinishCommitRequest
	InspectCommitRequest
	ListCommitRequest
	ListBranchRequest
	DeleteCommitRequest
	FlushCommitRequest
	DiffMethod
	GetFileRequest
	PutFileRequest
	InspectFileRequest
	ListFileRequest
	DeleteFileRequest
	PutBlockRequest
	GetBlockRequest
	DeleteBlockRequest
	InspectBlockRequest
	ListBlockRequest
	InspectDiffRequest
	ListDiffRequest
	DeleteDiffRequest
*/
package pfs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import google_protobuf1 "go.pedge.io/pb/go/google/protobuf"
import google_protobuf2 "go.pedge.io/pb/go/google/protobuf"
import google_protobuf3 "go.pedge.io/pb/go/google/protobuf"
import _ "github.com/pachyderm/pachyderm/src/client/pkg/shard"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommitType int32

const (
	CommitType_COMMIT_TYPE_NONE  CommitType = 0
	CommitType_COMMIT_TYPE_READ  CommitType = 1
	CommitType_COMMIT_TYPE_WRITE CommitType = 2
)

var CommitType_name = map[int32]string{
	0: "COMMIT_TYPE_NONE",
	1: "COMMIT_TYPE_READ",
	2: "COMMIT_TYPE_WRITE",
}
var CommitType_value = map[string]int32{
	"COMMIT_TYPE_NONE":  0,
	"COMMIT_TYPE_READ":  1,
	"COMMIT_TYPE_WRITE": 2,
}

func (x CommitType) String() string {
	return proto.EnumName(CommitType_name, int32(x))
}
func (CommitType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FileType int32

const (
	FileType_FILE_TYPE_NONE    FileType = 0
	FileType_FILE_TYPE_REGULAR FileType = 1
	FileType_FILE_TYPE_DIR     FileType = 2
)

var FileType_name = map[int32]string{
	0: "FILE_TYPE_NONE",
	1: "FILE_TYPE_REGULAR",
	2: "FILE_TYPE_DIR",
}
var FileType_value = map[string]int32{
	"FILE_TYPE_NONE":    0,
	"FILE_TYPE_REGULAR": 1,
	"FILE_TYPE_DIR":     2,
}

func (x FileType) String() string {
	return proto.EnumName(FileType_name, int32(x))
}
func (FileType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Delimiter int32

const (
	Delimiter_NONE Delimiter = 0
	Delimiter_JSON Delimiter = 1
	Delimiter_LINE Delimiter = 2
)

var Delimiter_name = map[int32]string{
	0: "NONE",
	1: "JSON",
	2: "LINE",
}
var Delimiter_value = map[string]int32{
	"NONE": 0,
	"JSON": 1,
	"LINE": 2,
}

func (x Delimiter) String() string {
	return proto.EnumName(Delimiter_name, int32(x))
}
func (Delimiter) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Repo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Repo) Reset()                    { *m = Repo{} }
func (m *Repo) String() string            { return proto.CompactTextString(m) }
func (*Repo) ProtoMessage()               {}
func (*Repo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Commit struct {
	Repo *Repo  `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	ID   string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Commit) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type File struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Path   string  `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *File) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type Block struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Diff struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Shard  uint64  `protobuf:"varint,2,opt,name=shard" json:"shard,omitempty"`
}

func (m *Diff) Reset()                    { *m = Diff{} }
func (m *Diff) String() string            { return proto.CompactTextString(m) }
func (*Diff) ProtoMessage()               {}
func (*Diff) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Diff) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type RepoInfo struct {
	Repo       *Repo                       `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Created    *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	SizeBytes  uint64                      `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	Provenance []*Repo                     `protobuf:"bytes,4,rep,name=provenance" json:"provenance,omitempty"`
}

func (m *RepoInfo) Reset()                    { *m = RepoInfo{} }
func (m *RepoInfo) String() string            { return proto.CompactTextString(m) }
func (*RepoInfo) ProtoMessage()               {}
func (*RepoInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RepoInfo) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *RepoInfo) GetCreated() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *RepoInfo) GetProvenance() []*Repo {
	if m != nil {
		return m.Provenance
	}
	return nil
}

type RepoInfos struct {
	RepoInfo []*RepoInfo `protobuf:"bytes,1,rep,name=repo_info,json=repoInfo" json:"repo_info,omitempty"`
}

func (m *RepoInfos) Reset()                    { *m = RepoInfos{} }
func (m *RepoInfos) String() string            { return proto.CompactTextString(m) }
func (*RepoInfos) ProtoMessage()               {}
func (*RepoInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RepoInfos) GetRepoInfo() []*RepoInfo {
	if m != nil {
		return m.RepoInfo
	}
	return nil
}

type CommitInfo struct {
	Commit       *Commit                     `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Branch       string                      `protobuf:"bytes,2,opt,name=branch" json:"branch,omitempty"`
	CommitType   CommitType                  `protobuf:"varint,3,opt,name=commit_type,json=commitType,enum=pfs.CommitType" json:"commit_type,omitempty"`
	ParentCommit *Commit                     `protobuf:"bytes,4,opt,name=parent_commit,json=parentCommit" json:"parent_commit,omitempty"`
	Started      *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=started" json:"started,omitempty"`
	Finished     *google_protobuf2.Timestamp `protobuf:"bytes,6,opt,name=finished" json:"finished,omitempty"`
	SizeBytes    uint64                      `protobuf:"varint,7,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	Cancelled    bool                        `protobuf:"varint,8,opt,name=cancelled" json:"cancelled,omitempty"`
	Provenance   []*Commit                   `protobuf:"bytes,9,rep,name=provenance" json:"provenance,omitempty"`
}

func (m *CommitInfo) Reset()                    { *m = CommitInfo{} }
func (m *CommitInfo) String() string            { return proto.CompactTextString(m) }
func (*CommitInfo) ProtoMessage()               {}
func (*CommitInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CommitInfo) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *CommitInfo) GetParentCommit() *Commit {
	if m != nil {
		return m.ParentCommit
	}
	return nil
}

func (m *CommitInfo) GetStarted() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *CommitInfo) GetFinished() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Finished
	}
	return nil
}

func (m *CommitInfo) GetProvenance() []*Commit {
	if m != nil {
		return m.Provenance
	}
	return nil
}

type CommitInfos struct {
	CommitInfo []*CommitInfo `protobuf:"bytes,1,rep,name=commit_info,json=commitInfo" json:"commit_info,omitempty"`
}

func (m *CommitInfos) Reset()                    { *m = CommitInfos{} }
func (m *CommitInfos) String() string            { return proto.CompactTextString(m) }
func (*CommitInfos) ProtoMessage()               {}
func (*CommitInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CommitInfos) GetCommitInfo() []*CommitInfo {
	if m != nil {
		return m.CommitInfo
	}
	return nil
}

type FileInfo struct {
	File           *File                       `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	FileType       FileType                    `protobuf:"varint,2,opt,name=file_type,json=fileType,enum=pfs.FileType" json:"file_type,omitempty"`
	SizeBytes      uint64                      `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	Modified       *google_protobuf2.Timestamp `protobuf:"bytes,4,opt,name=modified" json:"modified,omitempty"`
	CommitModified *Commit                     `protobuf:"bytes,5,opt,name=commit_modified,json=commitModified" json:"commit_modified,omitempty"`
	Children       []*File                     `protobuf:"bytes,6,rep,name=children" json:"children,omitempty"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FileInfo) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *FileInfo) GetModified() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *FileInfo) GetCommitModified() *Commit {
	if m != nil {
		return m.CommitModified
	}
	return nil
}

func (m *FileInfo) GetChildren() []*File {
	if m != nil {
		return m.Children
	}
	return nil
}

type FileInfos struct {
	FileInfo []*FileInfo `protobuf:"bytes,1,rep,name=file_info,json=fileInfo" json:"file_info,omitempty"`
}

func (m *FileInfos) Reset()                    { *m = FileInfos{} }
func (m *FileInfos) String() string            { return proto.CompactTextString(m) }
func (*FileInfos) ProtoMessage()               {}
func (*FileInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FileInfos) GetFileInfo() []*FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

type ByteRange struct {
	Lower uint64 `protobuf:"varint,1,opt,name=lower" json:"lower,omitempty"`
	Upper uint64 `protobuf:"varint,2,opt,name=upper" json:"upper,omitempty"`
}

func (m *ByteRange) Reset()                    { *m = ByteRange{} }
func (m *ByteRange) String() string            { return proto.CompactTextString(m) }
func (*ByteRange) ProtoMessage()               {}
func (*ByteRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type BlockRef struct {
	Block *Block     `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Range *ByteRange `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
}

func (m *BlockRef) Reset()                    { *m = BlockRef{} }
func (m *BlockRef) String() string            { return proto.CompactTextString(m) }
func (*BlockRef) ProtoMessage()               {}
func (*BlockRef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BlockRef) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockRef) GetRange() *ByteRange {
	if m != nil {
		return m.Range
	}
	return nil
}

type BlockRefs struct {
	BlockRef []*BlockRef `protobuf:"bytes,1,rep,name=block_ref,json=blockRef" json:"block_ref,omitempty"`
}

func (m *BlockRefs) Reset()                    { *m = BlockRefs{} }
func (m *BlockRefs) String() string            { return proto.CompactTextString(m) }
func (*BlockRefs) ProtoMessage()               {}
func (*BlockRefs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *BlockRefs) GetBlockRef() []*BlockRef {
	if m != nil {
		return m.BlockRef
	}
	return nil
}

type Append struct {
	BlockRefs     []*BlockRef           `protobuf:"bytes,1,rep,name=block_refs,json=blockRefs" json:"block_refs,omitempty"`
	Children      map[string]bool       `protobuf:"bytes,2,rep,name=children" json:"children,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	LastRef       *Commit               `protobuf:"bytes,3,opt,name=last_ref,json=lastRef" json:"last_ref,omitempty"`
	Delete        bool                  `protobuf:"varint,4,opt,name=delete" json:"delete,omitempty"`
	Handles       map[string]*BlockRefs `protobuf:"bytes,5,rep,name=handles" json:"handles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	HandleDeletes map[string]bool       `protobuf:"bytes,6,rep,name=handle_deletes,json=handleDeletes" json:"handle_deletes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	FileType      FileType              `protobuf:"varint,7,opt,name=file_type,json=fileType,enum=pfs.FileType" json:"file_type,omitempty"`
}

func (m *Append) Reset()                    { *m = Append{} }
func (m *Append) String() string            { return proto.CompactTextString(m) }
func (*Append) ProtoMessage()               {}
func (*Append) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Append) GetBlockRefs() []*BlockRef {
	if m != nil {
		return m.BlockRefs
	}
	return nil
}

func (m *Append) GetChildren() map[string]bool {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Append) GetLastRef() *Commit {
	if m != nil {
		return m.LastRef
	}
	return nil
}

func (m *Append) GetHandles() map[string]*BlockRefs {
	if m != nil {
		return m.Handles
	}
	return nil
}

func (m *Append) GetHandleDeletes() map[string]bool {
	if m != nil {
		return m.HandleDeletes
	}
	return nil
}

type BlockInfo struct {
	Block     *Block                      `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Created   *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	SizeBytes uint64                      `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

func (m *BlockInfo) Reset()                    { *m = BlockInfo{} }
func (m *BlockInfo) String() string            { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()               {}
func (*BlockInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *BlockInfo) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockInfo) GetCreated() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

type BlockInfos struct {
	BlockInfo []*BlockInfo `protobuf:"bytes,1,rep,name=block_info,json=blockInfo" json:"block_info,omitempty"`
}

func (m *BlockInfos) Reset()                    { *m = BlockInfos{} }
func (m *BlockInfos) String() string            { return proto.CompactTextString(m) }
func (*BlockInfos) ProtoMessage()               {}
func (*BlockInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *BlockInfos) GetBlockInfo() []*BlockInfo {
	if m != nil {
		return m.BlockInfo
	}
	return nil
}

type DiffInfo struct {
	Diff         *Diff                       `protobuf:"bytes,1,opt,name=diff" json:"diff,omitempty"`
	ParentCommit *Commit                     `protobuf:"bytes,2,opt,name=parent_commit,json=parentCommit" json:"parent_commit,omitempty"`
	Branch       string                      `protobuf:"bytes,3,opt,name=branch" json:"branch,omitempty"`
	Started      *google_protobuf2.Timestamp `protobuf:"bytes,4,opt,name=started" json:"started,omitempty"`
	Finished     *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=finished" json:"finished,omitempty"`
	// Appends is the BlockRefs which have been append to files indexed by path.
	Appends    map[string]*Append `protobuf:"bytes,6,rep,name=appends" json:"appends,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SizeBytes  uint64             `protobuf:"varint,7,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	Cancelled  bool               `protobuf:"varint,8,opt,name=cancelled" json:"cancelled,omitempty"`
	Provenance []*Commit          `protobuf:"bytes,9,rep,name=provenance" json:"provenance,omitempty"`
}

func (m *DiffInfo) Reset()                    { *m = DiffInfo{} }
func (m *DiffInfo) String() string            { return proto.CompactTextString(m) }
func (*DiffInfo) ProtoMessage()               {}
func (*DiffInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DiffInfo) GetDiff() *Diff {
	if m != nil {
		return m.Diff
	}
	return nil
}

func (m *DiffInfo) GetParentCommit() *Commit {
	if m != nil {
		return m.ParentCommit
	}
	return nil
}

func (m *DiffInfo) GetStarted() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *DiffInfo) GetFinished() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Finished
	}
	return nil
}

func (m *DiffInfo) GetAppends() map[string]*Append {
	if m != nil {
		return m.Appends
	}
	return nil
}

func (m *DiffInfo) GetProvenance() []*Commit {
	if m != nil {
		return m.Provenance
	}
	return nil
}

type Shard struct {
	FileNumber   uint64 `protobuf:"varint,1,opt,name=file_number,json=fileNumber" json:"file_number,omitempty"`
	FileModulus  uint64 `protobuf:"varint,2,opt,name=file_modulus,json=fileModulus" json:"file_modulus,omitempty"`
	BlockNumber  uint64 `protobuf:"varint,3,opt,name=block_number,json=blockNumber" json:"block_number,omitempty"`
	BlockModulus uint64 `protobuf:"varint,4,opt,name=block_modulus,json=blockModulus" json:"block_modulus,omitempty"`
}

func (m *Shard) Reset()                    { *m = Shard{} }
func (m *Shard) String() string            { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()               {}
func (*Shard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type CreateRepoRequest struct {
	Repo       *Repo                       `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Created    *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	Provenance []*Repo                     `protobuf:"bytes,3,rep,name=provenance" json:"provenance,omitempty"`
}

func (m *CreateRepoRequest) Reset()                    { *m = CreateRepoRequest{} }
func (m *CreateRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRepoRequest) ProtoMessage()               {}
func (*CreateRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CreateRepoRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *CreateRepoRequest) GetCreated() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *CreateRepoRequest) GetProvenance() []*Repo {
	if m != nil {
		return m.Provenance
	}
	return nil
}

type InspectRepoRequest struct {
	Repo *Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
}

func (m *InspectRepoRequest) Reset()                    { *m = InspectRepoRequest{} }
func (m *InspectRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectRepoRequest) ProtoMessage()               {}
func (*InspectRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *InspectRepoRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type ListRepoRequest struct {
	Provenance []*Repo `protobuf:"bytes,1,rep,name=provenance" json:"provenance,omitempty"`
}

func (m *ListRepoRequest) Reset()                    { *m = ListRepoRequest{} }
func (m *ListRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRepoRequest) ProtoMessage()               {}
func (*ListRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ListRepoRequest) GetProvenance() []*Repo {
	if m != nil {
		return m.Provenance
	}
	return nil
}

type DeleteRepoRequest struct {
	Repo  *Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Force bool  `protobuf:"varint,2,opt,name=force" json:"force,omitempty"`
}

func (m *DeleteRepoRequest) Reset()                    { *m = DeleteRepoRequest{} }
func (m *DeleteRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRepoRequest) ProtoMessage()               {}
func (*DeleteRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *DeleteRepoRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type CommitFsck struct {
	Commit *Commit  `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Shards []uint64 `protobuf:"varint,2,rep,name=shards" json:"shards,omitempty"`
}

func (m *CommitFsck) Reset()                    { *m = CommitFsck{} }
func (m *CommitFsck) String() string            { return proto.CompactTextString(m) }
func (*CommitFsck) ProtoMessage()               {}
func (*CommitFsck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CommitFsck) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type CommitFscks struct {
	CommitFsck []*CommitFsck `protobuf:"bytes,1,rep,name=commit_fsck,json=commitFsck" json:"commit_fsck,omitempty"`
}

func (m *CommitFscks) Reset()                    { *m = CommitFscks{} }
func (m *CommitFscks) String() string            { return proto.CompactTextString(m) }
func (*CommitFscks) ProtoMessage()               {}
func (*CommitFscks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CommitFscks) GetCommitFsck() []*CommitFsck {
	if m != nil {
		return m.CommitFsck
	}
	return nil
}

type FsckRepoRequest struct {
	Repo            *Repo         `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Repair          bool          `protobuf:"varint,2,opt,name=repair" json:"repair,omitempty"`
	CommitsToRepair []*CommitFsck `protobuf:"bytes,3,rep,name=commits_to_repair,json=commitsToRepair" json:"commits_to_repair,omitempty"`
}

func (m *FsckRepoRequest) Reset()                    { *m = FsckRepoRequest{} }
func (m *FsckRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*FsckRepoRequest) ProtoMessage()               {}
func (*FsckRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *FsckRepoRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *FsckRepoRequest) GetCommitsToRepair() []*CommitFsck {
	if m != nil {
		return m.CommitsToRepair
	}
	return nil
}

type StartCommitRequest struct {
	Repo       *Repo                       `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	ID         string                      `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	ParentID   string                      `protobuf:"bytes,3,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	Branch     string                      `protobuf:"bytes,4,opt,name=branch" json:"branch,omitempty"`
	Started    *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=started" json:"started,omitempty"`
	Provenance []*Commit                   `protobuf:"bytes,6,rep,name=provenance" json:"provenance,omitempty"`
}

func (m *StartCommitRequest) Reset()                    { *m = StartCommitRequest{} }
func (m *StartCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*StartCommitRequest) ProtoMessage()               {}
func (*StartCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *StartCommitRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *StartCommitRequest) GetStarted() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *StartCommitRequest) GetProvenance() []*Commit {
	if m != nil {
		return m.Provenance
	}
	return nil
}

type FinishCommitRequest struct {
	Commit   *Commit                     `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Cancel   bool                        `protobuf:"varint,2,opt,name=cancel" json:"cancel,omitempty"`
	Finished *google_protobuf2.Timestamp `protobuf:"bytes,3,opt,name=finished" json:"finished,omitempty"`
}

func (m *FinishCommitRequest) Reset()                    { *m = FinishCommitRequest{} }
func (m *FinishCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*FinishCommitRequest) ProtoMessage()               {}
func (*FinishCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *FinishCommitRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *FinishCommitRequest) GetFinished() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Finished
	}
	return nil
}

type InspectCommitRequest struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
}

func (m *InspectCommitRequest) Reset()                    { *m = InspectCommitRequest{} }
func (m *InspectCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectCommitRequest) ProtoMessage()               {}
func (*InspectCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *InspectCommitRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type ListCommitRequest struct {
	Repo       []*Repo    `protobuf:"bytes,1,rep,name=repo" json:"repo,omitempty"`
	CommitType CommitType `protobuf:"varint,2,opt,name=commit_type,json=commitType,enum=pfs.CommitType" json:"commit_type,omitempty"`
	FromCommit []*Commit  `protobuf:"bytes,3,rep,name=from_commit,json=fromCommit" json:"from_commit,omitempty"`
	Provenance []*Commit  `protobuf:"bytes,4,rep,name=provenance" json:"provenance,omitempty"`
	All        bool       `protobuf:"varint,5,opt,name=all" json:"all,omitempty"`
	Block      bool       `protobuf:"varint,6,opt,name=block" json:"block,omitempty"`
}

func (m *ListCommitRequest) Reset()                    { *m = ListCommitRequest{} }
func (m *ListCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*ListCommitRequest) ProtoMessage()               {}
func (*ListCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ListCommitRequest) GetRepo() []*Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *ListCommitRequest) GetFromCommit() []*Commit {
	if m != nil {
		return m.FromCommit
	}
	return nil
}

func (m *ListCommitRequest) GetProvenance() []*Commit {
	if m != nil {
		return m.Provenance
	}
	return nil
}

type ListBranchRequest struct {
	Repo *Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
}

func (m *ListBranchRequest) Reset()                    { *m = ListBranchRequest{} }
func (m *ListBranchRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBranchRequest) ProtoMessage()               {}
func (*ListBranchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ListBranchRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type DeleteCommitRequest struct {
	Commit *Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
}

func (m *DeleteCommitRequest) Reset()                    { *m = DeleteCommitRequest{} }
func (m *DeleteCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCommitRequest) ProtoMessage()               {}
func (*DeleteCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *DeleteCommitRequest) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type FlushCommitRequest struct {
	Commit []*Commit `protobuf:"bytes,1,rep,name=commit" json:"commit,omitempty"`
	ToRepo []*Repo   `protobuf:"bytes,2,rep,name=to_repo,json=toRepo" json:"to_repo,omitempty"`
}

func (m *FlushCommitRequest) Reset()                    { *m = FlushCommitRequest{} }
func (m *FlushCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*FlushCommitRequest) ProtoMessage()               {}
func (*FlushCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *FlushCommitRequest) GetCommit() []*Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *FlushCommitRequest) GetToRepo() []*Repo {
	if m != nil {
		return m.ToRepo
	}
	return nil
}

// DiffMethod specifies how file operations represent changes to files.
// If FromCommit is nil then the whole file will be returned.
// If FromCommit is not nil and FullFile is false then only the changes since
// FromCommit will be returned.
// If FromCommit is not nil and FullFile is true then the whole file will be
// returned if there have been changes since FromCommit.
type DiffMethod struct {
	FromCommit *Commit `protobuf:"bytes,1,opt,name=from_commit,json=fromCommit" json:"from_commit,omitempty"`
	FullFile   bool    `protobuf:"varint,2,opt,name=full_file,json=fullFile" json:"full_file,omitempty"`
}

func (m *DiffMethod) Reset()                    { *m = DiffMethod{} }
func (m *DiffMethod) String() string            { return proto.CompactTextString(m) }
func (*DiffMethod) ProtoMessage()               {}
func (*DiffMethod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *DiffMethod) GetFromCommit() *Commit {
	if m != nil {
		return m.FromCommit
	}
	return nil
}

type GetFileRequest struct {
	File        *File       `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	OffsetBytes int64       `protobuf:"varint,2,opt,name=offset_bytes,json=offsetBytes" json:"offset_bytes,omitempty"`
	SizeBytes   int64       `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	Shard       *Shard      `protobuf:"bytes,4,opt,name=shard" json:"shard,omitempty"`
	DiffMethod  *DiffMethod `protobuf:"bytes,5,opt,name=diff_method,json=diffMethod" json:"diff_method,omitempty"`
	Unsafe      bool        `protobuf:"varint,7,opt,name=unsafe" json:"unsafe,omitempty"`
	Handle      string      `protobuf:"bytes,8,opt,name=handle" json:"handle,omitempty"`
}

func (m *GetFileRequest) Reset()                    { *m = GetFileRequest{} }
func (m *GetFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFileRequest) ProtoMessage()               {}
func (*GetFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *GetFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *GetFileRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func (m *GetFileRequest) GetDiffMethod() *DiffMethod {
	if m != nil {
		return m.DiffMethod
	}
	return nil
}

type PutFileRequest struct {
	File      *File     `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	FileType  FileType  `protobuf:"varint,2,opt,name=file_type,json=fileType,enum=pfs.FileType" json:"file_type,omitempty"`
	Value     []byte    `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Handle    string    `protobuf:"bytes,4,opt,name=handle" json:"handle,omitempty"`
	Delimiter Delimiter `protobuf:"varint,5,opt,name=delimiter,enum=pfs.Delimiter" json:"delimiter,omitempty"`
}

func (m *PutFileRequest) Reset()                    { *m = PutFileRequest{} }
func (m *PutFileRequest) String() string            { return proto.CompactTextString(m) }
func (*PutFileRequest) ProtoMessage()               {}
func (*PutFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *PutFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type InspectFileRequest struct {
	File       *File       `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Shard      *Shard      `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
	DiffMethod *DiffMethod `protobuf:"bytes,3,opt,name=diff_method,json=diffMethod" json:"diff_method,omitempty"`
	Unsafe     bool        `protobuf:"varint,4,opt,name=unsafe" json:"unsafe,omitempty"`
	Handle     string      `protobuf:"bytes,5,opt,name=handle" json:"handle,omitempty"`
}

func (m *InspectFileRequest) Reset()                    { *m = InspectFileRequest{} }
func (m *InspectFileRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectFileRequest) ProtoMessage()               {}
func (*InspectFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *InspectFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *InspectFileRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func (m *InspectFileRequest) GetDiffMethod() *DiffMethod {
	if m != nil {
		return m.DiffMethod
	}
	return nil
}

type ListFileRequest struct {
	File       *File       `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Shard      *Shard      `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
	DiffMethod *DiffMethod `protobuf:"bytes,3,opt,name=diff_method,json=diffMethod" json:"diff_method,omitempty"`
	Recurse    bool        `protobuf:"varint,4,opt,name=recurse" json:"recurse,omitempty"`
	Unsafe     bool        `protobuf:"varint,5,opt,name=unsafe" json:"unsafe,omitempty"`
	Handle     string      `protobuf:"bytes,6,opt,name=handle" json:"handle,omitempty"`
}

func (m *ListFileRequest) Reset()                    { *m = ListFileRequest{} }
func (m *ListFileRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFileRequest) ProtoMessage()               {}
func (*ListFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *ListFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *ListFileRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func (m *ListFileRequest) GetDiffMethod() *DiffMethod {
	if m != nil {
		return m.DiffMethod
	}
	return nil
}

type DeleteFileRequest struct {
	File   *File  `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Unsafe bool   `protobuf:"varint,2,opt,name=unsafe" json:"unsafe,omitempty"`
	Handle string `protobuf:"bytes,3,opt,name=handle" json:"handle,omitempty"`
}

func (m *DeleteFileRequest) Reset()                    { *m = DeleteFileRequest{} }
func (m *DeleteFileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFileRequest) ProtoMessage()               {}
func (*DeleteFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *DeleteFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type PutBlockRequest struct {
	Value     []byte    `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Delimiter Delimiter `protobuf:"varint,2,opt,name=delimiter,enum=pfs.Delimiter" json:"delimiter,omitempty"`
}

func (m *PutBlockRequest) Reset()                    { *m = PutBlockRequest{} }
func (m *PutBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*PutBlockRequest) ProtoMessage()               {}
func (*PutBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

type GetBlockRequest struct {
	Block       *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	OffsetBytes uint64 `protobuf:"varint,2,opt,name=offset_bytes,json=offsetBytes" json:"offset_bytes,omitempty"`
	SizeBytes   uint64 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

func (m *GetBlockRequest) Reset()                    { *m = GetBlockRequest{} }
func (m *GetBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockRequest) ProtoMessage()               {}
func (*GetBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *GetBlockRequest) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type DeleteBlockRequest struct {
	Block *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *DeleteBlockRequest) Reset()                    { *m = DeleteBlockRequest{} }
func (m *DeleteBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteBlockRequest) ProtoMessage()               {}
func (*DeleteBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *DeleteBlockRequest) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type InspectBlockRequest struct {
	Block *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *InspectBlockRequest) Reset()                    { *m = InspectBlockRequest{} }
func (m *InspectBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectBlockRequest) ProtoMessage()               {}
func (*InspectBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *InspectBlockRequest) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type ListBlockRequest struct {
}

func (m *ListBlockRequest) Reset()                    { *m = ListBlockRequest{} }
func (m *ListBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBlockRequest) ProtoMessage()               {}
func (*ListBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

type InspectDiffRequest struct {
	Diff *Diff `protobuf:"bytes,1,opt,name=diff" json:"diff,omitempty"`
}

func (m *InspectDiffRequest) Reset()                    { *m = InspectDiffRequest{} }
func (m *InspectDiffRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectDiffRequest) ProtoMessage()               {}
func (*InspectDiffRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *InspectDiffRequest) GetDiff() *Diff {
	if m != nil {
		return m.Diff
	}
	return nil
}

type ListDiffRequest struct {
	Repo  *Repo  `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Shard uint64 `protobuf:"varint,2,opt,name=shard" json:"shard,omitempty"`
}

func (m *ListDiffRequest) Reset()                    { *m = ListDiffRequest{} }
func (m *ListDiffRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDiffRequest) ProtoMessage()               {}
func (*ListDiffRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *ListDiffRequest) GetRepo() *Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

type DeleteDiffRequest struct {
	Diff *Diff `protobuf:"bytes,1,opt,name=diff" json:"diff,omitempty"`
}

func (m *DeleteDiffRequest) Reset()                    { *m = DeleteDiffRequest{} }
func (m *DeleteDiffRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDiffRequest) ProtoMessage()               {}
func (*DeleteDiffRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *DeleteDiffRequest) GetDiff() *Diff {
	if m != nil {
		return m.Diff
	}
	return nil
}

func init() {
	proto.RegisterType((*Repo)(nil), "pfs.Repo")
	proto.RegisterType((*Commit)(nil), "pfs.Commit")
	proto.RegisterType((*File)(nil), "pfs.File")
	proto.RegisterType((*Block)(nil), "pfs.Block")
	proto.RegisterType((*Diff)(nil), "pfs.Diff")
	proto.RegisterType((*RepoInfo)(nil), "pfs.RepoInfo")
	proto.RegisterType((*RepoInfos)(nil), "pfs.RepoInfos")
	proto.RegisterType((*CommitInfo)(nil), "pfs.CommitInfo")
	proto.RegisterType((*CommitInfos)(nil), "pfs.CommitInfos")
	proto.RegisterType((*FileInfo)(nil), "pfs.FileInfo")
	proto.RegisterType((*FileInfos)(nil), "pfs.FileInfos")
	proto.RegisterType((*ByteRange)(nil), "pfs.ByteRange")
	proto.RegisterType((*BlockRef)(nil), "pfs.BlockRef")
	proto.RegisterType((*BlockRefs)(nil), "pfs.BlockRefs")
	proto.RegisterType((*Append)(nil), "pfs.Append")
	proto.RegisterType((*BlockInfo)(nil), "pfs.BlockInfo")
	proto.RegisterType((*BlockInfos)(nil), "pfs.BlockInfos")
	proto.RegisterType((*DiffInfo)(nil), "pfs.DiffInfo")
	proto.RegisterType((*Shard)(nil), "pfs.Shard")
	proto.RegisterType((*CreateRepoRequest)(nil), "pfs.CreateRepoRequest")
	proto.RegisterType((*InspectRepoRequest)(nil), "pfs.InspectRepoRequest")
	proto.RegisterType((*ListRepoRequest)(nil), "pfs.ListRepoRequest")
	proto.RegisterType((*DeleteRepoRequest)(nil), "pfs.DeleteRepoRequest")
	proto.RegisterType((*CommitFsck)(nil), "pfs.CommitFsck")
	proto.RegisterType((*CommitFscks)(nil), "pfs.CommitFscks")
	proto.RegisterType((*FsckRepoRequest)(nil), "pfs.FsckRepoRequest")
	proto.RegisterType((*StartCommitRequest)(nil), "pfs.StartCommitRequest")
	proto.RegisterType((*FinishCommitRequest)(nil), "pfs.FinishCommitRequest")
	proto.RegisterType((*InspectCommitRequest)(nil), "pfs.InspectCommitRequest")
	proto.RegisterType((*ListCommitRequest)(nil), "pfs.ListCommitRequest")
	proto.RegisterType((*ListBranchRequest)(nil), "pfs.ListBranchRequest")
	proto.RegisterType((*DeleteCommitRequest)(nil), "pfs.DeleteCommitRequest")
	proto.RegisterType((*FlushCommitRequest)(nil), "pfs.FlushCommitRequest")
	proto.RegisterType((*DiffMethod)(nil), "pfs.DiffMethod")
	proto.RegisterType((*GetFileRequest)(nil), "pfs.GetFileRequest")
	proto.RegisterType((*PutFileRequest)(nil), "pfs.PutFileRequest")
	proto.RegisterType((*InspectFileRequest)(nil), "pfs.InspectFileRequest")
	proto.RegisterType((*ListFileRequest)(nil), "pfs.ListFileRequest")
	proto.RegisterType((*DeleteFileRequest)(nil), "pfs.DeleteFileRequest")
	proto.RegisterType((*PutBlockRequest)(nil), "pfs.PutBlockRequest")
	proto.RegisterType((*GetBlockRequest)(nil), "pfs.GetBlockRequest")
	proto.RegisterType((*DeleteBlockRequest)(nil), "pfs.DeleteBlockRequest")
	proto.RegisterType((*InspectBlockRequest)(nil), "pfs.InspectBlockRequest")
	proto.RegisterType((*ListBlockRequest)(nil), "pfs.ListBlockRequest")
	proto.RegisterType((*InspectDiffRequest)(nil), "pfs.InspectDiffRequest")
	proto.RegisterType((*ListDiffRequest)(nil), "pfs.ListDiffRequest")
	proto.RegisterType((*DeleteDiffRequest)(nil), "pfs.DeleteDiffRequest")
	proto.RegisterEnum("pfs.CommitType", CommitType_name, CommitType_value)
	proto.RegisterEnum("pfs.FileType", FileType_name, FileType_value)
	proto.RegisterEnum("pfs.Delimiter", Delimiter_name, Delimiter_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for API service

type APIClient interface {
	// Repo rpcs
	// CreateRepo creates a new repo.
	// An error is returned if the repo already exists.
	CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// InspectRepo returns info about a repo.
	InspectRepo(ctx context.Context, in *InspectRepoRequest, opts ...grpc.CallOption) (*RepoInfo, error)
	// ListRepo returns info about all repos.
	ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*RepoInfos, error)
	// DeleteRepo deletes a repo.
	DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// FsckRepo checks a repo for inconsistencies
	FsckRepo(ctx context.Context, in *FsckRepoRequest, opts ...grpc.CallOption) (*CommitFscks, error)
	// Commit rpcs
	// StartCommit creates a new write commit from a parent commit.
	StartCommit(ctx context.Context, in *StartCommitRequest, opts ...grpc.CallOption) (*Commit, error)
	// FinishCommit turns a write commit into a read commit.
	FinishCommit(ctx context.Context, in *FinishCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// InspectCommit returns the info about a commit.
	InspectCommit(ctx context.Context, in *InspectCommitRequest, opts ...grpc.CallOption) (*CommitInfo, error)
	// ListCommit returns info about all commits.
	ListCommit(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error)
	// DeleteCommit deletes a commit.
	DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// FlushCommit waits for downstream commits to finish
	FlushCommit(ctx context.Context, in *FlushCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error)
	// ListBranch returns info about the heads of branches.
	ListBranch(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*CommitInfos, error)
	// File rpcs
	// PutFile writes the specified file to pfs.
	PutFile(ctx context.Context, opts ...grpc.CallOption) (API_PutFileClient, error)
	// GetFile returns a byte stream of the contents of the file.
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (API_GetFileClient, error)
	// InspectFile returns info about a file.
	InspectFile(ctx context.Context, in *InspectFileRequest, opts ...grpc.CallOption) (*FileInfo, error)
	// ListFile returns info about all files.
	ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*FileInfos, error)
	// DeleteFile deletes a file.
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/CreateRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectRepo(ctx context.Context, in *InspectRepoRequest, opts ...grpc.CallOption) (*RepoInfo, error) {
	out := new(RepoInfo)
	err := grpc.Invoke(ctx, "/pfs.API/InspectRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*RepoInfos, error) {
	out := new(RepoInfos)
	err := grpc.Invoke(ctx, "/pfs.API/ListRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/DeleteRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FsckRepo(ctx context.Context, in *FsckRepoRequest, opts ...grpc.CallOption) (*CommitFscks, error) {
	out := new(CommitFscks)
	err := grpc.Invoke(ctx, "/pfs.API/FsckRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StartCommit(ctx context.Context, in *StartCommitRequest, opts ...grpc.CallOption) (*Commit, error) {
	out := new(Commit)
	err := grpc.Invoke(ctx, "/pfs.API/StartCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FinishCommit(ctx context.Context, in *FinishCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/FinishCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectCommit(ctx context.Context, in *InspectCommitRequest, opts ...grpc.CallOption) (*CommitInfo, error) {
	out := new(CommitInfo)
	err := grpc.Invoke(ctx, "/pfs.API/InspectCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListCommit(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error) {
	out := new(CommitInfos)
	err := grpc.Invoke(ctx, "/pfs.API/ListCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/DeleteCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FlushCommit(ctx context.Context, in *FlushCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error) {
	out := new(CommitInfos)
	err := grpc.Invoke(ctx, "/pfs.API/FlushCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListBranch(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*CommitInfos, error) {
	out := new(CommitInfos)
	err := grpc.Invoke(ctx, "/pfs.API/ListBranch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PutFile(ctx context.Context, opts ...grpc.CallOption) (API_PutFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/pfs.API/PutFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIPutFileClient{stream}
	return x, nil
}

type API_PutFileClient interface {
	Send(*PutFileRequest) error
	CloseAndRecv() (*google_protobuf1.Empty, error)
	grpc.ClientStream
}

type aPIPutFileClient struct {
	grpc.ClientStream
}

func (x *aPIPutFileClient) Send(m *PutFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIPutFileClient) CloseAndRecv() (*google_protobuf1.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf1.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (API_GetFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[1], c.cc, "/pfs.API/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_GetFileClient interface {
	Recv() (*google_protobuf3.BytesValue, error)
	grpc.ClientStream
}

type aPIGetFileClient struct {
	grpc.ClientStream
}

func (x *aPIGetFileClient) Recv() (*google_protobuf3.BytesValue, error) {
	m := new(google_protobuf3.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) InspectFile(ctx context.Context, in *InspectFileRequest, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/pfs.API/InspectFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*FileInfos, error) {
	out := new(FileInfos)
	err := grpc.Invoke(ctx, "/pfs.API/ListFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteAll(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.API/DeleteAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	// Repo rpcs
	// CreateRepo creates a new repo.
	// An error is returned if the repo already exists.
	CreateRepo(context.Context, *CreateRepoRequest) (*google_protobuf1.Empty, error)
	// InspectRepo returns info about a repo.
	InspectRepo(context.Context, *InspectRepoRequest) (*RepoInfo, error)
	// ListRepo returns info about all repos.
	ListRepo(context.Context, *ListRepoRequest) (*RepoInfos, error)
	// DeleteRepo deletes a repo.
	DeleteRepo(context.Context, *DeleteRepoRequest) (*google_protobuf1.Empty, error)
	// FsckRepo checks a repo for inconsistencies
	FsckRepo(context.Context, *FsckRepoRequest) (*CommitFscks, error)
	// Commit rpcs
	// StartCommit creates a new write commit from a parent commit.
	StartCommit(context.Context, *StartCommitRequest) (*Commit, error)
	// FinishCommit turns a write commit into a read commit.
	FinishCommit(context.Context, *FinishCommitRequest) (*google_protobuf1.Empty, error)
	// InspectCommit returns the info about a commit.
	InspectCommit(context.Context, *InspectCommitRequest) (*CommitInfo, error)
	// ListCommit returns info about all commits.
	ListCommit(context.Context, *ListCommitRequest) (*CommitInfos, error)
	// DeleteCommit deletes a commit.
	DeleteCommit(context.Context, *DeleteCommitRequest) (*google_protobuf1.Empty, error)
	// FlushCommit waits for downstream commits to finish
	FlushCommit(context.Context, *FlushCommitRequest) (*CommitInfos, error)
	// ListBranch returns info about the heads of branches.
	ListBranch(context.Context, *ListBranchRequest) (*CommitInfos, error)
	// File rpcs
	// PutFile writes the specified file to pfs.
	PutFile(API_PutFileServer) error
	// GetFile returns a byte stream of the contents of the file.
	GetFile(*GetFileRequest, API_GetFileServer) error
	// InspectFile returns info about a file.
	InspectFile(context.Context, *InspectFileRequest) (*FileInfo, error)
	// ListFile returns info about all files.
	ListFile(context.Context, *ListFileRequest) (*FileInfos, error)
	// DeleteFile deletes a file.
	DeleteFile(context.Context, *DeleteFileRequest) (*google_protobuf1.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/CreateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateRepo(ctx, req.(*CreateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_InspectRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/InspectRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectRepo(ctx, req.(*InspectRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/ListRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListRepo(ctx, req.(*ListRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/DeleteRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteRepo(ctx, req.(*DeleteRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FsckRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsckRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FsckRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/FsckRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FsckRepo(ctx, req.(*FsckRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StartCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StartCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/StartCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StartCommit(ctx, req.(*StartCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FinishCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FinishCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/FinishCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FinishCommit(ctx, req.(*FinishCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_InspectCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/InspectCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectCommit(ctx, req.(*InspectCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/ListCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListCommit(ctx, req.(*ListCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/DeleteCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteCommit(ctx, req.(*DeleteCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FlushCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FlushCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/FlushCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FlushCommit(ctx, req.(*FlushCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/ListBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListBranch(ctx, req.(*ListBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_PutFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).PutFile(&aPIPutFileServer{stream})
}

type API_PutFileServer interface {
	SendAndClose(*google_protobuf1.Empty) error
	Recv() (*PutFileRequest, error)
	grpc.ServerStream
}

type aPIPutFileServer struct {
	grpc.ServerStream
}

func (x *aPIPutFileServer) SendAndClose(m *google_protobuf1.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIPutFileServer) Recv() (*PutFileRequest, error) {
	m := new(PutFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).GetFile(m, &aPIGetFileServer{stream})
}

type API_GetFileServer interface {
	Send(*google_protobuf3.BytesValue) error
	grpc.ServerStream
}

type aPIGetFileServer struct {
	grpc.ServerStream
}

func (x *aPIGetFileServer) Send(m *google_protobuf3.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _API_InspectFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/InspectFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectFile(ctx, req.(*InspectFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/ListFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListFile(ctx, req.(*ListFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.API/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteAll(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pfs.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepo",
			Handler:    _API_CreateRepo_Handler,
		},
		{
			MethodName: "InspectRepo",
			Handler:    _API_InspectRepo_Handler,
		},
		{
			MethodName: "ListRepo",
			Handler:    _API_ListRepo_Handler,
		},
		{
			MethodName: "DeleteRepo",
			Handler:    _API_DeleteRepo_Handler,
		},
		{
			MethodName: "FsckRepo",
			Handler:    _API_FsckRepo_Handler,
		},
		{
			MethodName: "StartCommit",
			Handler:    _API_StartCommit_Handler,
		},
		{
			MethodName: "FinishCommit",
			Handler:    _API_FinishCommit_Handler,
		},
		{
			MethodName: "InspectCommit",
			Handler:    _API_InspectCommit_Handler,
		},
		{
			MethodName: "ListCommit",
			Handler:    _API_ListCommit_Handler,
		},
		{
			MethodName: "DeleteCommit",
			Handler:    _API_DeleteCommit_Handler,
		},
		{
			MethodName: "FlushCommit",
			Handler:    _API_FlushCommit_Handler,
		},
		{
			MethodName: "ListBranch",
			Handler:    _API_ListBranch_Handler,
		},
		{
			MethodName: "InspectFile",
			Handler:    _API_InspectFile_Handler,
		},
		{
			MethodName: "ListFile",
			Handler:    _API_ListFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _API_DeleteFile_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _API_DeleteAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutFile",
			Handler:       _API_PutFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _API_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

// Client API for InternalAPI service

type InternalAPIClient interface {
	// Repo rpcs
	// CreateRepo creates a new repo.
	// An error is returned if the repo already exists.
	CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// InspectRepo returns info about a repo.
	InspectRepo(ctx context.Context, in *InspectRepoRequest, opts ...grpc.CallOption) (*RepoInfo, error)
	// ListRepo returns info about all repos.
	ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*RepoInfos, error)
	// DeleteRepo deletes a repo.
	DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// FsckRepo checks a repo for inconsistencies
	FsckRepo(ctx context.Context, in *FsckRepoRequest, opts ...grpc.CallOption) (*CommitFscks, error)
	// Commit rpcs
	// StartCommit creates a new write commit from a parent commit.
	StartCommit(ctx context.Context, in *StartCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// FinishCommit turns a write commit into a read commit.
	FinishCommit(ctx context.Context, in *FinishCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// InspectCommit returns the info about a commit.
	InspectCommit(ctx context.Context, in *InspectCommitRequest, opts ...grpc.CallOption) (*CommitInfo, error)
	// ListCommit returns info about all commits.
	ListCommit(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error)
	// DeleteCommit deletes a commit.
	DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// FlushCommit waits for downstream commits to finish
	FlushCommit(ctx context.Context, in *FlushCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error)
	// ListBranch returns info about the heads of branches.
	ListBranch(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*CommitInfos, error)
	// File rpcs
	// PutFile writes the specified file to pfs.
	PutFile(ctx context.Context, opts ...grpc.CallOption) (InternalAPI_PutFileClient, error)
	// GetFile returns a byte stream of the contents of the file.
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (InternalAPI_GetFileClient, error)
	// InspectFile returns info about a file.
	InspectFile(ctx context.Context, in *InspectFileRequest, opts ...grpc.CallOption) (*FileInfo, error)
	// ListFile returns info about all files.
	ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*FileInfos, error)
	// DeleteFile deletes a file.
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type internalAPIClient struct {
	cc *grpc.ClientConn
}

func NewInternalAPIClient(cc *grpc.ClientConn) InternalAPIClient {
	return &internalAPIClient{cc}
}

func (c *internalAPIClient) CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/CreateRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) InspectRepo(ctx context.Context, in *InspectRepoRequest, opts ...grpc.CallOption) (*RepoInfo, error) {
	out := new(RepoInfo)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/InspectRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*RepoInfos, error) {
	out := new(RepoInfos)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/ListRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/DeleteRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) FsckRepo(ctx context.Context, in *FsckRepoRequest, opts ...grpc.CallOption) (*CommitFscks, error) {
	out := new(CommitFscks)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/FsckRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) StartCommit(ctx context.Context, in *StartCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/StartCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) FinishCommit(ctx context.Context, in *FinishCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/FinishCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) InspectCommit(ctx context.Context, in *InspectCommitRequest, opts ...grpc.CallOption) (*CommitInfo, error) {
	out := new(CommitInfo)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/InspectCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) ListCommit(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error) {
	out := new(CommitInfos)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/ListCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/DeleteCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) FlushCommit(ctx context.Context, in *FlushCommitRequest, opts ...grpc.CallOption) (*CommitInfos, error) {
	out := new(CommitInfos)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/FlushCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) ListBranch(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*CommitInfos, error) {
	out := new(CommitInfos)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/ListBranch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) PutFile(ctx context.Context, opts ...grpc.CallOption) (InternalAPI_PutFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_InternalAPI_serviceDesc.Streams[0], c.cc, "/pfs.InternalAPI/PutFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &internalAPIPutFileClient{stream}
	return x, nil
}

type InternalAPI_PutFileClient interface {
	Send(*PutFileRequest) error
	CloseAndRecv() (*google_protobuf1.Empty, error)
	grpc.ClientStream
}

type internalAPIPutFileClient struct {
	grpc.ClientStream
}

func (x *internalAPIPutFileClient) Send(m *PutFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *internalAPIPutFileClient) CloseAndRecv() (*google_protobuf1.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf1.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *internalAPIClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (InternalAPI_GetFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_InternalAPI_serviceDesc.Streams[1], c.cc, "/pfs.InternalAPI/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &internalAPIGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InternalAPI_GetFileClient interface {
	Recv() (*google_protobuf3.BytesValue, error)
	grpc.ClientStream
}

type internalAPIGetFileClient struct {
	grpc.ClientStream
}

func (x *internalAPIGetFileClient) Recv() (*google_protobuf3.BytesValue, error) {
	m := new(google_protobuf3.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *internalAPIClient) InspectFile(ctx context.Context, in *InspectFileRequest, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/InspectFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*FileInfos, error) {
	out := new(FileInfos)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/ListFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) DeleteAll(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.InternalAPI/DeleteAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InternalAPI service

type InternalAPIServer interface {
	// Repo rpcs
	// CreateRepo creates a new repo.
	// An error is returned if the repo already exists.
	CreateRepo(context.Context, *CreateRepoRequest) (*google_protobuf1.Empty, error)
	// InspectRepo returns info about a repo.
	InspectRepo(context.Context, *InspectRepoRequest) (*RepoInfo, error)
	// ListRepo returns info about all repos.
	ListRepo(context.Context, *ListRepoRequest) (*RepoInfos, error)
	// DeleteRepo deletes a repo.
	DeleteRepo(context.Context, *DeleteRepoRequest) (*google_protobuf1.Empty, error)
	// FsckRepo checks a repo for inconsistencies
	FsckRepo(context.Context, *FsckRepoRequest) (*CommitFscks, error)
	// Commit rpcs
	// StartCommit creates a new write commit from a parent commit.
	StartCommit(context.Context, *StartCommitRequest) (*google_protobuf1.Empty, error)
	// FinishCommit turns a write commit into a read commit.
	FinishCommit(context.Context, *FinishCommitRequest) (*google_protobuf1.Empty, error)
	// InspectCommit returns the info about a commit.
	InspectCommit(context.Context, *InspectCommitRequest) (*CommitInfo, error)
	// ListCommit returns info about all commits.
	ListCommit(context.Context, *ListCommitRequest) (*CommitInfos, error)
	// DeleteCommit deletes a commit.
	DeleteCommit(context.Context, *DeleteCommitRequest) (*google_protobuf1.Empty, error)
	// FlushCommit waits for downstream commits to finish
	FlushCommit(context.Context, *FlushCommitRequest) (*CommitInfos, error)
	// ListBranch returns info about the heads of branches.
	ListBranch(context.Context, *ListBranchRequest) (*CommitInfos, error)
	// File rpcs
	// PutFile writes the specified file to pfs.
	PutFile(InternalAPI_PutFileServer) error
	// GetFile returns a byte stream of the contents of the file.
	GetFile(*GetFileRequest, InternalAPI_GetFileServer) error
	// InspectFile returns info about a file.
	InspectFile(context.Context, *InspectFileRequest) (*FileInfo, error)
	// ListFile returns info about all files.
	ListFile(context.Context, *ListFileRequest) (*FileInfos, error)
	// DeleteFile deletes a file.
	DeleteFile(context.Context, *DeleteFileRequest) (*google_protobuf1.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
}

func RegisterInternalAPIServer(s *grpc.Server, srv InternalAPIServer) {
	s.RegisterService(&_InternalAPI_serviceDesc, srv)
}

func _InternalAPI_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.InternalAPI/CreateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).CreateRepo(ctx, req.(*CreateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_InspectRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).InspectRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.InternalAPI/InspectRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).InspectRepo(ctx, req.(*InspectRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_ListRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).ListRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.InternalAPI/ListRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).ListRepo(ctx, req.(*ListRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_DeleteRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).DeleteRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.InternalAPI/DeleteRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).DeleteRepo(ctx, req.(*DeleteRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_FsckRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsckRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).FsckRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.InternalAPI/FsckRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).FsckRepo(ctx, req.(*FsckRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_StartCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).StartCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.InternalAPI/StartCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).StartCommit(ctx, req.(*StartCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_FinishCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).FinishCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.InternalAPI/FinishCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).FinishCommit(ctx, req.(*FinishCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_InspectCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).InspectCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.InternalAPI/InspectCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).InspectCommit(ctx, req.(*InspectCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_ListCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).ListCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.InternalAPI/ListCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).ListCommit(ctx, req.(*ListCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_DeleteCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).DeleteCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.InternalAPI/DeleteCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).DeleteCommit(ctx, req.(*DeleteCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_FlushCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).FlushCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.InternalAPI/FlushCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).FlushCommit(ctx, req.(*FlushCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_ListBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).ListBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.InternalAPI/ListBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).ListBranch(ctx, req.(*ListBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_PutFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InternalAPIServer).PutFile(&internalAPIPutFileServer{stream})
}

type InternalAPI_PutFileServer interface {
	SendAndClose(*google_protobuf1.Empty) error
	Recv() (*PutFileRequest, error)
	grpc.ServerStream
}

type internalAPIPutFileServer struct {
	grpc.ServerStream
}

func (x *internalAPIPutFileServer) SendAndClose(m *google_protobuf1.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *internalAPIPutFileServer) Recv() (*PutFileRequest, error) {
	m := new(PutFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _InternalAPI_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InternalAPIServer).GetFile(m, &internalAPIGetFileServer{stream})
}

type InternalAPI_GetFileServer interface {
	Send(*google_protobuf3.BytesValue) error
	grpc.ServerStream
}

type internalAPIGetFileServer struct {
	grpc.ServerStream
}

func (x *internalAPIGetFileServer) Send(m *google_protobuf3.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _InternalAPI_InspectFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).InspectFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.InternalAPI/InspectFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).InspectFile(ctx, req.(*InspectFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_ListFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).ListFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.InternalAPI/ListFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).ListFile(ctx, req.(*ListFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.InternalAPI/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.InternalAPI/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).DeleteAll(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _InternalAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pfs.InternalAPI",
	HandlerType: (*InternalAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepo",
			Handler:    _InternalAPI_CreateRepo_Handler,
		},
		{
			MethodName: "InspectRepo",
			Handler:    _InternalAPI_InspectRepo_Handler,
		},
		{
			MethodName: "ListRepo",
			Handler:    _InternalAPI_ListRepo_Handler,
		},
		{
			MethodName: "DeleteRepo",
			Handler:    _InternalAPI_DeleteRepo_Handler,
		},
		{
			MethodName: "FsckRepo",
			Handler:    _InternalAPI_FsckRepo_Handler,
		},
		{
			MethodName: "StartCommit",
			Handler:    _InternalAPI_StartCommit_Handler,
		},
		{
			MethodName: "FinishCommit",
			Handler:    _InternalAPI_FinishCommit_Handler,
		},
		{
			MethodName: "InspectCommit",
			Handler:    _InternalAPI_InspectCommit_Handler,
		},
		{
			MethodName: "ListCommit",
			Handler:    _InternalAPI_ListCommit_Handler,
		},
		{
			MethodName: "DeleteCommit",
			Handler:    _InternalAPI_DeleteCommit_Handler,
		},
		{
			MethodName: "FlushCommit",
			Handler:    _InternalAPI_FlushCommit_Handler,
		},
		{
			MethodName: "ListBranch",
			Handler:    _InternalAPI_ListBranch_Handler,
		},
		{
			MethodName: "InspectFile",
			Handler:    _InternalAPI_InspectFile_Handler,
		},
		{
			MethodName: "ListFile",
			Handler:    _InternalAPI_ListFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _InternalAPI_DeleteFile_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _InternalAPI_DeleteAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutFile",
			Handler:       _InternalAPI_PutFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _InternalAPI_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

// Client API for BlockAPI service

type BlockAPIClient interface {
	PutBlock(ctx context.Context, opts ...grpc.CallOption) (BlockAPI_PutBlockClient, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (BlockAPI_GetBlockClient, error)
	DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	InspectBlock(ctx context.Context, in *InspectBlockRequest, opts ...grpc.CallOption) (*BlockInfo, error)
	ListBlock(ctx context.Context, in *ListBlockRequest, opts ...grpc.CallOption) (*BlockInfos, error)
	CreateDiff(ctx context.Context, in *DiffInfo, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	InspectDiff(ctx context.Context, in *InspectDiffRequest, opts ...grpc.CallOption) (*DiffInfo, error)
	ListDiff(ctx context.Context, in *ListDiffRequest, opts ...grpc.CallOption) (BlockAPI_ListDiffClient, error)
	DeleteDiff(ctx context.Context, in *DeleteDiffRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type blockAPIClient struct {
	cc *grpc.ClientConn
}

func NewBlockAPIClient(cc *grpc.ClientConn) BlockAPIClient {
	return &blockAPIClient{cc}
}

func (c *blockAPIClient) PutBlock(ctx context.Context, opts ...grpc.CallOption) (BlockAPI_PutBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BlockAPI_serviceDesc.Streams[0], c.cc, "/pfs.BlockAPI/PutBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockAPIPutBlockClient{stream}
	return x, nil
}

type BlockAPI_PutBlockClient interface {
	Send(*PutBlockRequest) error
	CloseAndRecv() (*BlockRefs, error)
	grpc.ClientStream
}

type blockAPIPutBlockClient struct {
	grpc.ClientStream
}

func (x *blockAPIPutBlockClient) Send(m *PutBlockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blockAPIPutBlockClient) CloseAndRecv() (*BlockRefs, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BlockRefs)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockAPIClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (BlockAPI_GetBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BlockAPI_serviceDesc.Streams[1], c.cc, "/pfs.BlockAPI/GetBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockAPIGetBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockAPI_GetBlockClient interface {
	Recv() (*google_protobuf3.BytesValue, error)
	grpc.ClientStream
}

type blockAPIGetBlockClient struct {
	grpc.ClientStream
}

func (x *blockAPIGetBlockClient) Recv() (*google_protobuf3.BytesValue, error) {
	m := new(google_protobuf3.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockAPIClient) DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.BlockAPI/DeleteBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAPIClient) InspectBlock(ctx context.Context, in *InspectBlockRequest, opts ...grpc.CallOption) (*BlockInfo, error) {
	out := new(BlockInfo)
	err := grpc.Invoke(ctx, "/pfs.BlockAPI/InspectBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAPIClient) ListBlock(ctx context.Context, in *ListBlockRequest, opts ...grpc.CallOption) (*BlockInfos, error) {
	out := new(BlockInfos)
	err := grpc.Invoke(ctx, "/pfs.BlockAPI/ListBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAPIClient) CreateDiff(ctx context.Context, in *DiffInfo, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.BlockAPI/CreateDiff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAPIClient) InspectDiff(ctx context.Context, in *InspectDiffRequest, opts ...grpc.CallOption) (*DiffInfo, error) {
	out := new(DiffInfo)
	err := grpc.Invoke(ctx, "/pfs.BlockAPI/InspectDiff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAPIClient) ListDiff(ctx context.Context, in *ListDiffRequest, opts ...grpc.CallOption) (BlockAPI_ListDiffClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BlockAPI_serviceDesc.Streams[2], c.cc, "/pfs.BlockAPI/ListDiff", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockAPIListDiffClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockAPI_ListDiffClient interface {
	Recv() (*DiffInfo, error)
	grpc.ClientStream
}

type blockAPIListDiffClient struct {
	grpc.ClientStream
}

func (x *blockAPIListDiffClient) Recv() (*DiffInfo, error) {
	m := new(DiffInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockAPIClient) DeleteDiff(ctx context.Context, in *DeleteDiffRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pfs.BlockAPI/DeleteDiff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlockAPI service

type BlockAPIServer interface {
	PutBlock(BlockAPI_PutBlockServer) error
	GetBlock(*GetBlockRequest, BlockAPI_GetBlockServer) error
	DeleteBlock(context.Context, *DeleteBlockRequest) (*google_protobuf1.Empty, error)
	InspectBlock(context.Context, *InspectBlockRequest) (*BlockInfo, error)
	ListBlock(context.Context, *ListBlockRequest) (*BlockInfos, error)
	CreateDiff(context.Context, *DiffInfo) (*google_protobuf1.Empty, error)
	InspectDiff(context.Context, *InspectDiffRequest) (*DiffInfo, error)
	ListDiff(*ListDiffRequest, BlockAPI_ListDiffServer) error
	DeleteDiff(context.Context, *DeleteDiffRequest) (*google_protobuf1.Empty, error)
}

func RegisterBlockAPIServer(s *grpc.Server, srv BlockAPIServer) {
	s.RegisterService(&_BlockAPI_serviceDesc, srv)
}

func _BlockAPI_PutBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlockAPIServer).PutBlock(&blockAPIPutBlockServer{stream})
}

type BlockAPI_PutBlockServer interface {
	SendAndClose(*BlockRefs) error
	Recv() (*PutBlockRequest, error)
	grpc.ServerStream
}

type blockAPIPutBlockServer struct {
	grpc.ServerStream
}

func (x *blockAPIPutBlockServer) SendAndClose(m *BlockRefs) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blockAPIPutBlockServer) Recv() (*PutBlockRequest, error) {
	m := new(PutBlockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BlockAPI_GetBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockAPIServer).GetBlock(m, &blockAPIGetBlockServer{stream})
}

type BlockAPI_GetBlockServer interface {
	Send(*google_protobuf3.BytesValue) error
	grpc.ServerStream
}

type blockAPIGetBlockServer struct {
	grpc.ServerStream
}

func (x *blockAPIGetBlockServer) Send(m *google_protobuf3.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockAPI_DeleteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAPIServer).DeleteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.BlockAPI/DeleteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAPIServer).DeleteBlock(ctx, req.(*DeleteBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAPI_InspectBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAPIServer).InspectBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.BlockAPI/InspectBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAPIServer).InspectBlock(ctx, req.(*InspectBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAPI_ListBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAPIServer).ListBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.BlockAPI/ListBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAPIServer).ListBlock(ctx, req.(*ListBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAPI_CreateDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiffInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAPIServer).CreateDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.BlockAPI/CreateDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAPIServer).CreateDiff(ctx, req.(*DiffInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAPI_InspectDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAPIServer).InspectDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.BlockAPI/InspectDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAPIServer).InspectDiff(ctx, req.(*InspectDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAPI_ListDiff_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDiffRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockAPIServer).ListDiff(m, &blockAPIListDiffServer{stream})
}

type BlockAPI_ListDiffServer interface {
	Send(*DiffInfo) error
	grpc.ServerStream
}

type blockAPIListDiffServer struct {
	grpc.ServerStream
}

func (x *blockAPIListDiffServer) Send(m *DiffInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockAPI_DeleteDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAPIServer).DeleteDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pfs.BlockAPI/DeleteDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAPIServer).DeleteDiff(ctx, req.(*DeleteDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pfs.BlockAPI",
	HandlerType: (*BlockAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteBlock",
			Handler:    _BlockAPI_DeleteBlock_Handler,
		},
		{
			MethodName: "InspectBlock",
			Handler:    _BlockAPI_InspectBlock_Handler,
		},
		{
			MethodName: "ListBlock",
			Handler:    _BlockAPI_ListBlock_Handler,
		},
		{
			MethodName: "CreateDiff",
			Handler:    _BlockAPI_CreateDiff_Handler,
		},
		{
			MethodName: "InspectDiff",
			Handler:    _BlockAPI_InspectDiff_Handler,
		},
		{
			MethodName: "DeleteDiff",
			Handler:    _BlockAPI_DeleteDiff_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutBlock",
			Handler:       _BlockAPI_PutBlock_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetBlock",
			Handler:       _BlockAPI_GetBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListDiff",
			Handler:       _BlockAPI_ListDiff_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("client/pfs/pfs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x5a, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0x37, 0xb9, 0x4b, 0x6a, 0xf9, 0xa8, 0x2f, 0x8f, 0x1d, 0x57, 0xa1, 0xdd, 0x44, 0xdd, 0xa4,
	0x45, 0xe2, 0xa4, 0x52, 0x20, 0x27, 0x71, 0x60, 0xb7, 0x75, 0x64, 0x4b, 0xb2, 0x19, 0x58, 0xb6,
	0xb1, 0x56, 0x1a, 0xf4, 0x50, 0x10, 0x2b, 0x72, 0x69, 0x12, 0x5e, 0x72, 0xd9, 0xdd, 0x65, 0x02,
	0xf5, 0x58, 0x20, 0x87, 0xf6, 0xda, 0x73, 0xd1, 0x73, 0xff, 0x82, 0x1e, 0x7b, 0xef, 0xa1, 0x87,
	0x5e, 0xfb, 0x07, 0xf4, 0x2f, 0xe8, 0xbd, 0x6f, 0xde, 0xcc, 0xec, 0xce, 0x2c, 0xbf, 0x03, 0xb8,
	0x05, 0x02, 0x1f, 0x12, 0xcd, 0xc7, 0x7b, 0x6f, 0xde, 0xf7, 0xfc, 0x66, 0x69, 0xb8, 0xda, 0x0e,
	0xfb, 0xc1, 0x30, 0xdd, 0x1f, 0x75, 0x13, 0xfe, 0xdf, 0xde, 0x28, 0x8e, 0xd2, 0x88, 0x59, 0x38,
	0x6c, 0xdc, 0x78, 0x11, 0x45, 0x2f, 0xc2, 0x60, 0xdf, 0x1f, 0xf5, 0xf7, 0xfd, 0xe1, 0x30, 0x4a,
	0xfd, 0xb4, 0x1f, 0x0d, 0x25, 0x49, 0xe3, 0xba, 0xdc, 0xa5, 0xd9, 0xf9, 0xb8, 0xbb, 0x1f, 0x0c,
	0x46, 0xe9, 0x85, 0xdc, 0x7c, 0xbb, 0xb8, 0x99, 0xf6, 0x07, 0x41, 0x92, 0xfa, 0x83, 0x91, 0x24,
	0x78, 0xab, 0x48, 0xf0, 0x4d, 0xec, 0x8f, 0x46, 0x41, 0xac, 0xa4, 0xdf, 0x50, 0x6a, 0xbd, 0x7c,
	0xb1, 0x9f, 0xf4, 0xfc, 0xb8, 0x23, 0xfe, 0x2f, 0x76, 0xdd, 0x06, 0xd8, 0x5e, 0x30, 0x8a, 0x18,
	0x03, 0x7b, 0xe8, 0x0f, 0x82, 0x9d, 0xd2, 0x6e, 0xe9, 0xbd, 0x9a, 0x47, 0x63, 0xf7, 0x36, 0x54,
	0x1f, 0x44, 0x83, 0x41, 0x3f, 0x65, 0x3f, 0x04, 0x3b, 0x46, 0x2a, 0xda, 0xad, 0x1f, 0xd4, 0xf6,
	0xb8, 0x79, 0x9c, 0xcd, 0xa3, 0x65, 0xb6, 0x09, 0xe5, 0x7e, 0x67, 0xa7, 0x4c, 0xac, 0x38, 0x72,
	0xef, 0x81, 0x7d, 0xd2, 0x0f, 0x03, 0xf6, 0x0e, 0x54, 0xdb, 0x24, 0x40, 0x32, 0xd6, 0x89, 0x51,
	0xc8, 0xf4, 0xe4, 0x16, 0x3f, 0x79, 0xe4, 0xa7, 0x3d, 0xc9, 0x4e, 0x63, 0xf7, 0x3a, 0x54, 0xee,
	0x87, 0x51, 0xfb, 0x25, 0xdf, 0xec, 0xf9, 0x49, 0x4f, 0xa9, 0xc5, 0xc7, 0xee, 0x21, 0xd8, 0x47,
	0xfd, 0x6e, 0x77, 0x39, 0xe9, 0x57, 0xa1, 0x42, 0xe6, 0x92, 0x78, 0xdb, 0x13, 0x13, 0xf7, 0x2f,
	0x25, 0x70, 0xb8, 0xfe, 0xcd, 0x61, 0x37, 0x5a, 0x64, 0xdc, 0xc7, 0xb0, 0xd6, 0x8e, 0x03, 0x3f,
	0x0d, 0x84, 0x8c, 0xfa, 0x41, 0x63, 0x4f, 0x78, 0x7c, 0x4f, 0x79, 0x7c, 0xef, 0x4c, 0x85, 0xc4,
	0x53, 0xa4, 0x28, 0x14, 0x92, 0xfe, 0x6f, 0x83, 0xd6, 0xf9, 0x45, 0x1a, 0x24, 0x3b, 0x16, 0x1d,
	0x5e, 0xe3, 0x2b, 0xf7, 0xf9, 0x02, 0x7b, 0x1f, 0x00, 0xb9, 0xbf, 0x0e, 0x86, 0xfe, 0xb0, 0x1d,
	0xec, 0xd8, 0xbb, 0x96, 0x79, 0xb2, 0xb6, 0x89, 0x51, 0xa8, 0x29, 0x55, 0x13, 0x76, 0x13, 0x6a,
	0x5c, 0xa9, 0x56, 0x1f, 0x67, 0xa8, 0x30, 0x67, 0xdb, 0xc8, 0xd8, 0x38, 0x89, 0xe7, 0xc4, 0x72,
	0xe4, 0x7e, 0x6b, 0x01, 0x08, 0x6f, 0x90, 0x99, 0x4b, 0xb9, 0xeb, 0x1a, 0x54, 0xcf, 0x63, 0x3c,
	0x56, 0x85, 0x43, 0xce, 0xd8, 0x47, 0x50, 0x17, 0x14, 0xad, 0xf4, 0x62, 0x14, 0x90, 0x3d, 0x9b,
	0x07, 0x5b, 0x9a, 0x84, 0x33, 0x5c, 0xf6, 0xa0, 0x9d, 0x8d, 0x91, 0x63, 0x63, 0xe4, 0xc7, 0x98,
	0x78, 0x2d, 0x79, 0xaa, 0x3d, 0x79, 0xea, 0xba, 0xa0, 0x90, 0x49, 0x86, 0x8e, 0x46, 0x27, 0xc6,
	0xdc, 0xd1, 0x95, 0xc5, 0x8e, 0x96, 0xa4, 0xec, 0x53, 0x70, 0xba, 0xfd, 0x61, 0x3f, 0xe9, 0x21,
	0x5b, 0x75, 0x21, 0x5b, 0x46, 0x5b, 0x08, 0xd0, 0x5a, 0x31, 0x40, 0x37, 0xa0, 0xd6, 0xe6, 0xee,
	0x0f, 0x43, 0x94, 0xeb, 0xe0, 0xae, 0xe3, 0xe5, 0x0b, 0xec, 0x03, 0x23, 0x7c, 0x35, 0x8a, 0x83,
	0x61, 0x99, 0x1e, 0xc0, 0x7b, 0x50, 0xcf, 0xc3, 0x90, 0x68, 0xae, 0xd4, 0x82, 0xa8, 0xbb, 0x92,
	0xc2, 0x28, 0x5d, 0x49, 0x81, 0xfc, 0x7d, 0x19, 0x1c, 0x5e, 0x4f, 0x2a, 0x5b, 0xbb, 0x38, 0x36,
	0xb2, 0x95, 0x6f, 0x7a, 0xb4, 0xcc, 0x13, 0x84, 0xff, 0x15, 0x61, 0x2a, 0x53, 0x98, 0x36, 0x32,
	0x1a, 0x0a, 0x92, 0xd3, 0x95, 0xa3, 0x45, 0x39, 0x8a, 0x9e, 0x1d, 0x44, 0x9d, 0x7e, 0xb7, 0x8f,
	0x1e, 0xb0, 0x17, 0x7b, 0x56, 0xd1, 0x62, 0x1c, 0xb7, 0xa4, 0x81, 0x19, 0x7b, 0x65, 0x32, 0xf6,
	0x9b, 0x82, 0xe6, 0x54, 0x71, 0xfd, 0x18, 0x9c, 0x76, 0xaf, 0x1f, 0x76, 0x30, 0x21, 0x30, 0x8e,
	0x96, 0x69, 0x5b, 0xb6, 0xc5, 0xab, 0x41, 0xb9, 0x22, 0xc9, 0x8c, 0x9d, 0xa8, 0x06, 0x45, 0x22,
	0x8c, 0x25, 0x27, 0x22, 0x23, 0x37, 0xcb, 0xf3, 0x87, 0x2f, 0x02, 0xde, 0x15, 0xc2, 0xe8, 0x9b,
	0x20, 0x26, 0x2f, 0x62, 0x57, 0xa0, 0x09, 0x5f, 0x1d, 0xf3, 0xce, 0xa9, 0x7a, 0x05, 0x4d, 0x5c,
	0x0f, 0x1c, 0xea, 0x45, 0x5e, 0xd0, 0x65, 0xbb, 0x50, 0x39, 0xe7, 0x63, 0xe9, 0x7d, 0xa0, 0xc3,
	0xc4, 0xae, 0xd8, 0x60, 0xef, 0x42, 0x25, 0xe6, 0x47, 0xc8, 0x5e, 0xb1, 0x29, 0x28, 0xd4, 0xc1,
	0x9e, 0xd8, 0x24, 0x65, 0xa4, 0x4c, 0xb2, 0x82, 0x78, 0x5b, 0x71, 0xd0, 0x35, 0xac, 0x50, 0x24,
	0x9e, 0x73, 0x2e, 0x47, 0xee, 0x9f, 0x6d, 0xa8, 0x1e, 0xa2, 0x5a, 0xc3, 0x0e, 0xfb, 0x10, 0x20,
	0x63, 0x4b, 0xa6, 0xf3, 0xd5, 0xce, 0xb3, 0x43, 0x3e, 0xd1, 0xdc, 0x5b, 0x26, 0xda, 0x37, 0x89,
	0x56, 0x08, 0xdb, 0x7b, 0x20, 0xf7, 0x8e, 0x87, 0x69, 0x7c, 0x91, 0xbb, 0x9b, 0xfd, 0x04, 0x9c,
	0xd0, 0x4f, 0x52, 0x52, 0xcd, 0x9a, 0x0c, 0xe2, 0x1a, 0xdf, 0xe4, 0x8e, 0xc1, 0xbe, 0xd1, 0x09,
	0xc2, 0x20, 0x0d, 0x28, 0x53, 0x1c, 0x4f, 0xce, 0xd8, 0x01, 0xac, 0xf5, 0xfc, 0x61, 0x27, 0xc4,
	0xfc, 0xaa, 0xd0, 0xa9, 0x3b, 0xfa, 0xa9, 0x8f, 0xc4, 0x96, 0x38, 0x54, 0x11, 0xb2, 0x63, 0xd8,
	0x14, 0xc3, 0x96, 0x10, 0x92, 0xc8, 0x7c, 0x78, 0x6b, 0x92, 0xf5, 0x48, 0x10, 0x08, 0x01, 0x1b,
	0x3d, 0x7d, 0xcd, 0xac, 0x84, 0xb5, 0xb9, 0x95, 0xd0, 0xb8, 0x0b, 0x1b, 0x86, 0x07, 0xd8, 0x36,
	0x58, 0x2f, 0x83, 0x0b, 0x79, 0xed, 0xf0, 0x21, 0x4f, 0x8e, 0xaf, 0xfd, 0x70, 0x2c, 0x02, 0xeb,
	0x78, 0x62, 0x72, 0xa7, 0xfc, 0x59, 0xa9, 0xf1, 0x05, 0xac, 0xeb, 0x86, 0x4c, 0xe1, 0x7d, 0x57,
	0xe7, 0xcd, 0x92, 0x42, 0xc5, 0x46, 0x97, 0xf5, 0x39, 0xb0, 0x49, 0xcb, 0x56, 0xd1, 0xc6, 0xfd,
	0x5d, 0x49, 0xe6, 0x16, 0x75, 0x8b, 0xc5, 0x09, 0xfb, 0x2a, 0xae, 0x37, 0xf7, 0x2e, 0x40, 0xa6,
	0x43, 0xc2, 0x7e, 0xaa, 0x32, 0x55, 0xab, 0x53, 0xcd, 0x07, 0x54, 0xa8, 0x22, 0x55, 0xa9, 0x52,
	0xff, 0x6e, 0x81, 0xc3, 0x2f, 0x78, 0xd5, 0xee, 0xb0, 0x41, 0x74, 0x8d, 0x76, 0xc7, 0x37, 0x3d,
	0x5a, 0x9e, 0xbc, 0x65, 0xca, 0x8b, 0x6e, 0x99, 0xfc, 0x86, 0xb3, 0x8c, 0x1b, 0x4e, 0xbb, 0x7d,
	0xec, 0xef, 0x76, 0xfb, 0x54, 0x56, 0xb8, 0x7d, 0xf0, 0x34, 0x9f, 0x12, 0x59, 0x25, 0x77, 0x23,
	0xb3, 0x8c, 0x9b, 0x2d, 0xb3, 0x5c, 0x55, 0x86, 0x24, 0xfd, 0xdf, 0xdd, 0x59, 0x8d, 0x87, 0xb0,
	0xae, 0xab, 0x30, 0x25, 0x03, 0x7f, 0x64, 0xe6, 0x74, 0x5d, 0x2b, 0x4e, 0x3d, 0x1d, 0xff, 0x58,
	0x82, 0xca, 0x73, 0x8e, 0xb9, 0xd8, 0xdb, 0x50, 0xa7, 0x7a, 0x1c, 0x8e, 0x07, 0xe7, 0x59, 0xe7,
	0x05, 0xbe, 0xf4, 0x84, 0x56, 0x50, 0xe2, 0x3a, 0x11, 0xe0, 0xad, 0x31, 0x0e, 0xc7, 0x89, 0xec,
	0xc2, 0xc4, 0x74, 0x2a, 0x96, 0x38, 0x89, 0xc8, 0x24, 0x29, 0x44, 0x24, 0x5e, 0x9d, 0xd6, 0xa4,
	0x94, 0x77, 0x60, 0x43, 0x90, 0x28, 0x31, 0x36, 0xd1, 0x08, 0x3e, 0x29, 0x87, 0x6b, 0x75, 0xf9,
	0x01, 0xa5, 0x32, 0xc1, 0xad, 0xe0, 0x37, 0x63, 0x8c, 0xd0, 0xab, 0x01, 0x82, 0x26, 0xd2, 0xb3,
	0xe6, 0x21, 0xbd, 0x5b, 0xc0, 0x9a, 0xc3, 0x64, 0x14, 0xb4, 0xd3, 0xe5, 0xb5, 0x72, 0x7f, 0x06,
	0x5b, 0x8f, 0xfb, 0x89, 0xc1, 0x61, 0x1e, 0x59, 0x9a, 0x77, 0xe4, 0x23, 0xb8, 0x2c, 0x3a, 0xcd,
	0x0a, 0x7e, 0xc0, 0xde, 0xd3, 0x8d, 0xe2, 0x76, 0xd6, 0x7b, 0x68, 0xe2, 0x36, 0x15, 0xd8, 0x3c,
	0x49, 0xb0, 0xab, 0x2c, 0x0b, 0x36, 0x09, 0x8e, 0x27, 0x74, 0x23, 0xd9, 0x9e, 0x9c, 0xe5, 0x80,
	0x89, 0x8b, 0xd2, 0x01, 0x53, 0x37, 0xa1, 0x4e, 0x56, 0x04, 0x4c, 0x9c, 0x4c, 0x01, 0x26, 0x3e,
	0x76, 0xbf, 0x2d, 0xc1, 0x16, 0x2d, 0x2e, 0x6f, 0x14, 0xea, 0x82, 0x7f, 0xfd, 0x7e, 0x2c, 0xad,
	0x92, 0x33, 0x76, 0x17, 0x2e, 0x0b, 0xc1, 0x49, 0x2b, 0x8d, 0x5a, 0x92, 0xc4, 0x9a, 0xae, 0x82,
	0x84, 0x3d, 0xc9, 0x19, 0x1e, 0xca, 0xe9, 0xdc, 0x7f, 0x95, 0x80, 0x3d, 0xe7, 0x9d, 0x42, 0x1a,
	0xbe, 0x9c, 0x2a, 0x85, 0xd7, 0x14, 0xbb, 0x0e, 0x35, 0xd9, 0xe3, 0x70, 0x59, 0x34, 0x2d, 0x47,
	0x2c, 0x34, 0x3b, 0x5a, 0x3b, 0xb3, 0x67, 0xb5, 0xb3, 0x15, 0xc0, 0xb4, 0xd9, 0x23, 0xaa, 0xf3,
	0x71, 0xed, 0x1f, 0x4a, 0x70, 0xe5, 0x84, 0x1a, 0x9a, 0x69, 0xde, 0xb2, 0xb1, 0x17, 0xad, 0x49,
	0xf9, 0x5b, 0xcc, 0x8c, 0x86, 0x6a, 0x2d, 0xdf, 0x50, 0xf1, 0xc6, 0xb9, 0x2a, 0x6b, 0x67, 0x75,
	0x65, 0xdc, 0x7f, 0x63, 0x3b, 0xe0, 0x45, 0x34, 0x2b, 0x4c, 0xd6, 0xb4, 0x30, 0x15, 0x9e, 0x44,
	0xe5, 0xc5, 0x4f, 0xa2, 0x0f, 0xb1, 0x03, 0xc6, 0xd1, 0x40, 0x5d, 0x55, 0xd6, 0x14, 0xf7, 0xf2,
	0x7d, 0x79, 0x51, 0x7d, 0x30, 0xe5, 0x89, 0x38, 0x2b, 0x16, 0xbc, 0x3f, 0xfb, 0x61, 0x48, 0xa1,
	0x76, 0x3c, 0x3e, 0xe4, 0x55, 0x2a, 0x6e, 0xfe, 0xaa, 0xa8, 0x52, 0x9a, 0xb8, 0x07, 0xc2, 0xd0,
	0xfb, 0x94, 0x24, 0x4b, 0x76, 0x98, 0x3b, 0x70, 0x45, 0xf4, 0x88, 0xef, 0xe0, 0xd9, 0x5f, 0x03,
	0x3b, 0xc1, 0x86, 0x3b, 0x27, 0x43, 0xac, 0x59, 0x19, 0xe2, 0xc2, 0x9a, 0xa8, 0xb8, 0x48, 0x02,
	0x56, 0x4d, 0xb1, 0x6a, 0xca, 0x4b, 0x2c, 0x72, 0xbf, 0x02, 0xe0, 0x57, 0xe6, 0x69, 0x90, 0xf6,
	0xa2, 0x4e, 0xd1, 0xbf, 0x53, 0xd4, 0xd2, 0xfd, 0x8b, 0x65, 0xd5, 0x1d, 0x87, 0x61, 0x8b, 0x5e,
	0x53, 0x22, 0x09, 0x1d, 0xbe, 0xc0, 0xe1, 0xa1, 0xfb, 0x9f, 0x12, 0x6c, 0x3e, 0x0c, 0x52, 0x7a,
	0x7c, 0xe4, 0x5e, 0x9a, 0xf7, 0xf0, 0xc2, 0xab, 0x29, 0xea, 0x76, 0x93, 0x20, 0x95, 0xb7, 0x33,
	0x97, 0x68, 0x79, 0x75, 0xb1, 0x26, 0xee, 0xe7, 0x49, 0xd0, 0x64, 0xe9, 0xd7, 0xf7, 0xae, 0xfa,
	0x54, 0x61, 0x6b, 0x58, 0x8d, 0xee, 0x4e, 0xf9, 0xd9, 0x82, 0xa7, 0x1c, 0x47, 0x3d, 0xad, 0x01,
	0xd9, 0x2b, 0x0b, 0x7b, 0x2b, 0x43, 0x0e, 0xc2, 0x0d, 0x1e, 0x74, 0x72, 0x97, 0x60, 0x99, 0x8d,
	0x87, 0x89, 0xdf, 0x15, 0x08, 0x18, 0xcb, 0x4c, 0xcc, 0xf8, 0xba, 0x40, 0xcb, 0x84, 0x13, 0xb0,
	0x6d, 0x88, 0x99, 0xfb, 0x57, 0xb4, 0xfb, 0xd9, 0x78, 0x15, 0xbb, 0x57, 0x79, 0x70, 0x66, 0xa8,
	0x95, 0xdb, 0xbe, 0x2e, 0x61, 0x82, 0xa6, 0x8b, 0xad, 0xeb, 0x82, 0xe1, 0xac, 0xe1, 0x03, 0xa0,
	0x8f, 0xb1, 0xc2, 0x9b, 0xbe, 0x42, 0x92, 0x05, 0x6a, 0x3c, 0x52, 0xab, 0x5e, 0x4e, 0xc0, 0x35,
	0x57, 0xb7, 0xe7, 0x0a, 0xda, 0xef, 0xea, 0x9f, 0x87, 0x96, 0xf1, 0xb9, 0xb5, 0x8a, 0xcf, 0xed,
	0x19, 0x3e, 0xaf, 0x18, 0x3e, 0xff, 0x47, 0x49, 0x5c, 0xe1, 0xff, 0x67, 0xb5, 0x77, 0x60, 0x2d,
	0x0e, 0xda, 0xe3, 0x38, 0x51, 0x7a, 0xab, 0xa9, 0x66, 0x50, 0x65, 0x86, 0x41, 0x55, 0xc3, 0xa0,
	0x73, 0x05, 0x2a, 0x56, 0xb0, 0x28, 0x3f, 0xa3, 0x3c, 0xe3, 0x0c, 0xcb, 0x38, 0xe3, 0x4b, 0xd8,
	0xc2, 0x3c, 0x95, 0x6f, 0x28, 0x71, 0x42, 0x96, 0x5d, 0x25, 0x3d, 0xbb, 0x8c, 0x2c, 0x2a, 0x2f,
	0xca, 0xa2, 0x31, 0x6c, 0x61, 0xd9, 0x1b, 0x62, 0x17, 0x3f, 0xa1, 0xa6, 0x95, 0xbe, 0xbd, 0xa8,
	0xf4, 0x8d, 0xf7, 0xd2, 0xa7, 0xc0, 0x84, 0xc7, 0x56, 0x3b, 0xd9, 0xbd, 0x0d, 0x57, 0x64, 0xce,
	0xaf, 0xc8, 0xc8, 0x60, 0x9b, 0xee, 0x01, 0x8d, 0x4b, 0x83, 0x9f, 0xf4, 0xc0, 0xca, 0xe3, 0x36,
	0xe7, 0x01, 0xe6, 0x9e, 0x88, 0xdc, 0x2d, 0x70, 0x2c, 0x80, 0x8f, 0x53, 0xbe, 0xc8, 0x1e, 0xa8,
	0x9c, 0x59, 0xfe, 0xec, 0x9b, 0x4f, 0x15, 0xe4, 0x94, 0xcd, 0x65, 0xfb, 0xc1, 0xd3, 0xd3, 0xd3,
	0xe6, 0x59, 0xeb, 0xec, 0x57, 0xcf, 0x8e, 0x5b, 0x4f, 0x9e, 0x3e, 0x39, 0xde, 0xbe, 0x54, 0x5c,
	0xf5, 0x8e, 0x0f, 0x8f, 0xb6, 0x4b, 0xec, 0x0d, 0x84, 0xff, 0xda, 0xea, 0x57, 0x5e, 0xf3, 0xec,
	0x78, 0xbb, 0x7c, 0xf3, 0x91, 0xf8, 0xce, 0x46, 0xe2, 0x18, 0x6c, 0x9e, 0x34, 0x1f, 0x1f, 0x1b,
	0xc2, 0x90, 0x2d, 0x5f, 0xf3, 0x8e, 0x1f, 0x7e, 0xf9, 0xf8, 0xd0, 0x43, 0x69, 0x97, 0x61, 0x23,
	0x5f, 0x3e, 0x6a, 0x7a, 0x28, 0xe9, 0x7d, 0xa8, 0x65, 0xf9, 0xc5, 0x1c, 0xb0, 0xa5, 0x00, 0x1c,
	0x7d, 0xf1, 0xfc, 0xe9, 0x13, 0xe4, 0xc1, 0xd1, 0xe3, 0x26, 0xae, 0x95, 0x0f, 0xfe, 0xe6, 0x80,
	0x75, 0xf8, 0xac, 0xc9, 0x7e, 0x81, 0xd6, 0x64, 0x4f, 0x12, 0x76, 0x4d, 0x5c, 0x5b, 0xc5, 0x37,
	0x4a, 0xe3, 0xda, 0x04, 0x1a, 0x3a, 0xe6, 0x3f, 0x16, 0xb8, 0x97, 0xd8, 0x6d, 0xa8, 0x6b, 0xaf,
	0x07, 0xf6, 0x03, 0x12, 0x30, 0xf9, 0x9e, 0x68, 0x98, 0xdf, 0x8b, 0x91, 0xf1, 0x00, 0x1c, 0xf5,
	0x82, 0x60, 0x57, 0x69, 0xb3, 0xf0, 0xa0, 0x68, 0x6c, 0x1a, 0x2c, 0x09, 0xf2, 0xa0, 0xb2, 0xf9,
	0xbb, 0x41, 0x2a, 0x3b, 0xf1, 0x90, 0x98, 0xa3, 0xec, 0xc7, 0xe8, 0x69, 0x09, 0xd0, 0xe5, 0x99,
	0x05, 0xbc, 0xde, 0xd8, 0x2e, 0xa0, 0x6b, 0x7e, 0xea, 0x27, 0x50, 0xd7, 0xe0, 0xb4, 0x34, 0x71,
	0x12, 0x60, 0x37, 0xf4, 0x3b, 0x1f, 0xd9, 0xee, 0xc3, 0xba, 0x8e, 0x53, 0xd9, 0x8e, 0x6c, 0x3e,
	0x13, 0xd0, 0x75, 0x8e, 0xc2, 0x3f, 0x87, 0x0d, 0x03, 0x5f, 0xb2, 0x37, 0x75, 0xff, 0x9a, 0x52,
	0x8a, 0x1f, 0x73, 0x91, 0xfd, 0x33, 0x80, 0x1c, 0x60, 0x4a, 0x7f, 0x4d, 0x20, 0x4e, 0xc3, 0x66,
	0xe5, 0x69, 0x54, 0x5e, 0x47, 0x5f, 0x52, 0xf9, 0x29, 0x80, 0x6c, 0x8e, 0xf2, 0x77, 0xa0, 0xae,
	0xa1, 0x30, 0xe9, 0xb7, 0x49, 0x5c, 0x36, 0xf5, 0x7c, 0xa9, 0xb9, 0x40, 0x8c, 0x9a, 0xe6, 0x06,
	0x84, 0x9c, 0xca, 0x79, 0x07, 0xd6, 0x24, 0x94, 0x60, 0x57, 0x68, 0xdb, 0x04, 0x16, 0xb3, 0xf5,
	0x7d, 0xaf, 0xc4, 0xee, 0xc1, 0x9a, 0x84, 0x5f, 0x92, 0xd7, 0x04, 0x63, 0x8d, 0xeb, 0x13, 0xbc,
	0xd4, 0x48, 0x7f, 0xc9, 0x5b, 0xbe, 0x7b, 0xe9, 0xa3, 0x92, 0x56, 0x0d, 0x24, 0xc4, 0xa8, 0x06,
	0x5d, 0x90, 0xf9, 0xbd, 0x38, 0xaf, 0x06, 0xe2, 0xca, 0xab, 0x41, 0x67, 0xd9, 0x34, 0x58, 0x8c,
	0x6a, 0x20, 0x2e, 0xbd, 0x1a, 0x96, 0xb2, 0x17, 0x93, 0xab, 0x26, 0xc8, 0x0f, 0x11, 0xb8, 0xcf,
	0x20, 0x9b, 0xcd, 0x7e, 0xf0, 0x4f, 0x87, 0x1b, 0x8b, 0x9d, 0x66, 0xe8, 0x87, 0xaf, 0x3b, 0xc9,
	0x52, 0x9d, 0xe4, 0xf3, 0x25, 0x3b, 0xc9, 0xec, 0x73, 0x5f, 0x37, 0x95, 0xd7, 0x4d, 0xe5, 0xfb,
	0xdc, 0x54, 0xfe, 0x64, 0xcb, 0xdf, 0xbd, 0x78, 0x47, 0xc1, 0x22, 0x53, 0x68, 0x5b, 0xea, 0x5f,
	0x00, 0xdf, 0x8d, 0xc2, 0x6f, 0x1a, 0xe4, 0xef, 0x43, 0x70, 0x14, 0x98, 0x96, 0x5c, 0x05, 0x6c,
	0xbd, 0xd8, 0xe3, 0x58, 0xa7, 0x1a, 0x30, 0x96, 0x1e, 0x9f, 0x84, 0xca, 0x73, 0xd3, 0x74, 0x5d,
	0x87, 0xc8, 0x32, 0xd5, 0xa7, 0xa0, 0xe6, 0x46, 0xe1, 0x27, 0x09, 0xc2, 0x1b, 0xb5, 0x0c, 0x25,
	0xb3, 0x37, 0xf2, 0x2c, 0xd5, 0xb9, 0xb6, 0x4c, 0x2e, 0x01, 0x53, 0x64, 0xff, 0xa5, 0x7f, 0xa6,
	0xb0, 0x61, 0x7c, 0xd9, 0x5f, 0xaa, 0xed, 0x12, 0x9f, 0x91, 0x5d, 0x1a, 0x2a, 0x6e, 0x98, 0x02,
	0x91, 0xf1, 0x96, 0xc8, 0x2e, 0xe2, 0xca, 0xb3, 0x6b, 0x1e, 0x0b, 0x7a, 0x36, 0x4b, 0x2f, 0x62,
	0xd3, 0xd3, 0x4b, 0x67, 0x9c, 0xa9, 0xed, 0x79, 0x95, 0x56, 0x6e, 0xfd, 0x37, 0x00, 0x00, 0xff,
	0xff, 0xb7, 0x19, 0x3c, 0xf7, 0xf6, 0x22, 0x00, 0x00,
}
