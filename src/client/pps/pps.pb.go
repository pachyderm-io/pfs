// Code generated by protoc-gen-gogo.
// source: client/pps/pps.proto
// DO NOT EDIT!

/*
Package pps is a generated protocol buffer package.

It is generated from these files:
	client/pps/pps.proto

It has these top-level messages:
	Secret
	Transform
	Output
	Job
	Service
	Method
	JobInput
	ParallelismSpec
	JobInfo
	Chunk
	Pod
	JobInfos
	Pipeline
	PipelineInput
	GCPolicy
	PipelineInfo
	PipelineInfos
	CreateJobRequest
	InspectJobRequest
	ListJobRequest
	DeleteJobRequest
	GetLogsRequest
	CreatePipelineRequest
	InspectPipelineRequest
	ListPipelineRequest
	DeletePipelineRequest
	StartPipelineRequest
	StopPipelineRequest
*/
package pps

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import google_protobuf1 "github.com/gogo/protobuf/types"
import google_protobuf2 "github.com/gogo/protobuf/types"
import google_protobuf3 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"
import pfs "github.com/pachyderm/pachyderm/src/client/pfs"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type JobState int32

const (
	JobState_JOB_CREATING JobState = 0
	JobState_JOB_RUNNING  JobState = 1
	JobState_JOB_FAILURE  JobState = 2
	JobState_JOB_SUCCESS  JobState = 3
	// An empty job is a job that hasn't actually been run.
	// It's a result of empty input commits.
	JobState_JOB_EMPTY      JobState = 4
	JobState_JOB_OUTPUTTING JobState = 5
)

var JobState_name = map[int32]string{
	0: "JOB_CREATING",
	1: "JOB_RUNNING",
	2: "JOB_FAILURE",
	3: "JOB_SUCCESS",
	4: "JOB_EMPTY",
	5: "JOB_OUTPUTTING",
}
var JobState_value = map[string]int32{
	"JOB_CREATING":   0,
	"JOB_RUNNING":    1,
	"JOB_FAILURE":    2,
	"JOB_SUCCESS":    3,
	"JOB_EMPTY":      4,
	"JOB_OUTPUTTING": 5,
}

func (x JobState) String() string {
	return proto.EnumName(JobState_name, int32(x))
}
func (JobState) EnumDescriptor() ([]byte, []int) { return fileDescriptorPps, []int{0} }

type Partition int32

const (
	Partition_BLOCK Partition = 0
	Partition_FILE  Partition = 1
	Partition_REPO  Partition = 2
)

var Partition_name = map[int32]string{
	0: "BLOCK",
	1: "FILE",
	2: "REPO",
}
var Partition_value = map[string]int32{
	"BLOCK": 0,
	"FILE":  1,
	"REPO":  2,
}

func (x Partition) String() string {
	return proto.EnumName(Partition_name, int32(x))
}
func (Partition) EnumDescriptor() ([]byte, []int) { return fileDescriptorPps, []int{1} }

type Incremental int32

const (
	Incremental_NONE Incremental = 0
	Incremental_DIFF Incremental = 1
	Incremental_FULL Incremental = 2
)

var Incremental_name = map[int32]string{
	0: "NONE",
	1: "DIFF",
	2: "FULL",
}
var Incremental_value = map[string]int32{
	"NONE": 0,
	"DIFF": 1,
	"FULL": 2,
}

func (x Incremental) String() string {
	return proto.EnumName(Incremental_name, int32(x))
}
func (Incremental) EnumDescriptor() ([]byte, []int) { return fileDescriptorPps, []int{2} }

type ChunkState int32

const (
	ChunkState_CHUNK_UNASSIGNED ChunkState = 0
	ChunkState_CHUNK_ASSIGNED   ChunkState = 1
	ChunkState_CHUNK_SUCCESS    ChunkState = 2
	ChunkState_CHUNK_FAILURE    ChunkState = 3
)

var ChunkState_name = map[int32]string{
	0: "CHUNK_UNASSIGNED",
	1: "CHUNK_ASSIGNED",
	2: "CHUNK_SUCCESS",
	3: "CHUNK_FAILURE",
}
var ChunkState_value = map[string]int32{
	"CHUNK_UNASSIGNED": 0,
	"CHUNK_ASSIGNED":   1,
	"CHUNK_SUCCESS":    2,
	"CHUNK_FAILURE":    3,
}

func (x ChunkState) String() string {
	return proto.EnumName(ChunkState_name, int32(x))
}
func (ChunkState) EnumDescriptor() ([]byte, []int) { return fileDescriptorPps, []int{3} }

type PodState int32

const (
	PodState_POD_RUNNING PodState = 0
	PodState_POD_SUCCESS PodState = 1
	PodState_POD_FAILED  PodState = 2
)

var PodState_name = map[int32]string{
	0: "POD_RUNNING",
	1: "POD_SUCCESS",
	2: "POD_FAILED",
}
var PodState_value = map[string]int32{
	"POD_RUNNING": 0,
	"POD_SUCCESS": 1,
	"POD_FAILED":  2,
}

func (x PodState) String() string {
	return proto.EnumName(PodState_name, int32(x))
}
func (PodState) EnumDescriptor() ([]byte, []int) { return fileDescriptorPps, []int{4} }

type PipelineState int32

const (
	// When the pipeline is not ready to be triggered by commits.
	// This happens when either 1) a pipeline has been created but not yet picked
	// up by a PPS server, or 2) the pipeline does not have any inputs and is meant
	// to be triggered manually
	PipelineState_PIPELINE_IDLE PipelineState = 0
	// After this pipeline is picked up by a pachd node.  This is the normal
	// state of a pipeline.
	PipelineState_PIPELINE_RUNNING PipelineState = 1
	// After some error caused runPipeline to exit, but before the pipeline is
	// re-run.  This is when the exponential backoff is in effect.
	PipelineState_PIPELINE_RESTARTING PipelineState = 2
	// We have retried too many times and we have given up on this pipeline.
	PipelineState_PIPELINE_FAILURE PipelineState = 3
	// The pipeline has been explicitly stopped by the user.
	PipelineState_PIPELINE_STOPPED PipelineState = 4
)

var PipelineState_name = map[int32]string{
	0: "PIPELINE_IDLE",
	1: "PIPELINE_RUNNING",
	2: "PIPELINE_RESTARTING",
	3: "PIPELINE_FAILURE",
	4: "PIPELINE_STOPPED",
}
var PipelineState_value = map[string]int32{
	"PIPELINE_IDLE":       0,
	"PIPELINE_RUNNING":    1,
	"PIPELINE_RESTARTING": 2,
	"PIPELINE_FAILURE":    3,
	"PIPELINE_STOPPED":    4,
}

func (x PipelineState) String() string {
	return proto.EnumName(PipelineState_name, int32(x))
}
func (PipelineState) EnumDescriptor() ([]byte, []int) { return fileDescriptorPps, []int{5} }

// Which Parallelism strategy to use. Depending on the value of
// 'strategy', other messages in the spec will or will not be set.
type ParallelismSpec_Strategy int32

const (
	ParallelismSpec_CONSTANT    ParallelismSpec_Strategy = 0
	ParallelismSpec_COEFFICIENT ParallelismSpec_Strategy = 1
)

var ParallelismSpec_Strategy_name = map[int32]string{
	0: "CONSTANT",
	1: "COEFFICIENT",
}
var ParallelismSpec_Strategy_value = map[string]int32{
	"CONSTANT":    0,
	"COEFFICIENT": 1,
}

func (x ParallelismSpec_Strategy) String() string {
	return proto.EnumName(ParallelismSpec_Strategy_name, int32(x))
}
func (ParallelismSpec_Strategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPps, []int{7, 0}
}

type Secret struct {
	// Name must be the name of the secret in kubernetes.
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MountPath string `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
}

func (m *Secret) Reset()                    { *m = Secret{} }
func (m *Secret) String() string            { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()               {}
func (*Secret) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{0} }

func (m *Secret) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Secret) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

type Transform struct {
	Image            string            `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Cmd              []string          `protobuf:"bytes,2,rep,name=cmd" json:"cmd,omitempty"`
	Env              map[string]string `protobuf:"bytes,3,rep,name=env" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Secrets          []*Secret         `protobuf:"bytes,4,rep,name=secrets" json:"secrets,omitempty"`
	ImagePullSecrets []string          `protobuf:"bytes,9,rep,name=image_pull_secrets,json=imagePullSecrets" json:"image_pull_secrets,omitempty"`
	Stdin            []string          `protobuf:"bytes,5,rep,name=stdin" json:"stdin,omitempty"`
	AcceptReturnCode []int64           `protobuf:"varint,6,rep,packed,name=accept_return_code,json=acceptReturnCode" json:"accept_return_code,omitempty"`
	Debug            bool              `protobuf:"varint,7,opt,name=debug,proto3" json:"debug,omitempty"`
	// If set to true, writing to a file overwrites the original file, as opposed to
	// appending to it.
	Overwrite bool `protobuf:"varint,8,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
}

func (m *Transform) Reset()                    { *m = Transform{} }
func (m *Transform) String() string            { return proto.CompactTextString(m) }
func (*Transform) ProtoMessage()               {}
func (*Transform) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{1} }

func (m *Transform) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Transform) GetCmd() []string {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *Transform) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Transform) GetSecrets() []*Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *Transform) GetImagePullSecrets() []string {
	if m != nil {
		return m.ImagePullSecrets
	}
	return nil
}

func (m *Transform) GetStdin() []string {
	if m != nil {
		return m.Stdin
	}
	return nil
}

func (m *Transform) GetAcceptReturnCode() []int64 {
	if m != nil {
		return m.AcceptReturnCode
	}
	return nil
}

func (m *Transform) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

func (m *Transform) GetOverwrite() bool {
	if m != nil {
		return m.Overwrite
	}
	return false
}

type Output struct {
	URL string `protobuf:"bytes,1,opt,name=URL,json=uRL,proto3" json:"URL,omitempty"`
}

func (m *Output) Reset()                    { *m = Output{} }
func (m *Output) String() string            { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()               {}
func (*Output) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{2} }

func (m *Output) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

type Job struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{3} }

func (m *Job) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Service struct {
	InternalPort int32 `protobuf:"varint,1,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort int32 `protobuf:"varint,2,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{4} }

func (m *Service) GetInternalPort() int32 {
	if m != nil {
		return m.InternalPort
	}
	return 0
}

func (m *Service) GetExternalPort() int32 {
	if m != nil {
		return m.ExternalPort
	}
	return 0
}

type Method struct {
	Partition   Partition   `protobuf:"varint,1,opt,name=partition,proto3,enum=pps.Partition" json:"partition,omitempty"`
	Incremental Incremental `protobuf:"varint,2,opt,name=incremental,proto3,enum=pps.Incremental" json:"incremental,omitempty"`
}

func (m *Method) Reset()                    { *m = Method{} }
func (m *Method) String() string            { return proto.CompactTextString(m) }
func (*Method) ProtoMessage()               {}
func (*Method) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{5} }

func (m *Method) GetPartition() Partition {
	if m != nil {
		return m.Partition
	}
	return Partition_BLOCK
}

func (m *Method) GetIncremental() Incremental {
	if m != nil {
		return m.Incremental
	}
	return Incremental_NONE
}

type JobInput struct {
	Commit *pfs.Commit `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
	Method *Method     `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	// This flag specifies whether the pipeline should be triggered
	// when this input gets an empty commit.
	RunEmpty bool `protobuf:"varint,3,opt,name=run_empty,json=runEmpty,proto3" json:"run_empty,omitempty"`
	Lazy     bool `protobuf:"varint,4,opt,name=lazy,proto3" json:"lazy,omitempty"`
}

func (m *JobInput) Reset()                    { *m = JobInput{} }
func (m *JobInput) String() string            { return proto.CompactTextString(m) }
func (*JobInput) ProtoMessage()               {}
func (*JobInput) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{6} }

func (m *JobInput) GetCommit() *pfs.Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *JobInput) GetMethod() *Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *JobInput) GetRunEmpty() bool {
	if m != nil {
		return m.RunEmpty
	}
	return false
}

func (m *JobInput) GetLazy() bool {
	if m != nil {
		return m.Lazy
	}
	return false
}

type ParallelismSpec struct {
	Strategy ParallelismSpec_Strategy `protobuf:"varint,1,opt,name=strategy,proto3,enum=pps.ParallelismSpec_Strategy" json:"strategy,omitempty"`
	// If 'strategy' is set to CONSTANT, then the field 'constant' is used.
	//
	// Starts the pipeline/job with a 'constant' workers, unless 'constant' is
	// zero. If 'constant' is zero (which is the zero value of ParallelismSpec),
	// then Pachyderm will choose the number of workers that is started,
	// (currently it chooses the number of workers in the cluster)
	Constant uint64 `protobuf:"varint,2,opt,name=constant,proto3" json:"constant,omitempty"`
	// If 'strategy' is set to COEFFICIENT, then the field 'coefficient' is used.
	//
	// Starts the pipeline/job with number of workers equal to 'coefficient' * N,
	// where N is the number of nodes in the kubernetes cluster.
	//
	// For example, if each Kubernetes node has four CPUs, you might set
	// 'coefficient' to four, so that there are four Pachyderm workers per
	// Kubernetes node, and each Pachyderm worker gets one CPU. If you want to
	// reserve half the nodes in your cluster for other tasks, you might set
	// 'coefficient' to 0.5.
	Coefficient float64 `protobuf:"fixed64,3,opt,name=coefficient,proto3" json:"coefficient,omitempty"`
}

func (m *ParallelismSpec) Reset()                    { *m = ParallelismSpec{} }
func (m *ParallelismSpec) String() string            { return proto.CompactTextString(m) }
func (*ParallelismSpec) ProtoMessage()               {}
func (*ParallelismSpec) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{7} }

func (m *ParallelismSpec) GetStrategy() ParallelismSpec_Strategy {
	if m != nil {
		return m.Strategy
	}
	return ParallelismSpec_CONSTANT
}

func (m *ParallelismSpec) GetConstant() uint64 {
	if m != nil {
		return m.Constant
	}
	return 0
}

func (m *ParallelismSpec) GetCoefficient() float64 {
	if m != nil {
		return m.Coefficient
	}
	return 0
}

type JobInfo struct {
	Job             *Job                        `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	Transform       *Transform                  `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	Pipeline        *Pipeline                   `protobuf:"bytes,3,opt,name=pipeline" json:"pipeline,omitempty"`
	PipelineVersion uint64                      `protobuf:"varint,13,opt,name=pipeline_version,json=pipelineVersion,proto3" json:"pipeline_version,omitempty"`
	ParallelismSpec *ParallelismSpec            `protobuf:"bytes,12,opt,name=parallelism_spec,json=parallelismSpec" json:"parallelism_spec,omitempty"`
	Inputs          []*JobInput                 `protobuf:"bytes,5,rep,name=inputs" json:"inputs,omitempty"`
	Output          *Output                     `protobuf:"bytes,15,opt,name=output" json:"output,omitempty"`
	ParentJob       *Job                        `protobuf:"bytes,6,opt,name=parent_job,json=parentJob" json:"parent_job,omitempty"`
	Started         *google_protobuf1.Timestamp `protobuf:"bytes,7,opt,name=started" json:"started,omitempty"`
	Finished        *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=finished" json:"finished,omitempty"`
	OutputCommit    *pfs.Commit                 `protobuf:"bytes,9,opt,name=output_commit,json=outputCommit" json:"output_commit,omitempty"`
	State           JobState                    `protobuf:"varint,10,opt,name=state,proto3,enum=pps.JobState" json:"state,omitempty"`
	Chunks          []*Chunk                    `protobuf:"bytes,11,rep,name=chunks" json:"chunks,omitempty"`
	Service         *Service                    `protobuf:"bytes,14,opt,name=service" json:"service,omitempty"`
}

func (m *JobInfo) Reset()                    { *m = JobInfo{} }
func (m *JobInfo) String() string            { return proto.CompactTextString(m) }
func (*JobInfo) ProtoMessage()               {}
func (*JobInfo) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{8} }

func (m *JobInfo) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *JobInfo) GetTransform() *Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *JobInfo) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *JobInfo) GetPipelineVersion() uint64 {
	if m != nil {
		return m.PipelineVersion
	}
	return 0
}

func (m *JobInfo) GetParallelismSpec() *ParallelismSpec {
	if m != nil {
		return m.ParallelismSpec
	}
	return nil
}

func (m *JobInfo) GetInputs() []*JobInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *JobInfo) GetOutput() *Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *JobInfo) GetParentJob() *Job {
	if m != nil {
		return m.ParentJob
	}
	return nil
}

func (m *JobInfo) GetStarted() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *JobInfo) GetFinished() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Finished
	}
	return nil
}

func (m *JobInfo) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

func (m *JobInfo) GetState() JobState {
	if m != nil {
		return m.State
	}
	return JobState_JOB_CREATING
}

func (m *JobInfo) GetChunks() []*Chunk {
	if m != nil {
		return m.Chunks
	}
	return nil
}

func (m *JobInfo) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

type Chunk struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A series of pods, in chronological order, that have processed this shard
	Pods  []*Pod     `protobuf:"bytes,2,rep,name=pods" json:"pods,omitempty"`
	State ChunkState `protobuf:"varint,3,opt,name=state,proto3,enum=pps.ChunkState" json:"state,omitempty"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{9} }

func (m *Chunk) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Chunk) GetPods() []*Pod {
	if m != nil {
		return m.Pods
	}
	return nil
}

func (m *Chunk) GetState() ChunkState {
	if m != nil {
		return m.State
	}
	return ChunkState_CHUNK_UNASSIGNED
}

type Pod struct {
	Name         string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OutputCommit *pfs.Commit `protobuf:"bytes,2,opt,name=output_commit,json=outputCommit" json:"output_commit,omitempty"`
	State        PodState    `protobuf:"varint,3,opt,name=state,proto3,enum=pps.PodState" json:"state,omitempty"`
}

func (m *Pod) Reset()                    { *m = Pod{} }
func (m *Pod) String() string            { return proto.CompactTextString(m) }
func (*Pod) ProtoMessage()               {}
func (*Pod) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{10} }

func (m *Pod) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pod) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

func (m *Pod) GetState() PodState {
	if m != nil {
		return m.State
	}
	return PodState_POD_RUNNING
}

type JobInfos struct {
	JobInfo []*JobInfo `protobuf:"bytes,1,rep,name=job_info,json=jobInfo" json:"job_info,omitempty"`
}

func (m *JobInfos) Reset()                    { *m = JobInfos{} }
func (m *JobInfos) String() string            { return proto.CompactTextString(m) }
func (*JobInfos) ProtoMessage()               {}
func (*JobInfos) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{11} }

func (m *JobInfos) GetJobInfo() []*JobInfo {
	if m != nil {
		return m.JobInfo
	}
	return nil
}

type Pipeline struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Pipeline) Reset()                    { *m = Pipeline{} }
func (m *Pipeline) String() string            { return proto.CompactTextString(m) }
func (*Pipeline) ProtoMessage()               {}
func (*Pipeline) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{12} }

func (m *Pipeline) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PipelineInput struct {
	Repo   *pfs.Repo `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Method *Method   `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	// This flag specifies whether the pipeline should be triggered
	// when this input gets an empty commit.
	RunEmpty bool `protobuf:"varint,3,opt,name=run_empty,json=runEmpty,proto3" json:"run_empty,omitempty"`
	Lazy     bool `protobuf:"varint,4,opt,name=lazy,proto3" json:"lazy,omitempty"`
}

func (m *PipelineInput) Reset()                    { *m = PipelineInput{} }
func (m *PipelineInput) String() string            { return proto.CompactTextString(m) }
func (*PipelineInput) ProtoMessage()               {}
func (*PipelineInput) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{13} }

func (m *PipelineInput) GetRepo() *pfs.Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *PipelineInput) GetMethod() *Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *PipelineInput) GetRunEmpty() bool {
	if m != nil {
		return m.RunEmpty
	}
	return false
}

func (m *PipelineInput) GetLazy() bool {
	if m != nil {
		return m.Lazy
	}
	return false
}

// GCPolicy describes when jobs can be garbage-collected.
type GCPolicy struct {
	// The amount of time that needs to pass before a successful job
	// can be GC-ed.
	Success *google_protobuf2.Duration `protobuf:"bytes,1,opt,name=success" json:"success,omitempty"`
	// The amount of time that needs to pass before a failed job
	// can be GC-ed.
	Failure *google_protobuf2.Duration `protobuf:"bytes,2,opt,name=failure" json:"failure,omitempty"`
}

func (m *GCPolicy) Reset()                    { *m = GCPolicy{} }
func (m *GCPolicy) String() string            { return proto.CompactTextString(m) }
func (*GCPolicy) ProtoMessage()               {}
func (*GCPolicy) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{14} }

func (m *GCPolicy) GetSuccess() *google_protobuf2.Duration {
	if m != nil {
		return m.Success
	}
	return nil
}

func (m *GCPolicy) GetFailure() *google_protobuf2.Duration {
	if m != nil {
		return m.Failure
	}
	return nil
}

type PipelineInfo struct {
	Pipeline        *Pipeline                   `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
	Version         uint64                      `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
	Transform       *Transform                  `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	ParallelismSpec *ParallelismSpec            `protobuf:"bytes,10,opt,name=parallelism_spec,json=parallelismSpec" json:"parallelism_spec,omitempty"`
	Inputs          []*PipelineInput            `protobuf:"bytes,4,rep,name=inputs" json:"inputs,omitempty"`
	Output          *Output                     `protobuf:"bytes,15,opt,name=output" json:"output,omitempty"`
	OutputRepo      *pfs.Repo                   `protobuf:"bytes,5,opt,name=output_repo,json=outputRepo" json:"output_repo,omitempty"`
	CreatedAt       *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	State           PipelineState               `protobuf:"varint,7,opt,name=state,proto3,enum=pps.PipelineState" json:"state,omitempty"`
	RecentError     string                      `protobuf:"bytes,8,opt,name=recent_error,json=recentError,proto3" json:"recent_error,omitempty"`
	JobCounts       map[int32]int32             `protobuf:"bytes,9,rep,name=job_counts,json=jobCounts" json:"job_counts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GcPolicy        *GCPolicy                   `protobuf:"bytes,12,opt,name=gc_policy,json=gcPolicy" json:"gc_policy,omitempty"`
}

func (m *PipelineInfo) Reset()                    { *m = PipelineInfo{} }
func (m *PipelineInfo) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfo) ProtoMessage()               {}
func (*PipelineInfo) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{15} }

func (m *PipelineInfo) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *PipelineInfo) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PipelineInfo) GetTransform() *Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *PipelineInfo) GetParallelismSpec() *ParallelismSpec {
	if m != nil {
		return m.ParallelismSpec
	}
	return nil
}

func (m *PipelineInfo) GetInputs() []*PipelineInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *PipelineInfo) GetOutput() *Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *PipelineInfo) GetOutputRepo() *pfs.Repo {
	if m != nil {
		return m.OutputRepo
	}
	return nil
}

func (m *PipelineInfo) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PipelineInfo) GetState() PipelineState {
	if m != nil {
		return m.State
	}
	return PipelineState_PIPELINE_IDLE
}

func (m *PipelineInfo) GetRecentError() string {
	if m != nil {
		return m.RecentError
	}
	return ""
}

func (m *PipelineInfo) GetJobCounts() map[int32]int32 {
	if m != nil {
		return m.JobCounts
	}
	return nil
}

func (m *PipelineInfo) GetGcPolicy() *GCPolicy {
	if m != nil {
		return m.GcPolicy
	}
	return nil
}

type PipelineInfos struct {
	PipelineInfo []*PipelineInfo `protobuf:"bytes,1,rep,name=pipeline_info,json=pipelineInfo" json:"pipeline_info,omitempty"`
}

func (m *PipelineInfos) Reset()                    { *m = PipelineInfos{} }
func (m *PipelineInfos) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfos) ProtoMessage()               {}
func (*PipelineInfos) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{16} }

func (m *PipelineInfos) GetPipelineInfo() []*PipelineInfo {
	if m != nil {
		return m.PipelineInfo
	}
	return nil
}

type CreateJobRequest struct {
	Transform       *Transform       `protobuf:"bytes,1,opt,name=transform" json:"transform,omitempty"`
	Pipeline        *Pipeline        `protobuf:"bytes,2,opt,name=pipeline" json:"pipeline,omitempty"`
	ParallelismSpec *ParallelismSpec `protobuf:"bytes,7,opt,name=parallelism_spec,json=parallelismSpec" json:"parallelism_spec,omitempty"`
	Inputs          []*JobInput      `protobuf:"bytes,4,rep,name=inputs" json:"inputs,omitempty"`
	Output          *Output          `protobuf:"bytes,9,opt,name=output" json:"output,omitempty"`
	ParentJob       *Job             `protobuf:"bytes,5,opt,name=parent_job,json=parentJob" json:"parent_job,omitempty"`
	Force           bool             `protobuf:"varint,6,opt,name=force,proto3" json:"force,omitempty"`
	// When service is defined, we create a long running job
	// by using a k8s RC and Service instead of a k8s Job
	Service *Service `protobuf:"bytes,8,opt,name=service" json:"service,omitempty"`
}

func (m *CreateJobRequest) Reset()                    { *m = CreateJobRequest{} }
func (m *CreateJobRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateJobRequest) ProtoMessage()               {}
func (*CreateJobRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{17} }

func (m *CreateJobRequest) GetTransform() *Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *CreateJobRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *CreateJobRequest) GetParallelismSpec() *ParallelismSpec {
	if m != nil {
		return m.ParallelismSpec
	}
	return nil
}

func (m *CreateJobRequest) GetInputs() []*JobInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *CreateJobRequest) GetOutput() *Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *CreateJobRequest) GetParentJob() *Job {
	if m != nil {
		return m.ParentJob
	}
	return nil
}

func (m *CreateJobRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *CreateJobRequest) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

type InspectJobRequest struct {
	Job        *Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	BlockState bool `protobuf:"varint,2,opt,name=block_state,json=blockState,proto3" json:"block_state,omitempty"`
}

func (m *InspectJobRequest) Reset()                    { *m = InspectJobRequest{} }
func (m *InspectJobRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectJobRequest) ProtoMessage()               {}
func (*InspectJobRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{18} }

func (m *InspectJobRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *InspectJobRequest) GetBlockState() bool {
	if m != nil {
		return m.BlockState
	}
	return false
}

type ListJobRequest struct {
	Pipeline    *Pipeline     `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
	InputCommit []*pfs.Commit `protobuf:"bytes,2,rep,name=input_commit,json=inputCommit" json:"input_commit,omitempty"`
}

func (m *ListJobRequest) Reset()                    { *m = ListJobRequest{} }
func (m *ListJobRequest) String() string            { return proto.CompactTextString(m) }
func (*ListJobRequest) ProtoMessage()               {}
func (*ListJobRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{19} }

func (m *ListJobRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *ListJobRequest) GetInputCommit() []*pfs.Commit {
	if m != nil {
		return m.InputCommit
	}
	return nil
}

type DeleteJobRequest struct {
	Job *Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
}

func (m *DeleteJobRequest) Reset()                    { *m = DeleteJobRequest{} }
func (m *DeleteJobRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteJobRequest) ProtoMessage()               {}
func (*DeleteJobRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{20} }

func (m *DeleteJobRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type GetLogsRequest struct {
	Job *Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
}

func (m *GetLogsRequest) Reset()                    { *m = GetLogsRequest{} }
func (m *GetLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLogsRequest) ProtoMessage()               {}
func (*GetLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{21} }

func (m *GetLogsRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type CreatePipelineRequest struct {
	Pipeline        *Pipeline        `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
	Transform       *Transform       `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	ParallelismSpec *ParallelismSpec `protobuf:"bytes,7,opt,name=parallelism_spec,json=parallelismSpec" json:"parallelism_spec,omitempty"`
	Inputs          []*PipelineInput `protobuf:"bytes,4,rep,name=inputs" json:"inputs,omitempty"`
	Output          *Output          `protobuf:"bytes,9,opt,name=output" json:"output,omitempty"`
	Update          bool             `protobuf:"varint,5,opt,name=update,proto3" json:"update,omitempty"`
	NoArchive       bool             `protobuf:"varint,6,opt,name=no_archive,json=noArchive,proto3" json:"no_archive,omitempty"`
	GcPolicy        *GCPolicy        `protobuf:"bytes,8,opt,name=gc_policy,json=gcPolicy" json:"gc_policy,omitempty"`
}

func (m *CreatePipelineRequest) Reset()                    { *m = CreatePipelineRequest{} }
func (m *CreatePipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePipelineRequest) ProtoMessage()               {}
func (*CreatePipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{22} }

func (m *CreatePipelineRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *CreatePipelineRequest) GetTransform() *Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *CreatePipelineRequest) GetParallelismSpec() *ParallelismSpec {
	if m != nil {
		return m.ParallelismSpec
	}
	return nil
}

func (m *CreatePipelineRequest) GetInputs() []*PipelineInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *CreatePipelineRequest) GetOutput() *Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *CreatePipelineRequest) GetUpdate() bool {
	if m != nil {
		return m.Update
	}
	return false
}

func (m *CreatePipelineRequest) GetNoArchive() bool {
	if m != nil {
		return m.NoArchive
	}
	return false
}

func (m *CreatePipelineRequest) GetGcPolicy() *GCPolicy {
	if m != nil {
		return m.GcPolicy
	}
	return nil
}

type InspectPipelineRequest struct {
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
}

func (m *InspectPipelineRequest) Reset()                    { *m = InspectPipelineRequest{} }
func (m *InspectPipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectPipelineRequest) ProtoMessage()               {}
func (*InspectPipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{23} }

func (m *InspectPipelineRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

type ListPipelineRequest struct {
}

func (m *ListPipelineRequest) Reset()                    { *m = ListPipelineRequest{} }
func (m *ListPipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPipelineRequest) ProtoMessage()               {}
func (*ListPipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{24} }

type DeletePipelineRequest struct {
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
}

func (m *DeletePipelineRequest) Reset()                    { *m = DeletePipelineRequest{} }
func (m *DeletePipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*DeletePipelineRequest) ProtoMessage()               {}
func (*DeletePipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{25} }

func (m *DeletePipelineRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

type StartPipelineRequest struct {
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
}

func (m *StartPipelineRequest) Reset()                    { *m = StartPipelineRequest{} }
func (m *StartPipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*StartPipelineRequest) ProtoMessage()               {}
func (*StartPipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{26} }

func (m *StartPipelineRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

type StopPipelineRequest struct {
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
}

func (m *StopPipelineRequest) Reset()                    { *m = StopPipelineRequest{} }
func (m *StopPipelineRequest) String() string            { return proto.CompactTextString(m) }
func (*StopPipelineRequest) ProtoMessage()               {}
func (*StopPipelineRequest) Descriptor() ([]byte, []int) { return fileDescriptorPps, []int{27} }

func (m *StopPipelineRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func init() {
	proto.RegisterType((*Secret)(nil), "pps.Secret")
	proto.RegisterType((*Transform)(nil), "pps.Transform")
	proto.RegisterType((*Output)(nil), "pps.Output")
	proto.RegisterType((*Job)(nil), "pps.Job")
	proto.RegisterType((*Service)(nil), "pps.Service")
	proto.RegisterType((*Method)(nil), "pps.Method")
	proto.RegisterType((*JobInput)(nil), "pps.JobInput")
	proto.RegisterType((*ParallelismSpec)(nil), "pps.ParallelismSpec")
	proto.RegisterType((*JobInfo)(nil), "pps.JobInfo")
	proto.RegisterType((*Chunk)(nil), "pps.Chunk")
	proto.RegisterType((*Pod)(nil), "pps.Pod")
	proto.RegisterType((*JobInfos)(nil), "pps.JobInfos")
	proto.RegisterType((*Pipeline)(nil), "pps.Pipeline")
	proto.RegisterType((*PipelineInput)(nil), "pps.PipelineInput")
	proto.RegisterType((*GCPolicy)(nil), "pps.GCPolicy")
	proto.RegisterType((*PipelineInfo)(nil), "pps.PipelineInfo")
	proto.RegisterType((*PipelineInfos)(nil), "pps.PipelineInfos")
	proto.RegisterType((*CreateJobRequest)(nil), "pps.CreateJobRequest")
	proto.RegisterType((*InspectJobRequest)(nil), "pps.InspectJobRequest")
	proto.RegisterType((*ListJobRequest)(nil), "pps.ListJobRequest")
	proto.RegisterType((*DeleteJobRequest)(nil), "pps.DeleteJobRequest")
	proto.RegisterType((*GetLogsRequest)(nil), "pps.GetLogsRequest")
	proto.RegisterType((*CreatePipelineRequest)(nil), "pps.CreatePipelineRequest")
	proto.RegisterType((*InspectPipelineRequest)(nil), "pps.InspectPipelineRequest")
	proto.RegisterType((*ListPipelineRequest)(nil), "pps.ListPipelineRequest")
	proto.RegisterType((*DeletePipelineRequest)(nil), "pps.DeletePipelineRequest")
	proto.RegisterType((*StartPipelineRequest)(nil), "pps.StartPipelineRequest")
	proto.RegisterType((*StopPipelineRequest)(nil), "pps.StopPipelineRequest")
	proto.RegisterEnum("pps.JobState", JobState_name, JobState_value)
	proto.RegisterEnum("pps.Partition", Partition_name, Partition_value)
	proto.RegisterEnum("pps.Incremental", Incremental_name, Incremental_value)
	proto.RegisterEnum("pps.ChunkState", ChunkState_name, ChunkState_value)
	proto.RegisterEnum("pps.PodState", PodState_name, PodState_value)
	proto.RegisterEnum("pps.PipelineState", PipelineState_name, PipelineState_value)
	proto.RegisterEnum("pps.ParallelismSpec_Strategy", ParallelismSpec_Strategy_name, ParallelismSpec_Strategy_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error)
	InspectJob(ctx context.Context, in *InspectJobRequest, opts ...grpc.CallOption) (*JobInfo, error)
	ListJob(ctx context.Context, in *ListJobRequest, opts ...grpc.CallOption) (*JobInfos, error)
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (API_GetLogsClient, error)
	CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	InspectPipeline(ctx context.Context, in *InspectPipelineRequest, opts ...grpc.CallOption) (*PipelineInfo, error)
	ListPipeline(ctx context.Context, in *ListPipelineRequest, opts ...grpc.CallOption) (*PipelineInfos, error)
	DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	StartPipeline(ctx context.Context, in *StartPipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	StopPipeline(ctx context.Context, in *StopPipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/pps.API/CreateJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectJob(ctx context.Context, in *InspectJobRequest, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pps.API/InspectJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListJob(ctx context.Context, in *ListJobRequest, opts ...grpc.CallOption) (*JobInfos, error) {
	out := new(JobInfos)
	err := grpc.Invoke(ctx, "/pps.API/ListJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.API/DeleteJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (API_GetLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/pps.API/GetLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_GetLogsClient interface {
	Recv() (*google_protobuf3.BytesValue, error)
	grpc.ClientStream
}

type aPIGetLogsClient struct {
	grpc.ClientStream
}

func (x *aPIGetLogsClient) Recv() (*google_protobuf3.BytesValue, error) {
	m := new(google_protobuf3.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.API/CreatePipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectPipeline(ctx context.Context, in *InspectPipelineRequest, opts ...grpc.CallOption) (*PipelineInfo, error) {
	out := new(PipelineInfo)
	err := grpc.Invoke(ctx, "/pps.API/InspectPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListPipeline(ctx context.Context, in *ListPipelineRequest, opts ...grpc.CallOption) (*PipelineInfos, error) {
	out := new(PipelineInfos)
	err := grpc.Invoke(ctx, "/pps.API/ListPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.API/DeletePipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StartPipeline(ctx context.Context, in *StartPipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.API/StartPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StopPipeline(ctx context.Context, in *StopPipelineRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.API/StopPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteAll(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pps.API/DeleteAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	CreateJob(context.Context, *CreateJobRequest) (*Job, error)
	InspectJob(context.Context, *InspectJobRequest) (*JobInfo, error)
	ListJob(context.Context, *ListJobRequest) (*JobInfos, error)
	DeleteJob(context.Context, *DeleteJobRequest) (*google_protobuf.Empty, error)
	GetLogs(*GetLogsRequest, API_GetLogsServer) error
	CreatePipeline(context.Context, *CreatePipelineRequest) (*google_protobuf.Empty, error)
	InspectPipeline(context.Context, *InspectPipelineRequest) (*PipelineInfo, error)
	ListPipeline(context.Context, *ListPipelineRequest) (*PipelineInfos, error)
	DeletePipeline(context.Context, *DeletePipelineRequest) (*google_protobuf.Empty, error)
	StartPipeline(context.Context, *StartPipelineRequest) (*google_protobuf.Empty, error)
	StopPipeline(context.Context, *StopPipelineRequest) (*google_protobuf.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_InspectJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/InspectJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectJob(ctx, req.(*InspectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/ListJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListJob(ctx, req.(*ListJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).GetLogs(m, &aPIGetLogsServer{stream})
}

type API_GetLogsServer interface {
	Send(*google_protobuf3.BytesValue) error
	grpc.ServerStream
}

type aPIGetLogsServer struct {
	grpc.ServerStream
}

func (x *aPIGetLogsServer) Send(m *google_protobuf3.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _API_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/CreatePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreatePipeline(ctx, req.(*CreatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_InspectPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/InspectPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectPipeline(ctx, req.(*InspectPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/ListPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListPipeline(ctx, req.(*ListPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeletePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeletePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/DeletePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeletePipeline(ctx, req.(*DeletePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StartPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StartPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/StartPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StartPipeline(ctx, req.(*StartPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StopPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StopPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/StopPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StopPipeline(ctx, req.(*StopPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pps.API/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteAll(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pps.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _API_CreateJob_Handler,
		},
		{
			MethodName: "InspectJob",
			Handler:    _API_InspectJob_Handler,
		},
		{
			MethodName: "ListJob",
			Handler:    _API_ListJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _API_DeleteJob_Handler,
		},
		{
			MethodName: "CreatePipeline",
			Handler:    _API_CreatePipeline_Handler,
		},
		{
			MethodName: "InspectPipeline",
			Handler:    _API_InspectPipeline_Handler,
		},
		{
			MethodName: "ListPipeline",
			Handler:    _API_ListPipeline_Handler,
		},
		{
			MethodName: "DeletePipeline",
			Handler:    _API_DeletePipeline_Handler,
		},
		{
			MethodName: "StartPipeline",
			Handler:    _API_StartPipeline_Handler,
		},
		{
			MethodName: "StopPipeline",
			Handler:    _API_StopPipeline_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _API_DeleteAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogs",
			Handler:       _API_GetLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "client/pps/pps.proto",
}

func init() { proto.RegisterFile("client/pps/pps.proto", fileDescriptorPps) }

var fileDescriptorPps = []byte{
	// 2030 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x58, 0x5d, 0x6f, 0xdb, 0xc8,
	0xd5, 0x96, 0x44, 0x7d, 0x90, 0x47, 0x1f, 0x66, 0x26, 0x4e, 0x56, 0xab, 0x6c, 0x36, 0x7e, 0xb9,
	0xc8, 0xbb, 0x8e, 0x1a, 0x28, 0x0b, 0x67, 0x11, 0x74, 0xdb, 0xb4, 0xa9, 0x2c, 0xc9, 0xa9, 0xbc,
	0x5a, 0x49, 0x18, 0xc9, 0x0b, 0xb4, 0x28, 0x20, 0xd0, 0xd4, 0x48, 0x66, 0x42, 0x71, 0x58, 0x72,
	0xe4, 0xad, 0x0b, 0xf4, 0xae, 0xfd, 0x49, 0xfd, 0x3b, 0xbd, 0x68, 0xd1, 0xab, 0xde, 0x17, 0xed,
	0x5d, 0x31, 0x33, 0x1c, 0x89, 0x92, 0x1d, 0x21, 0x4e, 0xb0, 0x17, 0x06, 0x38, 0xcf, 0x79, 0xe6,
	0xf0, 0xcc, 0xe1, 0x39, 0xcf, 0x1c, 0x19, 0xf6, 0x1d, 0xcf, 0x25, 0x3e, 0x7b, 0x16, 0x04, 0x11,
	0xff, 0x6b, 0x04, 0x21, 0x65, 0x14, 0x69, 0x41, 0x10, 0xd5, 0x1e, 0xcc, 0x29, 0x9d, 0x7b, 0xe4,
	0x99, 0x80, 0xce, 0x97, 0xb3, 0x67, 0x64, 0x11, 0xb0, 0x2b, 0xc9, 0xa8, 0x3d, 0xda, 0x36, 0x32,
	0x77, 0x41, 0x22, 0x66, 0x2f, 0x82, 0x98, 0xf0, 0xf9, 0x36, 0x61, 0xba, 0x0c, 0x6d, 0xe6, 0x52,
	0xff, 0x5d, 0xf6, 0x1f, 0x42, 0x3b, 0x08, 0x48, 0x18, 0x87, 0x50, 0xdb, 0x9f, 0xd3, 0x39, 0x15,
	0x8f, 0xcf, 0xf8, 0x93, 0x42, 0x55, 0xb8, 0xb3, 0x88, 0xff, 0x49, 0xd4, 0xfa, 0x39, 0xe4, 0x47,
	0xc4, 0x09, 0x09, 0x43, 0x08, 0xb2, 0xbe, 0xbd, 0x20, 0xd5, 0xf4, 0x41, 0xfa, 0xd0, 0xc0, 0xe2,
	0x19, 0x3d, 0x04, 0x58, 0xd0, 0xa5, 0xcf, 0x26, 0x81, 0xcd, 0x2e, 0xaa, 0x19, 0x61, 0x31, 0x04,
	0x32, 0xb4, 0xd9, 0x85, 0xf5, 0x8f, 0x0c, 0x18, 0xe3, 0xd0, 0xf6, 0xa3, 0x19, 0x0d, 0x17, 0x68,
	0x1f, 0x72, 0xee, 0xc2, 0x9e, 0x2b, 0x0f, 0x72, 0x81, 0x4c, 0xd0, 0x9c, 0xc5, 0xb4, 0x9a, 0x39,
	0xd0, 0x0e, 0x0d, 0xcc, 0x1f, 0xd1, 0x13, 0xd0, 0x88, 0x7f, 0x59, 0xd5, 0x0e, 0xb4, 0xc3, 0xe2,
	0xd1, 0x27, 0x0d, 0x9e, 0xba, 0x95, 0x93, 0x46, 0xc7, 0xbf, 0xec, 0xf8, 0x2c, 0xbc, 0xc2, 0x9c,
	0x83, 0x1e, 0x43, 0x21, 0x12, 0xd1, 0x45, 0xd5, 0xac, 0xa0, 0x17, 0x05, 0x5d, 0x46, 0x8c, 0x95,
	0x0d, 0x3d, 0x05, 0x24, 0x5e, 0x36, 0x09, 0x96, 0x9e, 0x37, 0x51, 0x3b, 0x0c, 0xf1, 0x4a, 0x53,
	0x58, 0x86, 0x4b, 0xcf, 0x1b, 0xc5, 0xec, 0x7d, 0xc8, 0x45, 0x6c, 0xea, 0xfa, 0xd5, 0x9c, 0x20,
	0xc8, 0x05, 0xf7, 0x61, 0x3b, 0x0e, 0x09, 0xd8, 0x24, 0x24, 0x6c, 0x19, 0xfa, 0x13, 0x87, 0x4e,
	0x49, 0x35, 0x7f, 0xa0, 0x1d, 0x6a, 0xd8, 0x94, 0x16, 0x2c, 0x0c, 0x2d, 0x3a, 0x25, 0xdc, 0xc7,
	0x94, 0x9c, 0x2f, 0xe7, 0xd5, 0xc2, 0x41, 0xfa, 0x50, 0xc7, 0x72, 0x81, 0x3e, 0x03, 0x83, 0x5e,
	0x92, 0xf0, 0x87, 0xd0, 0x65, 0xa4, 0xaa, 0x0b, 0xcb, 0x1a, 0xa8, 0xbd, 0x00, 0x5d, 0x9d, 0x8e,
	0x67, 0xe5, 0x2d, 0xb9, 0x8a, 0x33, 0xc5, 0x1f, 0xb9, 0xc7, 0x4b, 0xdb, 0x5b, 0x92, 0x38, 0xcb,
	0x72, 0xf1, 0xb3, 0xcc, 0x4f, 0xd3, 0x56, 0x0d, 0xf2, 0x83, 0x25, 0x0b, 0x96, 0x8c, 0xef, 0x3a,
	0xc3, 0x3d, 0xb5, 0x6b, 0x89, 0x7b, 0xd6, 0x43, 0xd0, 0x4e, 0xe9, 0x39, 0xba, 0x0f, 0x19, 0x77,
	0x2a, 0xf1, 0xe3, 0xfc, 0xdf, 0xff, 0xf6, 0x28, 0xd3, 0x6d, 0xe3, 0x8c, 0x3b, 0xb5, 0x46, 0x50,
	0x18, 0x91, 0xf0, 0xd2, 0x75, 0x08, 0xfa, 0x02, 0xca, 0xae, 0xcf, 0x48, 0xe8, 0xdb, 0xde, 0x24,
	0xa0, 0x21, 0x13, 0xec, 0x1c, 0x2e, 0x29, 0x70, 0x48, 0x43, 0xc6, 0x49, 0xe4, 0x0f, 0x49, 0x52,
	0x46, 0x92, 0x14, 0xc8, 0x49, 0xd6, 0x1b, 0xc8, 0x7f, 0x47, 0xd8, 0x05, 0x9d, 0xa2, 0xa7, 0x60,
	0x04, 0x76, 0xc8, 0x5c, 0x5e, 0x9b, 0xc2, 0x5f, 0xe5, 0xa8, 0x22, 0x3e, 0xd0, 0x50, 0xa1, 0x78,
	0x4d, 0x40, 0x47, 0x50, 0x74, 0x7d, 0x27, 0x24, 0x0b, 0xe2, 0x33, 0xdb, 0x13, 0xae, 0x2b, 0x47,
	0xa6, 0xe0, 0x77, 0xd7, 0x38, 0x4e, 0x92, 0xac, 0xbf, 0xa4, 0x41, 0x3f, 0xa5, 0xe7, 0x5d, 0x9f,
	0x1f, 0xff, 0x0b, 0xc8, 0x3b, 0x74, 0xb1, 0x70, 0x65, 0xec, 0xa2, 0x18, 0x66, 0x51, 0xa3, 0x25,
	0x20, 0x1c, 0x9b, 0x38, 0x69, 0x21, 0xa2, 0x13, 0x2f, 0x50, 0x15, 0x23, 0x03, 0xc6, 0xb1, 0x09,
	0x3d, 0x00, 0x23, 0x5c, 0xfa, 0x13, 0xd1, 0x95, 0x55, 0x4d, 0x7c, 0x28, 0x3d, 0x5c, 0xfa, 0x1d,
	0xbe, 0xe6, 0x8d, 0xe0, 0xd9, 0x7f, 0xbc, 0xaa, 0x66, 0x05, 0x2e, 0x9e, 0xad, 0xbf, 0xa6, 0x61,
	0x6f, 0x68, 0x87, 0xb6, 0xe7, 0x11, 0xcf, 0x8d, 0x16, 0xa3, 0x80, 0x38, 0xe8, 0x1b, 0xd0, 0x23,
	0x16, 0xda, 0x8c, 0xcc, 0xaf, 0xe2, 0xc3, 0x3f, 0x54, 0x87, 0x4f, 0xf2, 0x1a, 0xa3, 0x98, 0x84,
	0x57, 0x74, 0x54, 0x03, 0xdd, 0xa1, 0x7e, 0xc4, 0x6c, 0x5f, 0xa6, 0x38, 0x8b, 0x57, 0x6b, 0x74,
	0x00, 0x45, 0x87, 0x92, 0xd9, 0xcc, 0x75, 0x78, 0xbb, 0x8a, 0xe8, 0xd2, 0x38, 0x09, 0x59, 0x4f,
	0x40, 0x57, 0x3e, 0x51, 0x09, 0xf4, 0xd6, 0xa0, 0x3f, 0x1a, 0x37, 0xfb, 0x63, 0x33, 0x85, 0xf6,
	0xa0, 0xd8, 0x1a, 0x74, 0x4e, 0x4e, 0xba, 0xad, 0x6e, 0xa7, 0x3f, 0x36, 0xd3, 0xd6, 0xbf, 0xb3,
	0x50, 0x10, 0xf9, 0x9b, 0x51, 0x54, 0x03, 0xed, 0x0d, 0x3d, 0x8f, 0x73, 0xa7, 0x8b, 0x50, 0x4f,
	0xe9, 0x39, 0xe6, 0x20, 0xff, 0x92, 0x4c, 0xf5, 0x60, 0x9c, 0xb8, 0xca, 0x66, 0x67, 0xe2, 0x35,
	0x01, 0x3d, 0x01, 0x3d, 0x70, 0x03, 0xe2, 0xb9, 0x3e, 0x11, 0xf1, 0x15, 0x8f, 0xca, 0xf2, 0xe4,
	0x31, 0x88, 0x57, 0x66, 0xf4, 0x04, 0x4c, 0xf5, 0x3c, 0xb9, 0x24, 0x61, 0xc4, 0x2b, 0xa5, 0x2c,
	0x4e, 0xbc, 0xa7, 0xf0, 0xef, 0x25, 0x8c, 0x5e, 0x81, 0x19, 0xac, 0x53, 0x37, 0x89, 0x02, 0xe2,
	0x54, 0x4b, 0xc2, 0xfb, 0xfe, 0x4d, 0x79, 0xc5, 0x7b, 0xc1, 0xd6, 0x07, 0x79, 0x0c, 0x79, 0x97,
	0x17, 0x4a, 0x24, 0x3a, 0x5b, 0x05, 0xa5, 0xca, 0x07, 0xc7, 0x46, 0x5e, 0x21, 0x54, 0xf4, 0x53,
	0x75, 0x2f, 0x51, 0x21, 0xb2, 0xc5, 0x70, 0x6c, 0x42, 0x5f, 0x02, 0x04, 0x76, 0x48, 0x7c, 0x36,
	0xe1, 0x39, 0xcb, 0x6f, 0xe5, 0xcc, 0x90, 0x36, 0xde, 0x7a, 0x5f, 0x43, 0x21, 0x62, 0x76, 0xc8,
	0xc8, 0x54, 0x68, 0x41, 0xf1, 0xa8, 0xd6, 0x90, 0xf2, 0xdc, 0x50, 0xf2, 0xdc, 0x18, 0x2b, 0x7d,
	0xc7, 0x8a, 0x8a, 0x5e, 0x80, 0x3e, 0x73, 0x7d, 0x37, 0xba, 0x20, 0x53, 0x21, 0x14, 0xbb, 0xb7,
	0xad, 0xb8, 0xe8, 0x2b, 0x28, 0xcb, 0x00, 0x27, 0x71, 0x27, 0x18, 0xd7, 0x3b, 0xa1, 0x24, 0x19,
	0x2d, 0xd5, 0x0f, 0xb9, 0x88, 0xd9, 0x8c, 0x54, 0x41, 0x94, 0xe8, 0x2a, 0x27, 0x23, 0x0e, 0x62,
	0x69, 0x43, 0x16, 0xe4, 0x9d, 0x8b, 0xa5, 0xff, 0x36, 0xaa, 0x16, 0x45, 0xe6, 0x40, 0xb0, 0x5a,
	0x1c, 0xc2, 0xb1, 0x05, 0xfd, 0x3f, 0xd7, 0x62, 0xa1, 0x25, 0xd5, 0x8a, 0x78, 0x69, 0x29, 0xd6,
	0x62, 0x81, 0x61, 0x65, 0x3c, 0xcd, 0xea, 0x59, 0x33, 0x67, 0x4d, 0x21, 0x27, 0xb6, 0xbf, 0x4b,
	0x9a, 0xd0, 0x67, 0x90, 0x0d, 0xe8, 0x34, 0x12, 0x17, 0x83, 0x4a, 0xed, 0x90, 0x4e, 0xb1, 0x40,
	0xd1, 0x63, 0x15, 0xb5, 0x26, 0xa2, 0xde, 0x5b, 0xc7, 0x93, 0x8c, 0xdb, 0x0a, 0x40, 0x1b, 0xd2,
	0xe9, 0x8d, 0x57, 0xd7, 0xb5, 0x4c, 0x65, 0xde, 0x3b, 0x53, 0x5a, 0x22, 0x53, 0x43, 0x3a, 0xdd,
	0x78, 0xe3, 0xf3, 0x58, 0x8f, 0x66, 0x34, 0x42, 0x5f, 0x82, 0xfe, 0x86, 0x9e, 0x4f, 0x5c, 0x7f,
	0x46, 0xab, 0x69, 0x71, 0x8c, 0xd2, 0xba, 0xe2, 0x66, 0x14, 0x17, 0xde, 0xc8, 0x07, 0xeb, 0x73,
	0xd0, 0x55, 0x6b, 0xdc, 0x14, 0xab, 0xf5, 0xe7, 0x34, 0x94, 0x15, 0x41, 0x4a, 0xdd, 0x43, 0xc8,
	0x86, 0x24, 0xa0, 0x71, 0xb3, 0x1a, 0x22, 0x68, 0x4c, 0x02, 0x8a, 0x05, 0xfc, 0x23, 0x89, 0x1c,
	0x03, 0xfd, 0x75, 0x6b, 0x48, 0x3d, 0xd7, 0xb9, 0x42, 0xcf, 0xa1, 0x10, 0x2d, 0x1d, 0x87, 0x44,
	0x51, 0x1c, 0xc3, 0xa7, 0xd7, 0xea, 0xb3, 0x1d, 0x4f, 0x25, 0x58, 0x31, 0xf9, 0xa6, 0x99, 0xed,
	0x7a, 0xcb, 0x90, 0xc4, 0x71, 0xed, 0xda, 0x14, 0x33, 0xad, 0xff, 0x64, 0xa1, 0xb4, 0x3e, 0xfc,
	0x8c, 0x6e, 0xa8, 0x4b, 0x7a, 0xb7, 0xba, 0x54, 0xa1, 0xa0, 0x44, 0xa5, 0x28, 0x44, 0x45, 0x2d,
	0x6f, 0x29, 0x68, 0x37, 0x49, 0x0f, 0xdc, 0x46, 0x7a, 0xea, 0x2b, 0xe9, 0x91, 0x73, 0x0a, 0xda,
	0x88, 0xf8, 0x03, 0xf4, 0xa7, 0x0e, 0xc5, 0xb8, 0x7c, 0x45, 0x1d, 0xe4, 0xb6, 0xeb, 0x00, 0xa4,
	0x95, 0x3f, 0xa3, 0x6f, 0x00, 0x9c, 0x90, 0xd8, 0x8c, 0x4c, 0x27, 0x36, 0x8b, 0xb5, 0x6a, 0x97,
	0x9c, 0x18, 0x31, 0xbb, 0xc9, 0xd0, 0xa1, 0xaa, 0xf9, 0x82, 0xa8, 0xf9, 0xcd, 0xb0, 0x37, 0x24,
	0xe2, 0xff, 0xa0, 0x14, 0x12, 0x87, 0x0b, 0x22, 0x09, 0x43, 0x1a, 0x0a, 0xd5, 0x32, 0x70, 0x51,
	0x62, 0x1d, 0x0e, 0xa1, 0x57, 0x00, 0xbc, 0x1f, 0x1c, 0x3e, 0x1f, 0xca, 0xf1, 0xab, 0x78, 0x74,
	0xb0, 0x95, 0x88, 0x19, 0xe5, 0xed, 0xd1, 0x12, 0x14, 0x39, 0xe8, 0x19, 0x6f, 0xd4, 0x1a, 0xd5,
	0xc1, 0x98, 0x3b, 0x93, 0x40, 0x54, 0x60, 0x2c, 0xfd, 0xf2, 0xd3, 0xab, 0xb2, 0xc4, 0xfa, 0xdc,
	0x91, 0x4f, 0xb5, 0x97, 0x50, 0xd9, 0x74, 0x94, 0x9c, 0xa9, 0x72, 0x37, 0xcc, 0x54, 0xb9, 0xc4,
	0x4c, 0x75, 0x9a, 0xd5, 0x35, 0x33, 0x6b, 0xbd, 0x4e, 0xb6, 0x1d, 0xef, 0xe8, 0x17, 0x50, 0x5e,
	0xdd, 0x56, 0x89, 0xb6, 0xbe, 0x73, 0xed, 0x10, 0xb8, 0x14, 0x24, 0x56, 0xd6, 0x3f, 0x33, 0x60,
	0xb6, 0x44, 0x52, 0xf9, 0xed, 0x40, 0x7e, 0xbf, 0x24, 0x11, 0xdb, 0x2c, 0xc1, 0xf4, 0x6d, 0xee,
	0xd4, 0xcc, 0xee, 0xaa, 0xbf, 0xa9, 0x5a, 0x0b, 0x1f, 0x76, 0x51, 0x66, 0xdf, 0xef, 0xa2, 0x34,
	0xde, 0xf7, 0xa2, 0xcc, 0xbd, 0xfb, 0xa2, 0xdc, 0x87, 0xdc, 0x8c, 0x86, 0x0e, 0x11, 0x05, 0xaa,
	0x63, 0xb9, 0x48, 0xde, 0x2a, 0xfa, 0xee, 0x5b, 0x85, 0x7f, 0xb0, 0x21, 0xdc, 0xe9, 0xfa, 0xfc,
	0xbc, 0x2c, 0x91, 0xe7, 0x5d, 0x73, 0xcd, 0x23, 0x28, 0x9e, 0x7b, 0xd4, 0x79, 0x3b, 0x91, 0x55,
	0x9e, 0x11, 0xaf, 0x06, 0x01, 0x89, 0xea, 0xb6, 0xde, 0x42, 0xa5, 0xe7, 0x46, 0x49, 0x77, 0xb7,
	0x90, 0x9f, 0x06, 0x94, 0x44, 0xaa, 0xd6, 0x57, 0x8c, 0xb6, 0x7d, 0xc5, 0x14, 0x05, 0x41, 0x2e,
	0xac, 0x06, 0x98, 0x6d, 0xe2, 0x91, 0x8d, 0x2a, 0xd9, 0x11, 0xbd, 0xf5, 0x14, 0x2a, 0xaf, 0x09,
	0xeb, 0xd1, 0x79, 0xf4, 0x3e, 0xec, 0x7f, 0x65, 0xe0, 0x9e, 0x2c, 0xc2, 0x55, 0xa8, 0xb7, 0x3f,
	0xd2, 0xc7, 0xeb, 0x66, 0xe1, 0xc7, 0xd7, 0xcd, 0x1d, 0xe5, 0x78, 0x1f, 0xf2, 0xcb, 0x60, 0xca,
	0xbf, 0x75, 0x4e, 0x7c, 0xeb, 0x78, 0xc5, 0x7f, 0xc9, 0xfa, 0x74, 0x62, 0x87, 0xce, 0x85, 0x7b,
	0xa9, 0x4a, 0xd0, 0xf0, 0x69, 0x53, 0x02, 0x9b, 0xca, 0xa3, 0xef, 0x54, 0x9e, 0xb8, 0x14, 0x5b,
	0x70, 0x3f, 0x2e, 0xc5, 0x0f, 0xcf, 0xb6, 0x75, 0x0f, 0xee, 0xf2, 0xea, 0xdb, 0xf2, 0x60, 0x1d,
	0xc3, 0x3d, 0x59, 0x27, 0x1f, 0xe1, 0xba, 0x09, 0xfb, 0x23, 0x3e, 0x6c, 0x7e, 0x84, 0x8b, 0x5f,
	0xc1, 0xdd, 0x11, 0xa3, 0xc1, 0x87, 0x7b, 0xa8, 0x87, 0x62, 0x5a, 0x12, 0x9d, 0x86, 0x4c, 0x28,
	0x9d, 0x0e, 0x8e, 0x27, 0x2d, 0xdc, 0x69, 0x8e, 0xbb, 0xfd, 0xd7, 0xf2, 0xd7, 0x0a, 0x47, 0xf0,
	0x59, 0xbf, 0xcf, 0x81, 0xb4, 0x02, 0x4e, 0x9a, 0xdd, 0xde, 0x19, 0xee, 0x98, 0x19, 0x05, 0x8c,
	0xce, 0x5a, 0xad, 0xce, 0x68, 0x64, 0x6a, 0xa8, 0x0c, 0x06, 0x07, 0x3a, 0xdf, 0x0d, 0xc7, 0xbf,
	0x31, 0xb3, 0x08, 0x41, 0x85, 0x2f, 0x07, 0x67, 0xe3, 0xe1, 0xd9, 0x58, 0x78, 0xcd, 0xd5, 0xeb,
	0x60, 0xac, 0x7e, 0x7e, 0x22, 0x03, 0x72, 0xc7, 0xbd, 0x41, 0xeb, 0x5b, 0x33, 0x85, 0x74, 0xc8,
	0x9e, 0x74, 0x7b, 0x1d, 0x33, 0xcd, 0x9f, 0x70, 0x67, 0x38, 0x30, 0x33, 0xf5, 0x9f, 0x40, 0x31,
	0xf1, 0xd3, 0x93, 0x1b, 0xfa, 0x83, 0x7e, 0x47, 0x92, 0xdb, 0xdd, 0x93, 0x13, 0x49, 0x3e, 0x39,
	0xeb, 0xf5, 0xcc, 0x4c, 0xfd, 0x77, 0x00, 0xeb, 0x09, 0x14, 0xed, 0x83, 0xd9, 0xfa, 0xf5, 0x59,
	0xff, 0xdb, 0xc9, 0x59, 0xbf, 0x39, 0x1a, 0x75, 0x5f, 0xf7, 0x3b, 0x6d, 0x33, 0xc5, 0x03, 0x92,
	0xe8, 0x0a, 0x4b, 0xa3, 0x3b, 0x50, 0x96, 0x98, 0x3a, 0x46, 0x66, 0x0d, 0xa9, 0xa3, 0x6a, 0xf5,
	0x97, 0xa0, 0xab, 0x59, 0x93, 0x1f, 0x7b, 0x38, 0x68, 0xaf, 0x12, 0x93, 0x52, 0x80, 0x72, 0x90,
	0x46, 0x15, 0x00, 0x0e, 0xf0, 0xed, 0x9d, 0xb6, 0x99, 0xa9, 0xff, 0x69, 0x7d, 0x93, 0x49, 0x17,
	0x77, 0xa0, 0x3c, 0xec, 0x0e, 0x3b, 0xbd, 0x6e, 0xbf, 0x33, 0xe9, 0xb6, 0x7b, 0xfc, 0x4c, 0xfb,
	0x60, 0xae, 0xa0, 0x75, 0xce, 0x3f, 0x81, 0xbb, 0x6b, 0xb4, 0x33, 0x1a, 0x37, 0xb1, 0xc8, 0x63,
	0x66, 0x83, 0xbe, 0x0a, 0x73, 0x03, 0x1d, 0x8d, 0x07, 0xc3, 0x61, 0xa7, 0x6d, 0x66, 0x8f, 0xfe,
	0x9b, 0x03, 0xad, 0x39, 0xec, 0xa2, 0x06, 0x18, 0xab, 0x6b, 0x10, 0xdd, 0x93, 0x43, 0xfb, 0xd6,
	0xb5, 0x58, 0x5b, 0xa9, 0x96, 0x95, 0x42, 0x5f, 0x03, 0xac, 0xf5, 0x1c, 0xdd, 0x8f, 0xff, 0x17,
	0xb0, 0x25, 0xf0, 0xb5, 0x8d, 0xa9, 0xda, 0x4a, 0xa1, 0x67, 0x50, 0x88, 0x35, 0x1b, 0xdd, 0x15,
	0xa6, 0x4d, 0x05, 0xaf, 0x95, 0x93, 0xfc, 0xc8, 0x4a, 0xa1, 0x97, 0x60, 0xac, 0x74, 0x37, 0x0e,
	0x6b, 0x5b, 0x87, 0x6b, 0xf7, 0xaf, 0x0d, 0x4c, 0x62, 0x50, 0xb6, 0x52, 0xe8, 0x15, 0x14, 0x62,
	0x15, 0x8e, 0x5f, 0xb7, 0xa9, 0xc9, 0xb5, 0x07, 0xd7, 0x76, 0x1e, 0x5f, 0x31, 0x12, 0x7d, 0xcf,
	0x87, 0x0d, 0x2b, 0xf5, 0x55, 0x1a, 0x9d, 0x40, 0x65, 0x53, 0x97, 0x51, 0x2d, 0x91, 0x9a, 0xad,
	0xf6, 0xda, 0x11, 0x48, 0x0b, 0xf6, 0xb6, 0x24, 0x07, 0x3d, 0x48, 0xa6, 0x6c, 0xdb, 0xd3, 0xf5,
	0xb1, 0xc5, 0x4a, 0xa1, 0x5f, 0x42, 0x29, 0x29, 0x39, 0xa8, 0xba, 0xca, 0xe0, 0xf6, 0x76, 0x74,
	0x6d, 0x3b, 0xcf, 0xe5, 0x09, 0x54, 0x36, 0xb5, 0x29, 0x3e, 0xcc, 0x8d, 0x82, 0xb5, 0xe3, 0x30,
	0x6d, 0x28, 0x6f, 0xe8, 0x13, 0xfa, 0x54, 0x5e, 0xfc, 0x37, 0x68, 0xd6, 0x0e, 0x2f, 0xc7, 0x50,
	0x4a, 0x4a, 0x54, 0x7c, 0x9a, 0x1b, 0x54, 0x6b, 0x87, 0x8f, 0x5f, 0xa8, 0xea, 0x68, 0x7a, 0x1e,
	0x7a, 0x07, 0xed, 0xdd, 0xdb, 0x8f, 0x73, 0xbf, 0xd5, 0x82, 0x20, 0x3a, 0xcf, 0x0b, 0xc3, 0xf3,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x26, 0x5b, 0x97, 0x16, 0x16, 0x00, 0x00,
}
