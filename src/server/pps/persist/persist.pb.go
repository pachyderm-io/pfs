// Code generated by protoc-gen-go.
// source: server/pps/persist/persist.proto
// DO NOT EDIT!

/*
Package persist is a generated protocol buffer package.

It is generated from these files:
	server/pps/persist/persist.proto

It has these top-level messages:
	JobInfo
	JobInfos
	JobOutput
	JobState
	PipelineInfo
	PipelineInfoChange
	PipelineInfos
	SubscribePipelineInfosRequest
	ListPipelineInfosRequest
	UpdatePipelineStateRequest
	UpdatePipelineStoppedRequest
	BlockPipelineStateRequest
	Shard
*/
package persist

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "go.pedge.io/pb/go/google/protobuf"
import google_protobuf1 "go.pedge.io/pb/go/google/protobuf"
import pfs "github.com/pachyderm/pachyderm/src/client/pfs"
import pachyderm_pps "github.com/pachyderm/pachyderm/src/client/pps"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChangeType int32

const (
	ChangeType_CREATE ChangeType = 0
	ChangeType_UPDATE ChangeType = 1
	ChangeType_DELETE ChangeType = 2
)

var ChangeType_name = map[int32]string{
	0: "CREATE",
	1: "UPDATE",
	2: "DELETE",
}
var ChangeType_value = map[string]int32{
	"CREATE": 0,
	"UPDATE": 1,
	"DELETE": 2,
}

func (x ChangeType) String() string {
	return proto.EnumName(ChangeType_name, int32(x))
}
func (ChangeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type JobInfo struct {
	JobID         string                      `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	Transform     *pachyderm_pps.Transform    `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	PipelineName  string                      `protobuf:"bytes,3,opt,name=pipeline_name,json=pipelineName" json:"pipeline_name,omitempty"`
	Parallelism   uint64                      `protobuf:"varint,4,opt,name=parallelism" json:"parallelism,omitempty"`
	Inputs        []*pachyderm_pps.JobInput   `protobuf:"bytes,5,rep,name=inputs" json:"inputs,omitempty"`
	ParentJob     *pachyderm_pps.Job          `protobuf:"bytes,6,opt,name=parent_job,json=parentJob" json:"parent_job,omitempty"`
	Started       *google_protobuf1.Timestamp `protobuf:"bytes,7,opt,name=started" json:"started,omitempty"`
	Finished      *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=finished" json:"finished,omitempty"`
	OutputCommit  *pfs.Commit                 `protobuf:"bytes,9,opt,name=output_commit,json=outputCommit" json:"output_commit,omitempty"`
	State         pachyderm_pps.JobState      `protobuf:"varint,10,opt,name=state,enum=pachyderm.pps.JobState" json:"state,omitempty"`
	CommitIndex   string                      `protobuf:"bytes,11,opt,name=commit_index,json=commitIndex" json:"commit_index,omitempty"`
	PodsStarted   uint64                      `protobuf:"varint,12,opt,name=pods_started,json=podsStarted" json:"pods_started,omitempty"`
	PodsSucceeded uint64                      `protobuf:"varint,13,opt,name=pods_succeeded,json=podsSucceeded" json:"pods_succeeded,omitempty"`
	PodsFailed    uint64                      `protobuf:"varint,14,opt,name=pods_failed,json=podsFailed" json:"pods_failed,omitempty"`
	ShardModuli   []uint64                    `protobuf:"varint,15,rep,packed,name=shard_moduli,json=shardModuli" json:"shard_moduli,omitempty"`
}

func (m *JobInfo) Reset()                    { *m = JobInfo{} }
func (m *JobInfo) String() string            { return proto.CompactTextString(m) }
func (*JobInfo) ProtoMessage()               {}
func (*JobInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *JobInfo) GetTransform() *pachyderm_pps.Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *JobInfo) GetInputs() []*pachyderm_pps.JobInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *JobInfo) GetParentJob() *pachyderm_pps.Job {
	if m != nil {
		return m.ParentJob
	}
	return nil
}

func (m *JobInfo) GetStarted() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *JobInfo) GetFinished() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Finished
	}
	return nil
}

func (m *JobInfo) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

type JobInfos struct {
	JobInfo []*JobInfo `protobuf:"bytes,1,rep,name=job_info,json=jobInfo" json:"job_info,omitempty"`
}

func (m *JobInfos) Reset()                    { *m = JobInfos{} }
func (m *JobInfos) String() string            { return proto.CompactTextString(m) }
func (*JobInfos) ProtoMessage()               {}
func (*JobInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JobInfos) GetJobInfo() []*JobInfo {
	if m != nil {
		return m.JobInfo
	}
	return nil
}

type JobOutput struct {
	JobID        string      `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	OutputCommit *pfs.Commit `protobuf:"bytes,2,opt,name=output_commit,json=outputCommit" json:"output_commit,omitempty"`
}

func (m *JobOutput) Reset()                    { *m = JobOutput{} }
func (m *JobOutput) String() string            { return proto.CompactTextString(m) }
func (*JobOutput) ProtoMessage()               {}
func (*JobOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JobOutput) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

type JobState struct {
	JobID    string                      `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	State    pachyderm_pps.JobState      `protobuf:"varint,2,opt,name=state,enum=pachyderm.pps.JobState" json:"state,omitempty"`
	Finished *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=finished" json:"finished,omitempty"`
}

func (m *JobState) Reset()                    { *m = JobState{} }
func (m *JobState) String() string            { return proto.CompactTextString(m) }
func (*JobState) ProtoMessage()               {}
func (*JobState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JobState) GetFinished() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Finished
	}
	return nil
}

type PipelineInfo struct {
	PipelineName string                         `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName" json:"pipeline_name,omitempty"`
	Transform    *pachyderm_pps.Transform       `protobuf:"bytes,2,opt,name=transform" json:"transform,omitempty"`
	Parallelism  uint64                         `protobuf:"varint,3,opt,name=parallelism" json:"parallelism,omitempty"`
	Inputs       []*pachyderm_pps.PipelineInput `protobuf:"bytes,4,rep,name=inputs" json:"inputs,omitempty"`
	OutputRepo   *pfs.Repo                      `protobuf:"bytes,5,opt,name=output_repo,json=outputRepo" json:"output_repo,omitempty"`
	CreatedAt    *google_protobuf1.Timestamp    `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Shard        uint64                         `protobuf:"varint,7,opt,name=shard" json:"shard,omitempty"`
	State        pachyderm_pps.PipelineState    `protobuf:"varint,8,opt,name=state,enum=pachyderm.pps.PipelineState" json:"state,omitempty"`
	RecentError  string                         `protobuf:"bytes,9,opt,name=recent_error,json=recentError" json:"recent_error,omitempty"`
	JobCounts    map[int32]int32                `protobuf:"bytes,10,rep,name=job_counts,json=jobCounts" json:"job_counts,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Stopped      bool                           `protobuf:"varint,11,opt,name=stopped" json:"stopped,omitempty"`
}

func (m *PipelineInfo) Reset()                    { *m = PipelineInfo{} }
func (m *PipelineInfo) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfo) ProtoMessage()               {}
func (*PipelineInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PipelineInfo) GetTransform() *pachyderm_pps.Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (m *PipelineInfo) GetInputs() []*pachyderm_pps.PipelineInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *PipelineInfo) GetOutputRepo() *pfs.Repo {
	if m != nil {
		return m.OutputRepo
	}
	return nil
}

func (m *PipelineInfo) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PipelineInfo) GetJobCounts() map[int32]int32 {
	if m != nil {
		return m.JobCounts
	}
	return nil
}

type PipelineInfoChange struct {
	Pipeline *PipelineInfo `protobuf:"bytes,1,opt,name=pipeline" json:"pipeline,omitempty"`
	Type     ChangeType    `protobuf:"varint,2,opt,name=type,enum=pachyderm.pps.persist.ChangeType" json:"type,omitempty"`
}

func (m *PipelineInfoChange) Reset()                    { *m = PipelineInfoChange{} }
func (m *PipelineInfoChange) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfoChange) ProtoMessage()               {}
func (*PipelineInfoChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PipelineInfoChange) GetPipeline() *PipelineInfo {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

type PipelineInfos struct {
	PipelineInfo []*PipelineInfo `protobuf:"bytes,1,rep,name=pipeline_info,json=pipelineInfo" json:"pipeline_info,omitempty"`
}

func (m *PipelineInfos) Reset()                    { *m = PipelineInfos{} }
func (m *PipelineInfos) String() string            { return proto.CompactTextString(m) }
func (*PipelineInfos) ProtoMessage()               {}
func (*PipelineInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PipelineInfos) GetPipelineInfo() []*PipelineInfo {
	if m != nil {
		return m.PipelineInfo
	}
	return nil
}

type SubscribePipelineInfosRequest struct {
	IncludeInitial bool   `protobuf:"varint,1,opt,name=include_initial,json=includeInitial" json:"include_initial,omitempty"`
	Shard          *Shard `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
}

func (m *SubscribePipelineInfosRequest) Reset()                    { *m = SubscribePipelineInfosRequest{} }
func (m *SubscribePipelineInfosRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribePipelineInfosRequest) ProtoMessage()               {}
func (*SubscribePipelineInfosRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SubscribePipelineInfosRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

type ListPipelineInfosRequest struct {
	Shard *Shard `protobuf:"bytes,1,opt,name=shard" json:"shard,omitempty"`
}

func (m *ListPipelineInfosRequest) Reset()                    { *m = ListPipelineInfosRequest{} }
func (m *ListPipelineInfosRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPipelineInfosRequest) ProtoMessage()               {}
func (*ListPipelineInfosRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListPipelineInfosRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

type UpdatePipelineStateRequest struct {
	PipelineName string                      `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName" json:"pipeline_name,omitempty"`
	State        pachyderm_pps.PipelineState `protobuf:"varint,2,opt,name=state,enum=pachyderm.pps.PipelineState" json:"state,omitempty"`
	RecentError  string                      `protobuf:"bytes,3,opt,name=recent_error,json=recentError" json:"recent_error,omitempty"`
}

func (m *UpdatePipelineStateRequest) Reset()                    { *m = UpdatePipelineStateRequest{} }
func (m *UpdatePipelineStateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePipelineStateRequest) ProtoMessage()               {}
func (*UpdatePipelineStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type UpdatePipelineStoppedRequest struct {
	PipelineName string `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName" json:"pipeline_name,omitempty"`
	Stopped      bool   `protobuf:"varint,2,opt,name=stopped" json:"stopped,omitempty"`
}

func (m *UpdatePipelineStoppedRequest) Reset()                    { *m = UpdatePipelineStoppedRequest{} }
func (m *UpdatePipelineStoppedRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePipelineStoppedRequest) ProtoMessage()               {}
func (*UpdatePipelineStoppedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type BlockPipelineStateRequest struct {
	PipelineName string                      `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName" json:"pipeline_name,omitempty"`
	State        pachyderm_pps.PipelineState `protobuf:"varint,2,opt,name=state,enum=pachyderm.pps.PipelineState" json:"state,omitempty"`
}

func (m *BlockPipelineStateRequest) Reset()                    { *m = BlockPipelineStateRequest{} }
func (m *BlockPipelineStateRequest) String() string            { return proto.CompactTextString(m) }
func (*BlockPipelineStateRequest) ProtoMessage()               {}
func (*BlockPipelineStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// As in, sharding
type Shard struct {
	Number uint64 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *Shard) Reset()                    { *m = Shard{} }
func (m *Shard) String() string            { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()               {}
func (*Shard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func init() {
	proto.RegisterType((*JobInfo)(nil), "pachyderm.pps.persist.JobInfo")
	proto.RegisterType((*JobInfos)(nil), "pachyderm.pps.persist.JobInfos")
	proto.RegisterType((*JobOutput)(nil), "pachyderm.pps.persist.JobOutput")
	proto.RegisterType((*JobState)(nil), "pachyderm.pps.persist.JobState")
	proto.RegisterType((*PipelineInfo)(nil), "pachyderm.pps.persist.PipelineInfo")
	proto.RegisterType((*PipelineInfoChange)(nil), "pachyderm.pps.persist.PipelineInfoChange")
	proto.RegisterType((*PipelineInfos)(nil), "pachyderm.pps.persist.PipelineInfos")
	proto.RegisterType((*SubscribePipelineInfosRequest)(nil), "pachyderm.pps.persist.SubscribePipelineInfosRequest")
	proto.RegisterType((*ListPipelineInfosRequest)(nil), "pachyderm.pps.persist.ListPipelineInfosRequest")
	proto.RegisterType((*UpdatePipelineStateRequest)(nil), "pachyderm.pps.persist.UpdatePipelineStateRequest")
	proto.RegisterType((*UpdatePipelineStoppedRequest)(nil), "pachyderm.pps.persist.UpdatePipelineStoppedRequest")
	proto.RegisterType((*BlockPipelineStateRequest)(nil), "pachyderm.pps.persist.BlockPipelineStateRequest")
	proto.RegisterType((*Shard)(nil), "pachyderm.pps.persist.Shard")
	proto.RegisterEnum("pachyderm.pps.persist.ChangeType", ChangeType_name, ChangeType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for API service

type APIClient interface {
	// Job rpcs
	// job_id cannot be set
	// timestamp cannot be set
	CreateJobInfo(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*JobInfo, error)
	InspectJob(ctx context.Context, in *pachyderm_pps.InspectJobRequest, opts ...grpc.CallOption) (*JobInfo, error)
	// ordered by time, latest to earliest
	ListJobInfos(ctx context.Context, in *pachyderm_pps.ListJobRequest, opts ...grpc.CallOption) (*JobInfos, error)
	// should only be called when rolling back if a Job does not start!
	DeleteJobInfo(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	DeleteJobInfosForPipeline(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// JobOutput rpcs
	CreateJobOutput(ctx context.Context, in *JobOutput, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// JobState rpcs
	CreateJobState(ctx context.Context, in *JobState, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// StartJob sets the state of the job to "running" if the state
	// is currently "pulling".
	// This API updates the job state in a transactional manner.
	StartJob(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Pipeline rpcs
	CreatePipelineInfo(ctx context.Context, in *PipelineInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	UpdatePipelineInfo(ctx context.Context, in *PipelineInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetPipelineInfo(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*PipelineInfo, error)
	// ordered by time, latest to earliest
	ListPipelineInfos(ctx context.Context, in *ListPipelineInfosRequest, opts ...grpc.CallOption) (*PipelineInfos, error)
	DeletePipelineInfo(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	SubscribePipelineInfos(ctx context.Context, in *SubscribePipelineInfosRequest, opts ...grpc.CallOption) (API_SubscribePipelineInfosClient, error)
	UpdatePipelineState(ctx context.Context, in *UpdatePipelineStateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	UpdatePipelineStopped(ctx context.Context, in *UpdatePipelineStoppedRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	BlockPipelineState(ctx context.Context, in *BlockPipelineStateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Shard rpcs
	// Returns the new job info
	StartPod(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*JobInfo, error)
	SucceedPod(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*JobInfo, error)
	FailPod(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*JobInfo, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateJobInfo(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreateJobInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InspectJob(ctx context.Context, in *pachyderm_pps.InspectJobRequest, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/InspectJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListJobInfos(ctx context.Context, in *pachyderm_pps.ListJobRequest, opts ...grpc.CallOption) (*JobInfos, error) {
	out := new(JobInfos)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/ListJobInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteJobInfo(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/DeleteJobInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteJobInfosForPipeline(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/DeleteJobInfosForPipeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateJobOutput(ctx context.Context, in *JobOutput, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreateJobOutput", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateJobState(ctx context.Context, in *JobState, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreateJobState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StartJob(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/StartJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreatePipelineInfo(ctx context.Context, in *PipelineInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/CreatePipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdatePipelineInfo(ctx context.Context, in *PipelineInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/UpdatePipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetPipelineInfo(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*PipelineInfo, error) {
	out := new(PipelineInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/GetPipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListPipelineInfos(ctx context.Context, in *ListPipelineInfosRequest, opts ...grpc.CallOption) (*PipelineInfos, error) {
	out := new(PipelineInfos)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/ListPipelineInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeletePipelineInfo(ctx context.Context, in *pachyderm_pps.Pipeline, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/DeletePipelineInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SubscribePipelineInfos(ctx context.Context, in *SubscribePipelineInfosRequest, opts ...grpc.CallOption) (API_SubscribePipelineInfosClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/pachyderm.pps.persist.API/SubscribePipelineInfos", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPISubscribePipelineInfosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_SubscribePipelineInfosClient interface {
	Recv() (*PipelineInfoChange, error)
	grpc.ClientStream
}

type aPISubscribePipelineInfosClient struct {
	grpc.ClientStream
}

func (x *aPISubscribePipelineInfosClient) Recv() (*PipelineInfoChange, error) {
	m := new(PipelineInfoChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) UpdatePipelineState(ctx context.Context, in *UpdatePipelineStateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/UpdatePipelineState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdatePipelineStopped(ctx context.Context, in *UpdatePipelineStoppedRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/UpdatePipelineStopped", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) BlockPipelineState(ctx context.Context, in *BlockPipelineStateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/BlockPipelineState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteAll(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/DeleteAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StartPod(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/StartPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SucceedPod(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/SucceedPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FailPod(ctx context.Context, in *pachyderm_pps.Job, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := grpc.Invoke(ctx, "/pachyderm.pps.persist.API/FailPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	// Job rpcs
	// job_id cannot be set
	// timestamp cannot be set
	CreateJobInfo(context.Context, *JobInfo) (*JobInfo, error)
	InspectJob(context.Context, *pachyderm_pps.InspectJobRequest) (*JobInfo, error)
	// ordered by time, latest to earliest
	ListJobInfos(context.Context, *pachyderm_pps.ListJobRequest) (*JobInfos, error)
	// should only be called when rolling back if a Job does not start!
	DeleteJobInfo(context.Context, *pachyderm_pps.Job) (*google_protobuf.Empty, error)
	DeleteJobInfosForPipeline(context.Context, *pachyderm_pps.Pipeline) (*google_protobuf.Empty, error)
	// JobOutput rpcs
	CreateJobOutput(context.Context, *JobOutput) (*google_protobuf.Empty, error)
	// JobState rpcs
	CreateJobState(context.Context, *JobState) (*google_protobuf.Empty, error)
	// StartJob sets the state of the job to "running" if the state
	// is currently "pulling".
	// This API updates the job state in a transactional manner.
	StartJob(context.Context, *pachyderm_pps.Job) (*google_protobuf.Empty, error)
	// Pipeline rpcs
	CreatePipelineInfo(context.Context, *PipelineInfo) (*google_protobuf.Empty, error)
	UpdatePipelineInfo(context.Context, *PipelineInfo) (*google_protobuf.Empty, error)
	GetPipelineInfo(context.Context, *pachyderm_pps.Pipeline) (*PipelineInfo, error)
	// ordered by time, latest to earliest
	ListPipelineInfos(context.Context, *ListPipelineInfosRequest) (*PipelineInfos, error)
	DeletePipelineInfo(context.Context, *pachyderm_pps.Pipeline) (*google_protobuf.Empty, error)
	SubscribePipelineInfos(*SubscribePipelineInfosRequest, API_SubscribePipelineInfosServer) error
	UpdatePipelineState(context.Context, *UpdatePipelineStateRequest) (*google_protobuf.Empty, error)
	UpdatePipelineStopped(context.Context, *UpdatePipelineStoppedRequest) (*google_protobuf.Empty, error)
	BlockPipelineState(context.Context, *BlockPipelineStateRequest) (*google_protobuf.Empty, error)
	// DeleteAll deletes everything
	DeleteAll(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	// Shard rpcs
	// Returns the new job info
	StartPod(context.Context, *pachyderm_pps.Job) (*JobInfo, error)
	SucceedPod(context.Context, *pachyderm_pps.Job) (*JobInfo, error)
	FailPod(context.Context, *pachyderm_pps.Job) (*JobInfo, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateJobInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/CreateJobInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateJobInfo(ctx, req.(*JobInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_InspectJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.InspectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InspectJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/InspectJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InspectJob(ctx, req.(*pachyderm_pps.InspectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListJobInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.ListJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListJobInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/ListJobInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListJobInfos(ctx, req.(*pachyderm_pps.ListJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteJobInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/DeleteJobInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteJobInfo(ctx, req.(*pachyderm_pps.Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteJobInfosForPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteJobInfosForPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/DeleteJobInfosForPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteJobInfosForPipeline(ctx, req.(*pachyderm_pps.Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateJobOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateJobOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/CreateJobOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateJobOutput(ctx, req.(*JobOutput))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateJobState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateJobState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/CreateJobState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateJobState(ctx, req.(*JobState))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StartJob(ctx, req.(*pachyderm_pps.Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreatePipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreatePipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/CreatePipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreatePipelineInfo(ctx, req.(*PipelineInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdatePipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdatePipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/UpdatePipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdatePipelineInfo(ctx, req.(*PipelineInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetPipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetPipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/GetPipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetPipelineInfo(ctx, req.(*pachyderm_pps.Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListPipelineInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListPipelineInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/ListPipelineInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListPipelineInfos(ctx, req.(*ListPipelineInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeletePipelineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeletePipelineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/DeletePipelineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeletePipelineInfo(ctx, req.(*pachyderm_pps.Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SubscribePipelineInfos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribePipelineInfosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).SubscribePipelineInfos(m, &aPISubscribePipelineInfosServer{stream})
}

type API_SubscribePipelineInfosServer interface {
	Send(*PipelineInfoChange) error
	grpc.ServerStream
}

type aPISubscribePipelineInfosServer struct {
	grpc.ServerStream
}

func (x *aPISubscribePipelineInfosServer) Send(m *PipelineInfoChange) error {
	return x.ServerStream.SendMsg(m)
}

func _API_UpdatePipelineState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdatePipelineState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/UpdatePipelineState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdatePipelineState(ctx, req.(*UpdatePipelineStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdatePipelineStopped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineStoppedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdatePipelineStopped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/UpdatePipelineStopped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdatePipelineStopped(ctx, req.(*UpdatePipelineStoppedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_BlockPipelineState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockPipelineStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).BlockPipelineState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/BlockPipelineState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).BlockPipelineState(ctx, req.(*BlockPipelineStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteAll(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StartPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StartPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/StartPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StartPod(ctx, req.(*pachyderm_pps.Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SucceedPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SucceedPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/SucceedPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SucceedPod(ctx, req.(*pachyderm_pps.Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FailPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pachyderm_pps.Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FailPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pachyderm.pps.persist.API/FailPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FailPod(ctx, req.(*pachyderm_pps.Job))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pachyderm.pps.persist.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJobInfo",
			Handler:    _API_CreateJobInfo_Handler,
		},
		{
			MethodName: "InspectJob",
			Handler:    _API_InspectJob_Handler,
		},
		{
			MethodName: "ListJobInfos",
			Handler:    _API_ListJobInfos_Handler,
		},
		{
			MethodName: "DeleteJobInfo",
			Handler:    _API_DeleteJobInfo_Handler,
		},
		{
			MethodName: "DeleteJobInfosForPipeline",
			Handler:    _API_DeleteJobInfosForPipeline_Handler,
		},
		{
			MethodName: "CreateJobOutput",
			Handler:    _API_CreateJobOutput_Handler,
		},
		{
			MethodName: "CreateJobState",
			Handler:    _API_CreateJobState_Handler,
		},
		{
			MethodName: "StartJob",
			Handler:    _API_StartJob_Handler,
		},
		{
			MethodName: "CreatePipelineInfo",
			Handler:    _API_CreatePipelineInfo_Handler,
		},
		{
			MethodName: "UpdatePipelineInfo",
			Handler:    _API_UpdatePipelineInfo_Handler,
		},
		{
			MethodName: "GetPipelineInfo",
			Handler:    _API_GetPipelineInfo_Handler,
		},
		{
			MethodName: "ListPipelineInfos",
			Handler:    _API_ListPipelineInfos_Handler,
		},
		{
			MethodName: "DeletePipelineInfo",
			Handler:    _API_DeletePipelineInfo_Handler,
		},
		{
			MethodName: "UpdatePipelineState",
			Handler:    _API_UpdatePipelineState_Handler,
		},
		{
			MethodName: "UpdatePipelineStopped",
			Handler:    _API_UpdatePipelineStopped_Handler,
		},
		{
			MethodName: "BlockPipelineState",
			Handler:    _API_BlockPipelineState_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _API_DeleteAll_Handler,
		},
		{
			MethodName: "StartPod",
			Handler:    _API_StartPod_Handler,
		},
		{
			MethodName: "SucceedPod",
			Handler:    _API_SucceedPod_Handler,
		},
		{
			MethodName: "FailPod",
			Handler:    _API_FailPod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribePipelineInfos",
			Handler:       _API_SubscribePipelineInfos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("server/pps/persist/persist.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x57, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0x36, 0x2d, 0xc9, 0x96, 0x46, 0x96, 0x9d, 0x77, 0xdf, 0x7c, 0x30, 0x6a, 0x52, 0x2b, 0x4c,
	0x8b, 0xba, 0x01, 0x2a, 0x39, 0x4a, 0x1a, 0x24, 0x45, 0x83, 0xd4, 0x71, 0x94, 0x54, 0x69, 0x92,
	0x3a, 0xb4, 0x72, 0x68, 0x81, 0x42, 0xe5, 0xc7, 0xca, 0xa6, 0x43, 0x72, 0xb7, 0xdc, 0x65, 0x50,
	0x01, 0xed, 0xa9, 0x97, 0x1e, 0xfa, 0x03, 0xfa, 0x7b, 0x7a, 0xea, 0xcf, 0x2a, 0x76, 0x97, 0x94,
	0xf5, 0x45, 0x9a, 0x31, 0x8a, 0x1e, 0x0c, 0x73, 0x67, 0x67, 0x9e, 0x99, 0x9d, 0x79, 0x66, 0x76,
	0x05, 0x2d, 0x86, 0xa3, 0x77, 0x38, 0xea, 0x50, 0xca, 0x3a, 0x14, 0x47, 0xcc, 0x63, 0x3c, 0xfd,
	0xdf, 0xa6, 0x11, 0xe1, 0x04, 0x5d, 0xa2, 0x96, 0x73, 0x3c, 0x76, 0x71, 0x14, 0xb4, 0x29, 0x65,
	0xed, 0x64, 0xb3, 0xf9, 0xc1, 0x11, 0x21, 0x47, 0x3e, 0xee, 0x48, 0x25, 0x3b, 0x1e, 0x75, 0x70,
	0x40, 0xf9, 0x58, 0xd9, 0x34, 0xb7, 0xe7, 0x37, 0xb9, 0x17, 0x60, 0xc6, 0xad, 0x80, 0x26, 0x0a,
	0x17, 0x1d, 0xdf, 0xc3, 0x21, 0xef, 0xd0, 0x11, 0x13, 0x7f, 0xf3, 0x52, 0x11, 0x0c, 0x4d, 0xa4,
	0xc6, 0x6f, 0x15, 0x58, 0x7f, 0x4e, 0xec, 0x7e, 0x38, 0x22, 0xe8, 0x12, 0xac, 0x9d, 0x10, 0x7b,
	0xe8, 0xb9, 0xba, 0xd6, 0xd2, 0x76, 0x6a, 0x66, 0xe5, 0x84, 0xd8, 0x7d, 0x17, 0xdd, 0x83, 0x1a,
	0x8f, 0xac, 0x90, 0x8d, 0x48, 0x14, 0xe8, 0xab, 0x2d, 0x6d, 0xa7, 0xde, 0xd5, 0xdb, 0xb3, 0x71,
	0x0f, 0xd2, 0x7d, 0xf3, 0x54, 0x15, 0xdd, 0x84, 0x06, 0xf5, 0x28, 0xf6, 0xbd, 0x10, 0x0f, 0x43,
	0x2b, 0xc0, 0x7a, 0x49, 0xa2, 0x6e, 0xa4, 0xc2, 0x57, 0x56, 0x80, 0x51, 0x0b, 0xea, 0xd4, 0x8a,
	0x2c, 0xdf, 0xc7, 0xbe, 0xc7, 0x02, 0xbd, 0xdc, 0xd2, 0x76, 0xca, 0xe6, 0xb4, 0x08, 0x75, 0x60,
	0xcd, 0x0b, 0x69, 0xcc, 0x99, 0x5e, 0x69, 0x95, 0x76, 0xea, 0xdd, 0x2b, 0x73, 0xbe, 0x65, 0xf4,
	0x34, 0xe6, 0x66, 0xa2, 0x86, 0x6e, 0x03, 0x50, 0x2b, 0xc2, 0x21, 0x1f, 0x9e, 0x10, 0x5b, 0x5f,
	0x93, 0x01, 0xa3, 0x45, 0x23, 0xb3, 0xa6, 0xb4, 0x9e, 0x13, 0x1b, 0xdd, 0x85, 0x75, 0xc6, 0xad,
	0x88, 0x63, 0x57, 0x5f, 0x97, 0xfa, 0xcd, 0xb6, 0x4a, 0x72, 0x3b, 0x4d, 0x72, 0x7b, 0x90, 0x26,
	0xd9, 0x4c, 0x55, 0xd1, 0x3d, 0xa8, 0x8e, 0xbc, 0xd0, 0x63, 0xc7, 0xd8, 0xd5, 0xab, 0x67, 0x9a,
	0x4d, 0x74, 0xd1, 0x2e, 0x34, 0x48, 0xcc, 0x69, 0xcc, 0x87, 0x0e, 0x09, 0x02, 0x8f, 0xeb, 0x35,
	0x69, 0x5c, 0x6f, 0x8b, 0x62, 0xed, 0x4b, 0x91, 0xb9, 0xa1, 0x34, 0xd4, 0x0a, 0x7d, 0x06, 0x15,
	0xc6, 0x2d, 0x8e, 0x75, 0x68, 0x69, 0x3b, 0x9b, 0xcb, 0x52, 0x70, 0x28, 0xb6, 0x4d, 0xa5, 0x85,
	0x6e, 0xc0, 0x86, 0x42, 0x1e, 0x7a, 0xa1, 0x8b, 0x7f, 0xd6, 0xeb, 0x32, 0xf1, 0x75, 0x25, 0xeb,
	0x0b, 0x91, 0x50, 0xa1, 0xc4, 0x65, 0xc3, 0xf4, 0xd8, 0x1b, 0x49, 0xe2, 0x89, 0xcb, 0x0e, 0x93,
	0xe3, 0x7d, 0x0c, 0x9b, 0x4a, 0x25, 0x76, 0x1c, 0x8c, 0x5d, 0xec, 0xea, 0x0d, 0xa9, 0xd4, 0x90,
	0x4a, 0xa9, 0x10, 0x6d, 0x83, 0xb4, 0x1a, 0x8e, 0x2c, 0xcf, 0xc7, 0xae, 0xbe, 0x29, 0x75, 0x40,
	0x88, 0x9e, 0x4a, 0x89, 0x70, 0xc5, 0x8e, 0xad, 0xc8, 0x1d, 0x06, 0xc4, 0x8d, 0x7d, 0x4f, 0xdf,
	0x6a, 0x95, 0x84, 0x2b, 0x29, 0x7b, 0x29, 0x45, 0x46, 0x0f, 0xaa, 0x09, 0x09, 0x19, 0x7a, 0x00,
	0x55, 0xc9, 0xc2, 0x70, 0x44, 0x74, 0x4d, 0x56, 0xfc, 0xc3, 0xf6, 0xd2, 0x2e, 0x69, 0x27, 0x26,
	0xe6, 0xfa, 0x89, 0xfa, 0x30, 0x06, 0x50, 0x7b, 0x4e, 0xec, 0x6f, 0x65, 0xe6, 0xb2, 0xd8, 0xbc,
	0x90, 0xfc, 0xd5, 0x33, 0x92, 0x6f, 0xfc, 0xae, 0xc9, 0xe8, 0x64, 0x86, 0xb3, 0x50, 0x27, 0x05,
	0x5a, 0x2d, 0x54, 0xa0, 0x69, 0xe6, 0x94, 0x8a, 0x33, 0xc7, 0xf8, 0xab, 0x0c, 0x1b, 0x07, 0x49,
	0xfb, 0xc8, 0x96, 0x5d, 0xe8, 0x31, 0x6d, 0x49, 0x8f, 0x9d, 0xb7, 0x81, 0xe7, 0x7a, 0xb3, 0xb4,
	0xd8, 0x9b, 0x77, 0x27, 0xbd, 0x59, 0x96, 0x95, 0xba, 0x36, 0x07, 0x7b, 0x1a, 0xeb, 0x74, 0x83,
	0xde, 0x82, 0x7a, 0x52, 0x82, 0x08, 0x53, 0xa2, 0x57, 0x64, 0x44, 0x35, 0x59, 0x00, 0x13, 0x53,
	0x62, 0x82, 0xda, 0x15, 0xdf, 0xe8, 0x01, 0x80, 0x13, 0x61, 0x8b, 0x63, 0x77, 0x68, 0xf1, 0xa4,
	0x99, 0xf3, 0x72, 0x55, 0x4b, 0xb4, 0xf7, 0x38, 0xba, 0x08, 0x15, 0xc9, 0x31, 0xd9, 0xd2, 0x65,
	0x53, 0x2d, 0x50, 0x37, 0xad, 0x54, 0x55, 0x56, 0x2a, 0x2b, 0xe2, 0xf9, 0x7e, 0x8a, 0xb0, 0x23,
	0x26, 0x0a, 0x8e, 0x22, 0x12, 0xc9, 0x7e, 0xad, 0x99, 0x75, 0x25, 0xeb, 0x09, 0x11, 0x7a, 0x0d,
	0x20, 0x78, 0xe1, 0x90, 0x38, 0xe4, 0x4c, 0x07, 0x99, 0x8d, 0x6e, 0x06, 0x6f, 0xa7, 0x2b, 0x28,
	0xa8, 0xb1, 0x2f, 0x8d, 0x7a, 0x21, 0x8f, 0xc6, 0x66, 0xed, 0x24, 0x5d, 0x23, 0x5d, 0x0c, 0x25,
	0x42, 0x29, 0x76, 0x65, 0x03, 0x57, 0xcd, 0x74, 0xd9, 0xfc, 0x12, 0x36, 0x67, 0xcd, 0xd0, 0x05,
	0x28, 0xbd, 0xc5, 0x63, 0x59, 0xfd, 0x8a, 0x29, 0x3e, 0xc5, 0xe9, 0xdf, 0x59, 0x7e, 0xac, 0x18,
	0x59, 0x31, 0xd5, 0xe2, 0x8b, 0xd5, 0xfb, 0x9a, 0xf1, 0x87, 0x06, 0x68, 0x3a, 0x84, 0xfd, 0x63,
	0x2b, 0x3c, 0xc2, 0xe8, 0x11, 0x54, 0x53, 0xd6, 0x48, 0x9c, 0x7a, 0xf7, 0x66, 0x81, 0xf8, 0xcd,
	0x89, 0x11, 0xfa, 0x1c, 0xca, 0x7c, 0x4c, 0xd3, 0x16, 0xb8, 0x91, 0x61, 0xac, 0xbc, 0x0d, 0xc6,
	0x14, 0x9b, 0x52, 0xdd, 0xf8, 0x0e, 0x1a, 0xd3, 0x80, 0x0c, 0x7d, 0x3d, 0xc5, 0xe9, 0xa9, 0x29,
	0x50, 0x28, 0x9a, 0x09, 0xf1, 0xe5, 0x3c, 0xf8, 0x05, 0xae, 0x1f, 0xc6, 0x36, 0x73, 0x22, 0xcf,
	0xc6, 0x33, 0x3e, 0x4c, 0xfc, 0x53, 0x8c, 0x19, 0x47, 0x9f, 0xc0, 0x96, 0x17, 0x3a, 0x7e, 0xec,
	0x0a, 0x4f, 0x1e, 0xf7, 0x2c, 0x5f, 0x1e, 0xbd, 0x6a, 0x6e, 0x26, 0xe2, 0xbe, 0x92, 0x4a, 0xd6,
	0x48, 0x2e, 0xa9, 0xf6, 0xb9, 0x96, 0x11, 0xcb, 0xa1, 0xd0, 0x49, 0x98, 0x66, 0xbc, 0x02, 0xfd,
	0x85, 0xc7, 0xf8, 0x52, 0xc7, 0x13, 0x3c, 0xad, 0x38, 0xde, 0x9f, 0x1a, 0x34, 0xdf, 0x50, 0xd7,
	0xe2, 0x78, 0x96, 0xa4, 0x09, 0x64, 0xa1, 0x51, 0xd0, 0x9d, 0x9d, 0x53, 0xe7, 0x62, 0x7f, 0x69,
	0x81, 0xfd, 0xc6, 0x0f, 0x70, 0x6d, 0x3e, 0x32, 0xc9, 0xd4, 0xf7, 0x8a, 0x6d, 0x8a, 0xef, 0xab,
	0x33, 0x7c, 0x37, 0x38, 0x5c, 0x7d, 0xec, 0x13, 0xe7, 0xed, 0x7f, 0x7a, 0x6e, 0x63, 0x1b, 0x2a,
	0x32, 0xff, 0xe8, 0x32, 0xac, 0x85, 0x71, 0x60, 0xe3, 0x48, 0x42, 0x97, 0xcd, 0x64, 0x75, 0x6b,
	0x17, 0xe0, 0x94, 0xcd, 0x08, 0x60, 0x6d, 0xdf, 0xec, 0xed, 0x0d, 0x7a, 0x17, 0x56, 0xc4, 0xf7,
	0x9b, 0x83, 0x27, 0xe2, 0x5b, 0x13, 0xdf, 0x4f, 0x7a, 0x2f, 0x7a, 0x83, 0xde, 0x85, 0xd5, 0xee,
	0xdf, 0x0d, 0x28, 0xed, 0x1d, 0xf4, 0xd1, 0x6b, 0x68, 0xec, 0xcb, 0x39, 0x95, 0x3e, 0xbd, 0xce,
	0xb8, 0xe2, 0x9a, 0x67, 0xec, 0x1b, 0x2b, 0xe8, 0x00, 0xa0, 0x1f, 0x32, 0x8a, 0x1d, 0xf9, 0xa0,
	0x69, 0xcd, 0xe9, 0x9f, 0x6e, 0x25, 0x69, 0x2b, 0x84, 0xb8, 0x21, 0xf8, 0x3b, 0xb9, 0x98, 0xaf,
	0xcf, 0x59, 0x24, 0x9b, 0x29, 0xe0, 0x76, 0x3e, 0x20, 0x33, 0x56, 0xd0, 0x43, 0x68, 0x3c, 0xc1,
	0x3e, 0x3e, 0x3d, 0xf6, 0x92, 0x67, 0x59, 0xf3, 0xf2, 0xc2, 0x74, 0xef, 0x89, 0xc7, 0xaf, 0xb1,
	0x82, 0x5e, 0xc1, 0xd5, 0x19, 0x73, 0xf6, 0x94, 0x44, 0x69, 0xe5, 0xd0, 0x95, 0x8c, 0x92, 0xe6,
	0xe0, 0xbd, 0x84, 0xad, 0x49, 0x15, 0x92, 0x47, 0x43, 0x2b, 0xfb, 0x10, 0x4a, 0x23, 0x07, 0xee,
	0x1b, 0xd8, 0x9c, 0xc0, 0xa9, 0xc7, 0x42, 0x4e, 0x4a, 0xa4, 0x42, 0x0e, 0xd8, 0x7d, 0xa8, 0xca,
	0x77, 0x98, 0x28, 0xe6, 0xfb, 0x65, 0xe9, 0x10, 0x90, 0x0a, 0x63, 0xf6, 0xa1, 0x50, 0x60, 0x7a,
	0xe6, 0x83, 0xce, 0x36, 0xf8, 0xbf, 0x01, 0xfa, 0x1a, 0xb6, 0x9e, 0xe1, 0x99, 0xf9, 0x98, 0x5d,
	0xc5, 0x22, 0xae, 0x8c, 0x15, 0xe4, 0xc3, 0xff, 0x16, 0x66, 0x2e, 0xea, 0x64, 0xd8, 0x66, 0x4d,
	0xe7, 0xe6, 0x47, 0x05, 0x9c, 0x09, 0x3e, 0x3f, 0x03, 0xa4, 0x08, 0x59, 0xec, 0x0c, 0xd9, 0x99,
	0xf8, 0x15, 0x2e, 0x2f, 0xbf, 0xa8, 0xd0, 0xdd, 0xac, 0x9b, 0x21, 0xef, 0x5e, 0x6b, 0x7e, 0x5a,
	0xe0, 0x00, 0x6a, 0x74, 0x19, 0x2b, 0xbb, 0x1a, 0xb2, 0xe1, 0xff, 0x4b, 0x2e, 0x16, 0x74, 0x3b,
	0x03, 0x25, 0xfb, 0x12, 0xca, 0x39, 0xe2, 0x08, 0x2e, 0x2d, 0xbd, 0x22, 0xd0, 0x9d, 0x82, 0x5e,
	0xa6, 0x2f, 0x94, 0x1c, 0x3f, 0x3f, 0x02, 0x5a, 0xbc, 0x2b, 0xd0, 0x6e, 0x86, 0x93, 0xcc, 0x6b,
	0x25, 0xc7, 0xc3, 0x43, 0xa8, 0xa9, 0xaa, 0xef, 0xf9, 0x3e, 0xca, 0x50, 0xcb, 0x31, 0xff, 0x2a,
	0xe9, 0xec, 0x03, 0xe2, 0x2e, 0xed, 0xec, 0xb3, 0x07, 0xf3, 0x63, 0x80, 0xe4, 0xe7, 0xd7, 0xf9,
	0x31, 0x1e, 0xc1, 0xba, 0xf8, 0x79, 0x76, 0x6e, 0x80, 0xc7, 0xb5, 0xef, 0xd7, 0x13, 0xa1, 0xbd,
	0x26, 0xcf, 0x78, 0xe7, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x2b, 0x28, 0x01, 0xef, 0x10,
	0x00, 0x00,
}
