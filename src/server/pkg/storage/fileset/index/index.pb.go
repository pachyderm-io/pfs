// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/pachyderm/pachyderm/src/server/pkg/storage/fileset/index/index.proto

/*
Package index is a generated protocol buffer package.

It is generated from these files:
	github.com/pachyderm/pachyderm/src/server/pkg/storage/fileset/index/index.proto

It has these top-level messages:
	DataOp
	Datum
	FileInfo
*/
package index

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import chunk "github.com/pachyderm/pachyderm/src/server/pkg/storage/chunk"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Op is the set of operations that can be associated with a chunk of data.
type Op int32

const (
	Op_APPEND    Op = 0
	Op_OVERWRITE Op = 1
	Op_DELETE    Op = 2
)

var Op_name = map[int32]string{
	0: "APPEND",
	1: "OVERWRITE",
	2: "DELETE",
}
var Op_value = map[string]int32{
	"APPEND":    0,
	"OVERWRITE": 1,
	"DELETE":    2,
}

func (x Op) String() string {
	return proto.EnumName(Op_name, int32(x))
}
func (Op) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// DataOp is a chunk of data and an operation associated with that chunk.
type DataOp struct {
	DataRef *chunk.DataRef `protobuf:"bytes,1,opt,name=data_ref,json=dataRef" json:"data_ref,omitempty"`
	Op      Op             `protobuf:"varint,2,opt,name=op,enum=index.Op" json:"op,omitempty"`
}

func (m *DataOp) Reset()                    { *m = DataOp{} }
func (m *DataOp) String() string            { return proto.CompactTextString(m) }
func (*DataOp) ProtoMessage()               {}
func (*DataOp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DataOp) GetDataRef() *chunk.DataRef {
	if m != nil {
		return m.DataRef
	}
	return nil
}

func (m *DataOp) GetOp() Op {
	if m != nil {
		return m.Op
	}
	return Op_APPEND
}

// Datum is the id and size of a datum's contribution to a file.
type Datum struct {
	Id   int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Size int64 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
}

func (m *Datum) Reset()                    { *m = Datum{} }
func (m *Datum) String() string            { return proto.CompactTextString(m) }
func (*Datum) ProtoMessage()               {}
func (*Datum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Datum) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Datum) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

// FileInfo is the data structure used in the fileset index for referencing the
// content of a file.
type FileInfo struct {
	// The sequence of DataOps represents the state of the file.
	DataOps []*DataOp `protobuf:"bytes,2,rep,name=data_ops,json=dataOps" json:"data_ops,omitempty"`
	// The sequence of datums that contributed to a file.
	Datums []*Datum `protobuf:"bytes,3,rep,name=datums" json:"datums,omitempty"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FileInfo) GetDataOps() []*DataOp {
	if m != nil {
		return m.DataOps
	}
	return nil
}

func (m *FileInfo) GetDatums() []*Datum {
	if m != nil {
		return m.Datums
	}
	return nil
}

func init() {
	proto.RegisterType((*DataOp)(nil), "index.DataOp")
	proto.RegisterType((*Datum)(nil), "index.Datum")
	proto.RegisterType((*FileInfo)(nil), "index.FileInfo")
	proto.RegisterEnum("index.Op", Op_name, Op_value)
}

func init() {
	proto.RegisterFile("github.com/pachyderm/pachyderm/src/server/pkg/storage/fileset/index/index.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x5f, 0x4b, 0xeb, 0x30,
	0x18, 0xc6, 0x4f, 0xd3, 0xb3, 0x9e, 0xed, 0xdd, 0xd9, 0x18, 0xb9, 0xaa, 0x5e, 0x8d, 0xe1, 0x45,
	0x75, 0xd0, 0xc2, 0xfc, 0x04, 0x6a, 0xa3, 0x0c, 0x64, 0x1d, 0x61, 0x28, 0xec, 0x46, 0xb2, 0x26,
	0xdd, 0xc2, 0xfe, 0x24, 0x24, 0xa9, 0xa8, 0x9f, 0x5e, 0xd6, 0x0c, 0xf4, 0x5a, 0xbc, 0x79, 0x79,
	0xc2, 0xfb, 0xe4, 0xf7, 0x3c, 0x24, 0x50, 0xac, 0xa5, 0xdb, 0xd4, 0xab, 0xb4, 0x54, 0xfb, 0x4c,
	0xb3, 0x72, 0xf3, 0xce, 0x85, 0xf9, 0xae, 0xac, 0x29, 0x33, 0x2b, 0xcc, 0xab, 0x30, 0x99, 0xde,
	0xae, 0x33, 0xeb, 0x94, 0x61, 0x6b, 0x91, 0x55, 0x72, 0x27, 0xac, 0x70, 0x99, 0x3c, 0x70, 0xf1,
	0xe6, 0x67, 0xaa, 0x8d, 0x72, 0x0a, 0xb7, 0x9a, 0xc3, 0xf9, 0xc3, 0xcf, 0xb8, 0xe5, 0xa6, 0x3e,
	0x6c, 0xfd, 0xf4, 0xbc, 0xd1, 0x0c, 0xa2, 0x9c, 0x39, 0x56, 0x68, 0x7c, 0x09, 0x6d, 0xce, 0x1c,
	0x7b, 0x31, 0xa2, 0x8a, 0x83, 0x61, 0x90, 0x74, 0x27, 0xfd, 0xd4, 0x3b, 0x8f, 0x06, 0x2a, 0x2a,
	0xfa, 0x8f, 0x7b, 0x81, 0xcf, 0x00, 0x29, 0x1d, 0xa3, 0x61, 0x90, 0xf4, 0x27, 0x9d, 0xd4, 0xd7,
	0x2b, 0x34, 0x45, 0x4a, 0x8f, 0xc6, 0xd0, 0xca, 0x99, 0xab, 0xf7, 0xb8, 0x0f, 0x48, 0xf2, 0x06,
	0x14, 0x52, 0x24, 0x39, 0xc6, 0xf0, 0xd7, 0xca, 0x0f, 0xd1, 0xdc, 0x0a, 0x69, 0xa3, 0x47, 0x4b,
	0x68, 0xdf, 0xcb, 0x9d, 0x98, 0x1e, 0x2a, 0x85, 0x93, 0x53, 0xbc, 0xd2, 0x36, 0x46, 0xc3, 0x30,
	0xe9, 0x4e, 0x7a, 0x27, 0xb2, 0xef, 0xe7, 0xd3, 0x0b, 0x6d, 0xf1, 0x05, 0x44, 0xfc, 0x18, 0x61,
	0xe3, 0xb0, 0xf1, 0xfd, 0xff, 0xf2, 0xd5, 0x7b, 0x7a, 0xda, 0x5d, 0x8d, 0x01, 0x15, 0x1a, 0x03,
	0x44, 0x37, 0xf3, 0x39, 0x99, 0xe5, 0x83, 0x3f, 0xb8, 0x07, 0x9d, 0xe2, 0x89, 0xd0, 0x67, 0x3a,
	0x5d, 0x90, 0x41, 0x70, 0x5c, 0xe5, 0xe4, 0x91, 0x2c, 0xc8, 0x00, 0xdd, 0x92, 0xe5, 0xdd, 0x2f,
	0x7c, 0xd4, 0x2a, 0x6a, 0xde, 0xf4, 0xfa, 0x33, 0x00, 0x00, 0xff, 0xff, 0x87, 0x62, 0x11, 0x34,
	0xf6, 0x01, 0x00, 0x00,
}
