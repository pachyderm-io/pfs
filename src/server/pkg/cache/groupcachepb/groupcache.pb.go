// Code generated by protoc-gen-go.
// source: server/pkg/cache/groupcachepb/groupcache.proto
// DO NOT EDIT!

/*
Package groupcachepb is a generated protocol buffer package.

It is generated from these files:
	server/pkg/cache/groupcachepb/groupcache.proto

It has these top-level messages:
	GetRequest
	GetResponse
*/
package groupcachepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetRequest struct {
	Group            *string `protobuf:"bytes,1,req,name=group" json:"group,omitempty"`
	Key              *string `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetRequest) GetGroup() string {
	if m != nil && m.Group != nil {
		return *m.Group
	}
	return ""
}

func (m *GetRequest) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

type GetResponse struct {
	Value            []byte   `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	MinuteQps        *float64 `protobuf:"fixed64,2,opt,name=minute_qps,json=minuteQps" json:"minute_qps,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *GetResponse) GetMinuteQps() float64 {
	if m != nil && m.MinuteQps != nil {
		return *m.MinuteQps
	}
	return 0
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "groupcachepb.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "groupcachepb.GetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for GroupCache service

type GroupCacheClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type groupCacheClient struct {
	cc *grpc.ClientConn
}

func NewGroupCacheClient(cc *grpc.ClientConn) GroupCacheClient {
	return &groupCacheClient{cc}
}

func (c *groupCacheClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/groupcachepb.GroupCache/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupCache service

type GroupCacheServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
}

func RegisterGroupCacheServer(s *grpc.Server, srv GroupCacheServer) {
	s.RegisterService(&_GroupCache_serviceDesc, srv)
}

func _GroupCache_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCacheServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupcachepb.GroupCache/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCacheServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "groupcachepb.GroupCache",
	HandlerType: (*GroupCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GroupCache_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("server/pkg/cache/groupcachepb/groupcache.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xd2, 0x2b, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x2f, 0xc8, 0x4e, 0xd7, 0x4f, 0x4e, 0x4c, 0xce, 0x48, 0xd5, 0x4f, 0x2f, 0xca,
	0x2f, 0x2d, 0x00, 0x33, 0x0b, 0x92, 0x90, 0x38, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x3c,
	0xc8, 0xd2, 0x4a, 0x26, 0x5c, 0x5c, 0xee, 0xa9, 0x25, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25,
	0x42, 0x22, 0x5c, 0xac, 0x60, 0x59, 0x09, 0x46, 0x05, 0x26, 0x0d, 0xce, 0x20, 0x08, 0x47, 0x48,
	0x80, 0x8b, 0x39, 0x3b, 0xb5, 0x52, 0x82, 0x09, 0x2c, 0x06, 0x62, 0x2a, 0x39, 0x71, 0x71, 0x83,
	0x75, 0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x82, 0xb4, 0x95, 0x25, 0xe6, 0x94, 0xa6, 0x4a, 0x30,
	0x2a, 0x30, 0x6a, 0xf0, 0x04, 0x41, 0x38, 0x42, 0xb2, 0x5c, 0x5c, 0xb9, 0x99, 0x79, 0xa5, 0x25,
	0xa9, 0xf1, 0x85, 0x05, 0xc5, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x8c, 0x41, 0x9c, 0x10, 0x91, 0xc0,
	0x82, 0x62, 0x23, 0x2f, 0x2e, 0x2e, 0x77, 0x90, 0xf1, 0xce, 0x20, 0x97, 0x08, 0xd9, 0x70, 0x31,
	0xbb, 0xa7, 0x96, 0x08, 0x49, 0xe8, 0x21, 0xbb, 0x4e, 0x0f, 0xe1, 0x34, 0x29, 0x49, 0x2c, 0x32,
	0x10, 0xeb, 0x95, 0x18, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x3a, 0x4b, 0x55, 0x04, 0x01,
	0x00, 0x00,
}
