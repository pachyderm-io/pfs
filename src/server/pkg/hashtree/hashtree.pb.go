// Code generated by protoc-gen-gogo.
// source: server/pkg/hashtree/hashtree.proto
// DO NOT EDIT!

/*
Package hashtree is a generated protocol buffer package.

It is generated from these files:
	server/pkg/hashtree/hashtree.proto

It has these top-level messages:
	FileNodeProto
	DirectoryNodeProto
	NodeProto
	HashTreeProto
*/
package hashtree

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pfs "github.com/pachyderm/pachyderm/src/client/pfs"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// FileNodeProto is a node corresponding to a file (which is also a leaf node).
type FileNodeProto struct {
	// BlockRefs are references to the file's contents in block storage.
	// Naturally, the blocks are ordered with respect to their position in the
	// file (block with initial content is first)
	BlockRefs []*pfs.BlockRef `protobuf:"bytes,3,rep,name=block_refs,json=blockRefs" json:"block_refs,omitempty"`
}

func (m *FileNodeProto) Reset()                    { *m = FileNodeProto{} }
func (m *FileNodeProto) String() string            { return proto.CompactTextString(m) }
func (*FileNodeProto) ProtoMessage()               {}
func (*FileNodeProto) Descriptor() ([]byte, []int) { return fileDescriptorHashtree, []int{0} }

func (m *FileNodeProto) GetBlockRefs() []*pfs.BlockRef {
	if m != nil {
		return m.BlockRefs
	}
	return nil
}

// DirectoryNodeProto is a node corresponding to a directory.
type DirectoryNodeProto struct {
	// Children of this directory. Note that paths are relative, so if "/foo/bar"
	// has a child "baz", that means that there is a file at "/foo/bar/baz".
	//
	// 'Children' is ordered alphabetically, to quickly check if a new file is
	// overwriting an existing one.
	Children []string `protobuf:"bytes,3,rep,name=children" json:"children,omitempty"`
}

func (m *DirectoryNodeProto) Reset()                    { *m = DirectoryNodeProto{} }
func (m *DirectoryNodeProto) String() string            { return proto.CompactTextString(m) }
func (*DirectoryNodeProto) ProtoMessage()               {}
func (*DirectoryNodeProto) Descriptor() ([]byte, []int) { return fileDescriptorHashtree, []int{1} }

func (m *DirectoryNodeProto) GetChildren() []string {
	if m != nil {
		return m.Children
	}
	return nil
}

// NodeProto is a node in the file tree (either a file or a directory)
type NodeProto struct {
	// Name is the name (not path) of the file/directory (e.g. /lib).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Hash is a hash of the node's name and contents (which includes the
	// BlockRefs of a file and the Children of a directory). This can be used to
	// detect if the name or contents have changed between versions.
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// subtree_size is the of the subtree under node; i.e. if this is a directory,
	// subtree_size includes all children.
	SubtreeSize int64 `protobuf:"varint,3,opt,name=subtree_size,json=subtreeSize,proto3" json:"subtree_size,omitempty"`
	// Exactly one of the following fields must be set. The type of this node will
	// be determined by which field is set.
	FileNode *FileNodeProto      `protobuf:"bytes,4,opt,name=file_node,json=fileNode" json:"file_node,omitempty"`
	DirNode  *DirectoryNodeProto `protobuf:"bytes,5,opt,name=dir_node,json=dirNode" json:"dir_node,omitempty"`
}

func (m *NodeProto) Reset()                    { *m = NodeProto{} }
func (m *NodeProto) String() string            { return proto.CompactTextString(m) }
func (*NodeProto) ProtoMessage()               {}
func (*NodeProto) Descriptor() ([]byte, []int) { return fileDescriptorHashtree, []int{2} }

func (m *NodeProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeProto) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *NodeProto) GetSubtreeSize() int64 {
	if m != nil {
		return m.SubtreeSize
	}
	return 0
}

func (m *NodeProto) GetFileNode() *FileNodeProto {
	if m != nil {
		return m.FileNode
	}
	return nil
}

func (m *NodeProto) GetDirNode() *DirectoryNodeProto {
	if m != nil {
		return m.DirNode
	}
	return nil
}

// HashTreeProto is a tree corresponding to the complete file contents of a
// pachyderm repo at a given commit (based on a Merkle Tree). We store one
// HashTree for every PFS commit.
type HashTreeProto struct {
	// Version is an arbitrary version number, set by the corresponding library
	// in hashtree.go.  This ensures that if the hash function used to create
	// these trees is changed, we won't run into errors when deserializing old
	// trees. The current version is 1.
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Fs maps each node's path to the NodeProto with that node's details.
	// See "Potential Optimizations" at the end for a compression scheme that
	// could be useful if this map gets too large.
	//
	// Note that the key must end in "/" if an only if the value has .dir_node set
	// (i.e. iff the path points to a directory).
	Fs map[string]*NodeProto `protobuf:"bytes,2,rep,name=fs" json:"fs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HashTreeProto) Reset()                    { *m = HashTreeProto{} }
func (m *HashTreeProto) String() string            { return proto.CompactTextString(m) }
func (*HashTreeProto) ProtoMessage()               {}
func (*HashTreeProto) Descriptor() ([]byte, []int) { return fileDescriptorHashtree, []int{3} }

func (m *HashTreeProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *HashTreeProto) GetFs() map[string]*NodeProto {
	if m != nil {
		return m.Fs
	}
	return nil
}

func init() {
	proto.RegisterType((*FileNodeProto)(nil), "FileNodeProto")
	proto.RegisterType((*DirectoryNodeProto)(nil), "DirectoryNodeProto")
	proto.RegisterType((*NodeProto)(nil), "NodeProto")
	proto.RegisterType((*HashTreeProto)(nil), "HashTreeProto")
}

func init() { proto.RegisterFile("server/pkg/hashtree/hashtree.proto", fileDescriptorHashtree) }

var fileDescriptorHashtree = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x51, 0x4f, 0x4b, 0xfb, 0x40,
	0x14, 0x64, 0x93, 0xf6, 0xd7, 0xe6, 0xa5, 0xfd, 0x21, 0xab, 0x48, 0xe8, 0x29, 0xe6, 0x20, 0x01,
	0x65, 0x2b, 0xf5, 0x22, 0x82, 0x07, 0x45, 0x8b, 0x27, 0x91, 0xd5, 0x7b, 0xc9, 0x9f, 0x17, 0xb3,
	0x34, 0x66, 0xcb, 0x6e, 0x5a, 0x68, 0x3f, 0x87, 0xdf, 0xc4, 0x2f, 0x28, 0xbb, 0x8d, 0x2d, 0xc5,
	0x43, 0x60, 0x66, 0xf2, 0xde, 0x63, 0x66, 0x16, 0x22, 0x8d, 0x6a, 0x85, 0x6a, 0xbc, 0x98, 0x7f,
	0x8c, 0xcb, 0x44, 0x97, 0x8d, 0x42, 0xdc, 0x01, 0xb6, 0x50, 0xb2, 0x91, 0xa3, 0x93, 0xac, 0x12,
	0x58, 0x37, 0xe3, 0x45, 0xa1, 0xcd, 0xb7, 0x55, 0xa3, 0x3b, 0x18, 0x4e, 0x45, 0x85, 0x2f, 0x32,
	0xc7, 0x57, 0x23, 0xd0, 0x4b, 0x80, 0xb4, 0x92, 0xd9, 0x7c, 0xa6, 0xb0, 0xd0, 0x81, 0x1b, 0xba,
	0xb1, 0x3f, 0x19, 0x32, 0xb3, 0xf0, 0x60, 0x64, 0x8e, 0x05, 0xf7, 0xd2, 0x16, 0xe9, 0xe8, 0x0a,
	0xe8, 0xa3, 0x50, 0x98, 0x35, 0x52, 0xad, 0xf7, 0x37, 0x46, 0xd0, 0xcf, 0x4a, 0x51, 0xe5, 0x0a,
	0x6b, 0x7b, 0xc1, 0xe3, 0x3b, 0x1e, 0x7d, 0x13, 0xf0, 0xf6, 0x93, 0x14, 0x3a, 0x75, 0xf2, 0x89,
	0x01, 0x09, 0x49, 0xec, 0x71, 0x8b, 0x8d, 0x66, 0xac, 0x07, 0x4e, 0x48, 0xe2, 0x01, 0xb7, 0x98,
	0x9e, 0xc1, 0x40, 0x2f, 0x53, 0x93, 0x66, 0xa6, 0xc5, 0x06, 0x03, 0x37, 0x24, 0xb1, 0xcb, 0xfd,
	0x56, 0x7b, 0x13, 0x1b, 0xa4, 0x17, 0xe0, 0x15, 0xa2, 0xc2, 0x59, 0x2d, 0x73, 0x0c, 0x3a, 0x21,
	0x89, 0xfd, 0xc9, 0x7f, 0x76, 0x90, 0x8d, 0xf7, 0x8b, 0x96, 0x52, 0x06, 0xfd, 0x5c, 0xa8, 0xed,
	0x6c, 0xd7, 0xce, 0x1e, 0xb3, 0xbf, 0x41, 0x78, 0x2f, 0x17, 0xca, 0xb0, 0xe8, 0x8b, 0xc0, 0xf0,
	0x39, 0xd1, 0xe5, 0xbb, 0xc2, 0xd6, 0x79, 0x00, 0xbd, 0x15, 0x2a, 0x2d, 0x64, 0x6d, 0xcd, 0x77,
	0xf9, 0x2f, 0xa5, 0xe7, 0xe0, 0x14, 0x3a, 0x70, 0x6c, 0x73, 0xa7, 0xec, 0x60, 0x8b, 0x4d, 0xf5,
	0x53, 0xdd, 0xa8, 0x35, 0x77, 0x0a, 0x3d, 0xba, 0x87, 0x5e, 0x4b, 0xe9, 0x11, 0xb8, 0x73, 0x5c,
	0xb7, 0x2d, 0x18, 0x48, 0x43, 0xe8, 0xae, 0x92, 0x6a, 0x89, 0xb6, 0x05, 0x7f, 0x02, 0x6c, 0x6f,
	0x6a, 0xfb, 0xe3, 0xd6, 0xb9, 0x21, 0xe9, 0x3f, 0xfb, 0x88, 0xd7, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xf9, 0xdc, 0x35, 0x4a, 0x00, 0x02, 0x00, 0x00,
}
