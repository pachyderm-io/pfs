package load

import (
	"github.com/pachyderm/pachyderm/v2/src/client"
)

// CommitsSpec configures the commits generated by Commits() during fuzzing.
type CommitsSpec struct {
	// Count specifies the number of StartCommit/FinishCommit pairs that are
	// executed.
	Count int `yaml:"count,omitempty"`

	// OperationsSpec specifies the operations (e.g. PutFile, DeleteFile) that
	// will be performed instead of each StartCommit/FinishCommit pair
	OperationsSpecs []*OperationsSpec `yaml:"operations,omitempty"`
	ThroughputSpec  *ThroughputSpec   `yaml:"throughput,omitempty"`
	CancelSpec      *CancelSpec       `yaml:"cancel,omitempty"`
	ValidatorSpec   *ValidatorSpec    `yaml:"validator,omitempty"`
	FileSourceSpecs []*FileSourceSpec `yaml:"fileSources,omitempty"`
}

// Commits fuzz-tests pachd by performing several StartCommit+work+FinishCommit
// operations with 'pachClient', and using Operations('spec.OperationsSpecs[i]')
// to fuzz the work performed inside of each operation.
func Commits(pachClient *client.APIClient, repo, branch string, spec *CommitsSpec) error {
	env := NewEnv(NewPachClient(pachClient), spec)
	for i := 0; i < spec.Count; i++ {
		commit, err := pachClient.StartCommit(repo, branch)
		if err != nil {
			return err
		}
		for _, operationsSpec := range spec.OperationsSpecs {
			if err := Operations(env, repo, commit.ID, operationsSpec); err != nil {
				return err
			}
		}
		if err := pachClient.FinishCommit(repo, commit.ID); err != nil {
			return err
		}
		validator := env.Validator()
		if validator != nil {
			if err := validator.Validate(env.Client(), repo, commit.ID); err != nil {
				return err
			}
		}
	}
	return nil
}
