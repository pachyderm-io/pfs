// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	debug "github.com/pachyderm/pachyderm/v2/src/debug"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// DebugClient is an autogenerated mock type for the DebugClient type
type DebugClient struct {
	mock.Mock
}

// Binary provides a mock function with given fields: ctx, in, opts
func (_m *DebugClient) Binary(ctx context.Context, in *debug.BinaryRequest, opts ...grpc.CallOption) (debug.Debug_BinaryClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 debug.Debug_BinaryClient
	if rf, ok := ret.Get(0).(func(context.Context, *debug.BinaryRequest, ...grpc.CallOption) debug.Debug_BinaryClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(debug.Debug_BinaryClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *debug.BinaryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dump provides a mock function with given fields: ctx, in, opts
func (_m *DebugClient) Dump(ctx context.Context, in *debug.DumpRequest, opts ...grpc.CallOption) (debug.Debug_DumpClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 debug.Debug_DumpClient
	if rf, ok := ret.Get(0).(func(context.Context, *debug.DumpRequest, ...grpc.CallOption) debug.Debug_DumpClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(debug.Debug_DumpClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *debug.DumpRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Profile provides a mock function with given fields: ctx, in, opts
func (_m *DebugClient) Profile(ctx context.Context, in *debug.ProfileRequest, opts ...grpc.CallOption) (debug.Debug_ProfileClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 debug.Debug_ProfileClient
	if rf, ok := ret.Get(0).(func(context.Context, *debug.ProfileRequest, ...grpc.CallOption) debug.Debug_ProfileClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(debug.Debug_ProfileClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *debug.ProfileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
