// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	license "github.com/pachyderm/pachyderm/v2/src/license"
	mock "github.com/stretchr/testify/mock"
)

// APIServer is an autogenerated mock type for the APIServer type
type APIServer struct {
	mock.Mock
}

// Activate provides a mock function with given fields: _a0, _a1
func (_m *APIServer) Activate(_a0 context.Context, _a1 *license.ActivateRequest) (*license.ActivateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *license.ActivateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *license.ActivateRequest) *license.ActivateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*license.ActivateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *license.ActivateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddCluster provides a mock function with given fields: _a0, _a1
func (_m *APIServer) AddCluster(_a0 context.Context, _a1 *license.AddClusterRequest) (*license.AddClusterResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *license.AddClusterResponse
	if rf, ok := ret.Get(0).(func(context.Context, *license.AddClusterRequest) *license.AddClusterResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*license.AddClusterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *license.AddClusterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAll provides a mock function with given fields: _a0, _a1
func (_m *APIServer) DeleteAll(_a0 context.Context, _a1 *license.DeleteAllRequest) (*license.DeleteAllResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *license.DeleteAllResponse
	if rf, ok := ret.Get(0).(func(context.Context, *license.DeleteAllRequest) *license.DeleteAllResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*license.DeleteAllResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *license.DeleteAllRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: _a0, _a1
func (_m *APIServer) DeleteCluster(_a0 context.Context, _a1 *license.DeleteClusterRequest) (*license.DeleteClusterResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *license.DeleteClusterResponse
	if rf, ok := ret.Get(0).(func(context.Context, *license.DeleteClusterRequest) *license.DeleteClusterResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*license.DeleteClusterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *license.DeleteClusterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActivationCode provides a mock function with given fields: _a0, _a1
func (_m *APIServer) GetActivationCode(_a0 context.Context, _a1 *license.GetActivationCodeRequest) (*license.GetActivationCodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *license.GetActivationCodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *license.GetActivationCodeRequest) *license.GetActivationCodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*license.GetActivationCodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *license.GetActivationCodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Heartbeat provides a mock function with given fields: _a0, _a1
func (_m *APIServer) Heartbeat(_a0 context.Context, _a1 *license.HeartbeatRequest) (*license.HeartbeatResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *license.HeartbeatResponse
	if rf, ok := ret.Get(0).(func(context.Context, *license.HeartbeatRequest) *license.HeartbeatResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*license.HeartbeatResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *license.HeartbeatRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusters provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ListClusters(_a0 context.Context, _a1 *license.ListClustersRequest) (*license.ListClustersResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *license.ListClustersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *license.ListClustersRequest) *license.ListClustersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*license.ListClustersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *license.ListClustersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCluster provides a mock function with given fields: _a0, _a1
func (_m *APIServer) UpdateCluster(_a0 context.Context, _a1 *license.UpdateClusterRequest) (*license.UpdateClusterResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *license.UpdateClusterResponse
	if rf, ok := ret.Get(0).(func(context.Context, *license.UpdateClusterRequest) *license.UpdateClusterResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*license.UpdateClusterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *license.UpdateClusterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
