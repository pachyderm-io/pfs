// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	license "github.com/pachyderm/pachyderm/v2/src/license"

	mock "github.com/stretchr/testify/mock"
)

// APIClient is an autogenerated mock type for the APIClient type
type APIClient struct {
	mock.Mock
}

// Activate provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) Activate(ctx context.Context, in *license.ActivateRequest, opts ...grpc.CallOption) (*license.ActivateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *license.ActivateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *license.ActivateRequest, ...grpc.CallOption) *license.ActivateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*license.ActivateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *license.ActivateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddCluster provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) AddCluster(ctx context.Context, in *license.AddClusterRequest, opts ...grpc.CallOption) (*license.AddClusterResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *license.AddClusterResponse
	if rf, ok := ret.Get(0).(func(context.Context, *license.AddClusterRequest, ...grpc.CallOption) *license.AddClusterResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*license.AddClusterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *license.AddClusterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAll provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) DeleteAll(ctx context.Context, in *license.DeleteAllRequest, opts ...grpc.CallOption) (*license.DeleteAllResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *license.DeleteAllResponse
	if rf, ok := ret.Get(0).(func(context.Context, *license.DeleteAllRequest, ...grpc.CallOption) *license.DeleteAllResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*license.DeleteAllResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *license.DeleteAllRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) DeleteCluster(ctx context.Context, in *license.DeleteClusterRequest, opts ...grpc.CallOption) (*license.DeleteClusterResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *license.DeleteClusterResponse
	if rf, ok := ret.Get(0).(func(context.Context, *license.DeleteClusterRequest, ...grpc.CallOption) *license.DeleteClusterResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*license.DeleteClusterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *license.DeleteClusterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActivationCode provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) GetActivationCode(ctx context.Context, in *license.GetActivationCodeRequest, opts ...grpc.CallOption) (*license.GetActivationCodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *license.GetActivationCodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *license.GetActivationCodeRequest, ...grpc.CallOption) *license.GetActivationCodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*license.GetActivationCodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *license.GetActivationCodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Heartbeat provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) Heartbeat(ctx context.Context, in *license.HeartbeatRequest, opts ...grpc.CallOption) (*license.HeartbeatResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *license.HeartbeatResponse
	if rf, ok := ret.Get(0).(func(context.Context, *license.HeartbeatRequest, ...grpc.CallOption) *license.HeartbeatResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*license.HeartbeatResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *license.HeartbeatRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusters provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) ListClusters(ctx context.Context, in *license.ListClustersRequest, opts ...grpc.CallOption) (*license.ListClustersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *license.ListClustersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *license.ListClustersRequest, ...grpc.CallOption) *license.ListClustersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*license.ListClustersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *license.ListClustersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCluster provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) UpdateCluster(ctx context.Context, in *license.UpdateClusterRequest, opts ...grpc.CallOption) (*license.UpdateClusterResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *license.UpdateClusterResponse
	if rf, ok := ret.Get(0).(func(context.Context, *license.UpdateClusterRequest, ...grpc.CallOption) *license.UpdateClusterResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*license.UpdateClusterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *license.UpdateClusterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
