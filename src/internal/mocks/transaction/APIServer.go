// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	transaction "github.com/pachyderm/pachyderm/v2/src/transaction"
	mock "github.com/stretchr/testify/mock"

	types "github.com/gogo/protobuf/types"
)

// APIServer is an autogenerated mock type for the APIServer type
type APIServer struct {
	mock.Mock
}

// BatchTransaction provides a mock function with given fields: _a0, _a1
func (_m *APIServer) BatchTransaction(_a0 context.Context, _a1 *transaction.BatchTransactionRequest) (*transaction.TransactionInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *transaction.TransactionInfo
	if rf, ok := ret.Get(0).(func(context.Context, *transaction.BatchTransactionRequest) *transaction.TransactionInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.TransactionInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *transaction.BatchTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAll provides a mock function with given fields: _a0, _a1
func (_m *APIServer) DeleteAll(_a0 context.Context, _a1 *transaction.DeleteAllRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *transaction.DeleteAllRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *transaction.DeleteAllRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransaction provides a mock function with given fields: _a0, _a1
func (_m *APIServer) DeleteTransaction(_a0 context.Context, _a1 *transaction.DeleteTransactionRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *transaction.DeleteTransactionRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *transaction.DeleteTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinishTransaction provides a mock function with given fields: _a0, _a1
func (_m *APIServer) FinishTransaction(_a0 context.Context, _a1 *transaction.FinishTransactionRequest) (*transaction.TransactionInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *transaction.TransactionInfo
	if rf, ok := ret.Get(0).(func(context.Context, *transaction.FinishTransactionRequest) *transaction.TransactionInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.TransactionInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *transaction.FinishTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InspectTransaction provides a mock function with given fields: _a0, _a1
func (_m *APIServer) InspectTransaction(_a0 context.Context, _a1 *transaction.InspectTransactionRequest) (*transaction.TransactionInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *transaction.TransactionInfo
	if rf, ok := ret.Get(0).(func(context.Context, *transaction.InspectTransactionRequest) *transaction.TransactionInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.TransactionInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *transaction.InspectTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTransaction provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ListTransaction(_a0 context.Context, _a1 *transaction.ListTransactionRequest) (*transaction.TransactionInfos, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *transaction.TransactionInfos
	if rf, ok := ret.Get(0).(func(context.Context, *transaction.ListTransactionRequest) *transaction.TransactionInfos); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.TransactionInfos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *transaction.ListTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartTransaction provides a mock function with given fields: _a0, _a1
func (_m *APIServer) StartTransaction(_a0 context.Context, _a1 *transaction.StartTransactionRequest) (*transaction.Transaction, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *transaction.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, *transaction.StartTransactionRequest) *transaction.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *transaction.StartTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
