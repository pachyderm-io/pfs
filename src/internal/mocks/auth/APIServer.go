// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/pachyderm/pachyderm/v2/src/auth"

	mock "github.com/stretchr/testify/mock"
)

// APIServer is an autogenerated mock type for the APIServer type
type APIServer struct {
	mock.Mock
}

// Activate provides a mock function with given fields: _a0, _a1
func (_m *APIServer) Activate(_a0 context.Context, _a1 *auth.ActivateRequest) (*auth.ActivateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.ActivateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ActivateRequest) *auth.ActivateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.ActivateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.ActivateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Authenticate provides a mock function with given fields: _a0, _a1
func (_m *APIServer) Authenticate(_a0 context.Context, _a1 *auth.AuthenticateRequest) (*auth.AuthenticateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.AuthenticateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.AuthenticateRequest) *auth.AuthenticateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.AuthenticateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.AuthenticateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Authorize provides a mock function with given fields: _a0, _a1
func (_m *APIServer) Authorize(_a0 context.Context, _a1 *auth.AuthorizeRequest) (*auth.AuthorizeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.AuthorizeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.AuthorizeRequest) *auth.AuthorizeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.AuthorizeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.AuthorizeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deactivate provides a mock function with given fields: _a0, _a1
func (_m *APIServer) Deactivate(_a0 context.Context, _a1 *auth.DeactivateRequest) (*auth.DeactivateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.DeactivateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.DeactivateRequest) *auth.DeactivateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.DeactivateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.DeactivateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtendAuthToken provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ExtendAuthToken(_a0 context.Context, _a1 *auth.ExtendAuthTokenRequest) (*auth.ExtendAuthTokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.ExtendAuthTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ExtendAuthTokenRequest) *auth.ExtendAuthTokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.ExtendAuthTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.ExtendAuthTokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractAuthTokens provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ExtractAuthTokens(_a0 context.Context, _a1 *auth.ExtractAuthTokensRequest) (*auth.ExtractAuthTokensResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.ExtractAuthTokensResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ExtractAuthTokensRequest) *auth.ExtractAuthTokensResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.ExtractAuthTokensResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.ExtractAuthTokensRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthToken provides a mock function with given fields: _a0, _a1
func (_m *APIServer) GetAuthToken(_a0 context.Context, _a1 *auth.GetAuthTokenRequest) (*auth.GetAuthTokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.GetAuthTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.GetAuthTokenRequest) *auth.GetAuthTokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.GetAuthTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.GetAuthTokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfiguration provides a mock function with given fields: _a0, _a1
func (_m *APIServer) GetConfiguration(_a0 context.Context, _a1 *auth.GetConfigurationRequest) (*auth.GetConfigurationResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.GetConfigurationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.GetConfigurationRequest) *auth.GetConfigurationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.GetConfigurationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.GetConfigurationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroups provides a mock function with given fields: _a0, _a1
func (_m *APIServer) GetGroups(_a0 context.Context, _a1 *auth.GetGroupsRequest) (*auth.GetGroupsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.GetGroupsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.GetGroupsRequest) *auth.GetGroupsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.GetGroupsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.GetGroupsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOIDCLogin provides a mock function with given fields: _a0, _a1
func (_m *APIServer) GetOIDCLogin(_a0 context.Context, _a1 *auth.GetOIDCLoginRequest) (*auth.GetOIDCLoginResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.GetOIDCLoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.GetOIDCLoginRequest) *auth.GetOIDCLoginResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.GetOIDCLoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.GetOIDCLoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRobotToken provides a mock function with given fields: _a0, _a1
func (_m *APIServer) GetRobotToken(_a0 context.Context, _a1 *auth.GetRobotTokenRequest) (*auth.GetRobotTokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.GetRobotTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.GetRobotTokenRequest) *auth.GetRobotTokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.GetRobotTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.GetRobotTokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleBinding provides a mock function with given fields: _a0, _a1
func (_m *APIServer) GetRoleBinding(_a0 context.Context, _a1 *auth.GetRoleBindingRequest) (*auth.GetRoleBindingResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.GetRoleBindingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.GetRoleBindingRequest) *auth.GetRoleBindingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.GetRoleBindingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.GetRoleBindingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: _a0, _a1
func (_m *APIServer) GetUsers(_a0 context.Context, _a1 *auth.GetUsersRequest) (*auth.GetUsersResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.GetUsersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.GetUsersRequest) *auth.GetUsersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.GetUsersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.GetUsersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyMembers provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ModifyMembers(_a0 context.Context, _a1 *auth.ModifyMembersRequest) (*auth.ModifyMembersResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.ModifyMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ModifyMembersRequest) *auth.ModifyMembersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.ModifyMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.ModifyMembersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyRoleBinding provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ModifyRoleBinding(_a0 context.Context, _a1 *auth.ModifyRoleBindingRequest) (*auth.ModifyRoleBindingResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.ModifyRoleBindingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ModifyRoleBindingRequest) *auth.ModifyRoleBindingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.ModifyRoleBindingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.ModifyRoleBindingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreAuthToken provides a mock function with given fields: _a0, _a1
func (_m *APIServer) RestoreAuthToken(_a0 context.Context, _a1 *auth.RestoreAuthTokenRequest) (*auth.RestoreAuthTokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.RestoreAuthTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.RestoreAuthTokenRequest) *auth.RestoreAuthTokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.RestoreAuthTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.RestoreAuthTokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeAuthToken provides a mock function with given fields: _a0, _a1
func (_m *APIServer) RevokeAuthToken(_a0 context.Context, _a1 *auth.RevokeAuthTokenRequest) (*auth.RevokeAuthTokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.RevokeAuthTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.RevokeAuthTokenRequest) *auth.RevokeAuthTokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.RevokeAuthTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.RevokeAuthTokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetConfiguration provides a mock function with given fields: _a0, _a1
func (_m *APIServer) SetConfiguration(_a0 context.Context, _a1 *auth.SetConfigurationRequest) (*auth.SetConfigurationResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.SetConfigurationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.SetConfigurationRequest) *auth.SetConfigurationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.SetConfigurationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.SetConfigurationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetGroupsForUser provides a mock function with given fields: _a0, _a1
func (_m *APIServer) SetGroupsForUser(_a0 context.Context, _a1 *auth.SetGroupsForUserRequest) (*auth.SetGroupsForUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.SetGroupsForUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.SetGroupsForUserRequest) *auth.SetGroupsForUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.SetGroupsForUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.SetGroupsForUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WhoAmI provides a mock function with given fields: _a0, _a1
func (_m *APIServer) WhoAmI(_a0 context.Context, _a1 *auth.WhoAmIRequest) (*auth.WhoAmIResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *auth.WhoAmIResponse
	if rf, ok := ret.Get(0).(func(context.Context, *auth.WhoAmIRequest) *auth.WhoAmIResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.WhoAmIResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.WhoAmIRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
