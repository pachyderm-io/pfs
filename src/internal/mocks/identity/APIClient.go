// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	identity "github.com/pachyderm/pachyderm/v2/src/identity"

	mock "github.com/stretchr/testify/mock"
)

// APIClient is an autogenerated mock type for the APIClient type
type APIClient struct {
	mock.Mock
}

// CreateIDPConnector provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) CreateIDPConnector(ctx context.Context, in *identity.CreateIDPConnectorRequest, opts ...grpc.CallOption) (*identity.CreateIDPConnectorResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *identity.CreateIDPConnectorResponse
	if rf, ok := ret.Get(0).(func(context.Context, *identity.CreateIDPConnectorRequest, ...grpc.CallOption) *identity.CreateIDPConnectorResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.CreateIDPConnectorResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *identity.CreateIDPConnectorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOIDCClient provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) CreateOIDCClient(ctx context.Context, in *identity.CreateOIDCClientRequest, opts ...grpc.CallOption) (*identity.CreateOIDCClientResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *identity.CreateOIDCClientResponse
	if rf, ok := ret.Get(0).(func(context.Context, *identity.CreateOIDCClientRequest, ...grpc.CallOption) *identity.CreateOIDCClientResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.CreateOIDCClientResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *identity.CreateOIDCClientRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAll provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) DeleteAll(ctx context.Context, in *identity.DeleteAllRequest, opts ...grpc.CallOption) (*identity.DeleteAllResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *identity.DeleteAllResponse
	if rf, ok := ret.Get(0).(func(context.Context, *identity.DeleteAllRequest, ...grpc.CallOption) *identity.DeleteAllResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.DeleteAllResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *identity.DeleteAllRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIDPConnector provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) DeleteIDPConnector(ctx context.Context, in *identity.DeleteIDPConnectorRequest, opts ...grpc.CallOption) (*identity.DeleteIDPConnectorResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *identity.DeleteIDPConnectorResponse
	if rf, ok := ret.Get(0).(func(context.Context, *identity.DeleteIDPConnectorRequest, ...grpc.CallOption) *identity.DeleteIDPConnectorResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.DeleteIDPConnectorResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *identity.DeleteIDPConnectorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOIDCClient provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) DeleteOIDCClient(ctx context.Context, in *identity.DeleteOIDCClientRequest, opts ...grpc.CallOption) (*identity.DeleteOIDCClientResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *identity.DeleteOIDCClientResponse
	if rf, ok := ret.Get(0).(func(context.Context, *identity.DeleteOIDCClientRequest, ...grpc.CallOption) *identity.DeleteOIDCClientResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.DeleteOIDCClientResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *identity.DeleteOIDCClientRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIDPConnector provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) GetIDPConnector(ctx context.Context, in *identity.GetIDPConnectorRequest, opts ...grpc.CallOption) (*identity.GetIDPConnectorResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *identity.GetIDPConnectorResponse
	if rf, ok := ret.Get(0).(func(context.Context, *identity.GetIDPConnectorRequest, ...grpc.CallOption) *identity.GetIDPConnectorResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.GetIDPConnectorResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *identity.GetIDPConnectorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentityServerConfig provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) GetIdentityServerConfig(ctx context.Context, in *identity.GetIdentityServerConfigRequest, opts ...grpc.CallOption) (*identity.GetIdentityServerConfigResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *identity.GetIdentityServerConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, *identity.GetIdentityServerConfigRequest, ...grpc.CallOption) *identity.GetIdentityServerConfigResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.GetIdentityServerConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *identity.GetIdentityServerConfigRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOIDCClient provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) GetOIDCClient(ctx context.Context, in *identity.GetOIDCClientRequest, opts ...grpc.CallOption) (*identity.GetOIDCClientResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *identity.GetOIDCClientResponse
	if rf, ok := ret.Get(0).(func(context.Context, *identity.GetOIDCClientRequest, ...grpc.CallOption) *identity.GetOIDCClientResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.GetOIDCClientResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *identity.GetOIDCClientRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIDPConnectors provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) ListIDPConnectors(ctx context.Context, in *identity.ListIDPConnectorsRequest, opts ...grpc.CallOption) (*identity.ListIDPConnectorsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *identity.ListIDPConnectorsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *identity.ListIDPConnectorsRequest, ...grpc.CallOption) *identity.ListIDPConnectorsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.ListIDPConnectorsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *identity.ListIDPConnectorsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOIDCClients provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) ListOIDCClients(ctx context.Context, in *identity.ListOIDCClientsRequest, opts ...grpc.CallOption) (*identity.ListOIDCClientsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *identity.ListOIDCClientsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *identity.ListOIDCClientsRequest, ...grpc.CallOption) *identity.ListOIDCClientsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.ListOIDCClientsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *identity.ListOIDCClientsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetIdentityServerConfig provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) SetIdentityServerConfig(ctx context.Context, in *identity.SetIdentityServerConfigRequest, opts ...grpc.CallOption) (*identity.SetIdentityServerConfigResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *identity.SetIdentityServerConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, *identity.SetIdentityServerConfigRequest, ...grpc.CallOption) *identity.SetIdentityServerConfigResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.SetIdentityServerConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *identity.SetIdentityServerConfigRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIDPConnector provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) UpdateIDPConnector(ctx context.Context, in *identity.UpdateIDPConnectorRequest, opts ...grpc.CallOption) (*identity.UpdateIDPConnectorResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *identity.UpdateIDPConnectorResponse
	if rf, ok := ret.Get(0).(func(context.Context, *identity.UpdateIDPConnectorRequest, ...grpc.CallOption) *identity.UpdateIDPConnectorResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.UpdateIDPConnectorResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *identity.UpdateIDPConnectorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOIDCClient provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) UpdateOIDCClient(ctx context.Context, in *identity.UpdateOIDCClientRequest, opts ...grpc.CallOption) (*identity.UpdateOIDCClientResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *identity.UpdateOIDCClientResponse
	if rf, ok := ret.Get(0).(func(context.Context, *identity.UpdateOIDCClientRequest, ...grpc.CallOption) *identity.UpdateOIDCClientResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.UpdateOIDCClientResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *identity.UpdateOIDCClientRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
