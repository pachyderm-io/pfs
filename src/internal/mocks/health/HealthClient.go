// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	types "github.com/gogo/protobuf/types"
)

// HealthClient is an autogenerated mock type for the HealthClient type
type HealthClient struct {
	mock.Mock
}

// Health provides a mock function with given fields: ctx, in, opts
func (_m *HealthClient) Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *types.Empty, ...grpc.CallOption) *types.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
