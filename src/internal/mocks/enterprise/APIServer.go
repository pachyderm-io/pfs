// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	enterprise "github.com/pachyderm/pachyderm/v2/src/enterprise"
	mock "github.com/stretchr/testify/mock"
)

// APIServer is an autogenerated mock type for the APIServer type
type APIServer struct {
	mock.Mock
}

// Activate provides a mock function with given fields: _a0, _a1
func (_m *APIServer) Activate(_a0 context.Context, _a1 *enterprise.ActivateRequest) (*enterprise.ActivateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *enterprise.ActivateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *enterprise.ActivateRequest) *enterprise.ActivateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*enterprise.ActivateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *enterprise.ActivateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deactivate provides a mock function with given fields: _a0, _a1
func (_m *APIServer) Deactivate(_a0 context.Context, _a1 *enterprise.DeactivateRequest) (*enterprise.DeactivateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *enterprise.DeactivateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *enterprise.DeactivateRequest) *enterprise.DeactivateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*enterprise.DeactivateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *enterprise.DeactivateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActivationCode provides a mock function with given fields: _a0, _a1
func (_m *APIServer) GetActivationCode(_a0 context.Context, _a1 *enterprise.GetActivationCodeRequest) (*enterprise.GetActivationCodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *enterprise.GetActivationCodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *enterprise.GetActivationCodeRequest) *enterprise.GetActivationCodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*enterprise.GetActivationCodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *enterprise.GetActivationCodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetState provides a mock function with given fields: _a0, _a1
func (_m *APIServer) GetState(_a0 context.Context, _a1 *enterprise.GetStateRequest) (*enterprise.GetStateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *enterprise.GetStateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *enterprise.GetStateRequest) *enterprise.GetStateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*enterprise.GetStateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *enterprise.GetStateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Heartbeat provides a mock function with given fields: _a0, _a1
func (_m *APIServer) Heartbeat(_a0 context.Context, _a1 *enterprise.HeartbeatRequest) (*enterprise.HeartbeatResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *enterprise.HeartbeatResponse
	if rf, ok := ret.Get(0).(func(context.Context, *enterprise.HeartbeatRequest) *enterprise.HeartbeatResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*enterprise.HeartbeatResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *enterprise.HeartbeatRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
