// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	pps "github.com/pachyderm/pachyderm/v2/src/pps"
	mock "github.com/stretchr/testify/mock"

	types "github.com/gogo/protobuf/types"
)

// APIServer is an autogenerated mock type for the APIServer type
type APIServer struct {
	mock.Mock
}

// ActivateAuth provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ActivateAuth(_a0 context.Context, _a1 *pps.ActivateAuthRequest) (*pps.ActivateAuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pps.ActivateAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pps.ActivateAuthRequest) *pps.ActivateAuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pps.ActivateAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.ActivateAuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJob provides a mock function with given fields: _a0, _a1
func (_m *APIServer) CreateJob(_a0 context.Context, _a1 *pps.CreateJobRequest) (*pps.Job, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pps.Job
	if rf, ok := ret.Get(0).(func(context.Context, *pps.CreateJobRequest) *pps.Job); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pps.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.CreateJobRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePipeline provides a mock function with given fields: _a0, _a1
func (_m *APIServer) CreatePipeline(_a0 context.Context, _a1 *pps.CreatePipelineRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.CreatePipelineRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.CreatePipelineRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecret provides a mock function with given fields: _a0, _a1
func (_m *APIServer) CreateSecret(_a0 context.Context, _a1 *pps.CreateSecretRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.CreateSecretRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.CreateSecretRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAll provides a mock function with given fields: _a0, _a1
func (_m *APIServer) DeleteAll(_a0 context.Context, _a1 *types.Empty) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *types.Empty) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJob provides a mock function with given fields: _a0, _a1
func (_m *APIServer) DeleteJob(_a0 context.Context, _a1 *pps.DeleteJobRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.DeleteJobRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.DeleteJobRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePipeline provides a mock function with given fields: _a0, _a1
func (_m *APIServer) DeletePipeline(_a0 context.Context, _a1 *pps.DeletePipelineRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.DeletePipelineRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.DeletePipelineRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSecret provides a mock function with given fields: _a0, _a1
func (_m *APIServer) DeleteSecret(_a0 context.Context, _a1 *pps.DeleteSecretRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.DeleteSecretRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.DeleteSecretRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlushJob provides a mock function with given fields: _a0, _a1
func (_m *APIServer) FlushJob(_a0 *pps.FlushJobRequest, _a1 pps.API_FlushJobServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pps.FlushJobRequest, pps.API_FlushJobServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLogs provides a mock function with given fields: _a0, _a1
func (_m *APIServer) GetLogs(_a0 *pps.GetLogsRequest, _a1 pps.API_GetLogsServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pps.GetLogsRequest, pps.API_GetLogsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InspectDatum provides a mock function with given fields: _a0, _a1
func (_m *APIServer) InspectDatum(_a0 context.Context, _a1 *pps.InspectDatumRequest) (*pps.DatumInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pps.DatumInfo
	if rf, ok := ret.Get(0).(func(context.Context, *pps.InspectDatumRequest) *pps.DatumInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pps.DatumInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.InspectDatumRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InspectJob provides a mock function with given fields: _a0, _a1
func (_m *APIServer) InspectJob(_a0 context.Context, _a1 *pps.InspectJobRequest) (*pps.JobInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pps.JobInfo
	if rf, ok := ret.Get(0).(func(context.Context, *pps.InspectJobRequest) *pps.JobInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pps.JobInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.InspectJobRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InspectPipeline provides a mock function with given fields: _a0, _a1
func (_m *APIServer) InspectPipeline(_a0 context.Context, _a1 *pps.InspectPipelineRequest) (*pps.PipelineInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pps.PipelineInfo
	if rf, ok := ret.Get(0).(func(context.Context, *pps.InspectPipelineRequest) *pps.PipelineInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pps.PipelineInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.InspectPipelineRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InspectSecret provides a mock function with given fields: _a0, _a1
func (_m *APIServer) InspectSecret(_a0 context.Context, _a1 *pps.InspectSecretRequest) (*pps.SecretInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pps.SecretInfo
	if rf, ok := ret.Get(0).(func(context.Context, *pps.InspectSecretRequest) *pps.SecretInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pps.SecretInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.InspectSecretRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatum provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ListDatum(_a0 *pps.ListDatumRequest, _a1 pps.API_ListDatumServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pps.ListDatumRequest, pps.API_ListDatumServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListJob provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ListJob(_a0 *pps.ListJobRequest, _a1 pps.API_ListJobServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pps.ListJobRequest, pps.API_ListJobServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListPipeline provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ListPipeline(_a0 context.Context, _a1 *pps.ListPipelineRequest) (*pps.PipelineInfos, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pps.PipelineInfos
	if rf, ok := ret.Get(0).(func(context.Context, *pps.ListPipelineRequest) *pps.PipelineInfos); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pps.PipelineInfos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.ListPipelineRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecret provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ListSecret(_a0 context.Context, _a1 *types.Empty) (*pps.SecretInfos, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pps.SecretInfos
	if rf, ok := ret.Get(0).(func(context.Context, *types.Empty) *pps.SecretInfos); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pps.SecretInfos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartDatum provides a mock function with given fields: _a0, _a1
func (_m *APIServer) RestartDatum(_a0 context.Context, _a1 *pps.RestartDatumRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.RestartDatumRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.RestartDatumRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunCron provides a mock function with given fields: _a0, _a1
func (_m *APIServer) RunCron(_a0 context.Context, _a1 *pps.RunCronRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.RunCronRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.RunCronRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunPipeline provides a mock function with given fields: _a0, _a1
func (_m *APIServer) RunPipeline(_a0 context.Context, _a1 *pps.RunPipelineRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.RunPipelineRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.RunPipelineRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartPipeline provides a mock function with given fields: _a0, _a1
func (_m *APIServer) StartPipeline(_a0 context.Context, _a1 *pps.StartPipelineRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.StartPipelineRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.StartPipelineRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopJob provides a mock function with given fields: _a0, _a1
func (_m *APIServer) StopJob(_a0 context.Context, _a1 *pps.StopJobRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.StopJobRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.StopJobRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopPipeline provides a mock function with given fields: _a0, _a1
func (_m *APIServer) StopPipeline(_a0 context.Context, _a1 *pps.StopPipelineRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.StopPipelineRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.StopPipelineRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobState provides a mock function with given fields: _a0, _a1
func (_m *APIServer) UpdateJobState(_a0 context.Context, _a1 *pps.UpdateJobStateRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.UpdateJobStateRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.UpdateJobStateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
