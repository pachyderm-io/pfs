// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pps "github.com/pachyderm/pachyderm/v2/src/pps"

	types "github.com/gogo/protobuf/types"
)

// APIClient is an autogenerated mock type for the APIClient type
type APIClient struct {
	mock.Mock
}

// ActivateAuth provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) ActivateAuth(ctx context.Context, in *pps.ActivateAuthRequest, opts ...grpc.CallOption) (*pps.ActivateAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pps.ActivateAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pps.ActivateAuthRequest, ...grpc.CallOption) *pps.ActivateAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pps.ActivateAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.ActivateAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJob provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) CreateJob(ctx context.Context, in *pps.CreateJobRequest, opts ...grpc.CallOption) (*pps.Job, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pps.Job
	if rf, ok := ret.Get(0).(func(context.Context, *pps.CreateJobRequest, ...grpc.CallOption) *pps.Job); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pps.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.CreateJobRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePipeline provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) CreatePipeline(ctx context.Context, in *pps.CreatePipelineRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.CreatePipelineRequest, ...grpc.CallOption) *types.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.CreatePipelineRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecret provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) CreateSecret(ctx context.Context, in *pps.CreateSecretRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.CreateSecretRequest, ...grpc.CallOption) *types.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.CreateSecretRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAll provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) DeleteAll(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *types.Empty, ...grpc.CallOption) *types.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJob provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) DeleteJob(ctx context.Context, in *pps.DeleteJobRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.DeleteJobRequest, ...grpc.CallOption) *types.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.DeleteJobRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePipeline provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) DeletePipeline(ctx context.Context, in *pps.DeletePipelineRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.DeletePipelineRequest, ...grpc.CallOption) *types.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.DeletePipelineRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSecret provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) DeleteSecret(ctx context.Context, in *pps.DeleteSecretRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.DeleteSecretRequest, ...grpc.CallOption) *types.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.DeleteSecretRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlushJob provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) FlushJob(ctx context.Context, in *pps.FlushJobRequest, opts ...grpc.CallOption) (pps.API_FlushJobClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 pps.API_FlushJobClient
	if rf, ok := ret.Get(0).(func(context.Context, *pps.FlushJobRequest, ...grpc.CallOption) pps.API_FlushJobClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pps.API_FlushJobClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.FlushJobRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogs provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) GetLogs(ctx context.Context, in *pps.GetLogsRequest, opts ...grpc.CallOption) (pps.API_GetLogsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 pps.API_GetLogsClient
	if rf, ok := ret.Get(0).(func(context.Context, *pps.GetLogsRequest, ...grpc.CallOption) pps.API_GetLogsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pps.API_GetLogsClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.GetLogsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InspectDatum provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) InspectDatum(ctx context.Context, in *pps.InspectDatumRequest, opts ...grpc.CallOption) (*pps.DatumInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pps.DatumInfo
	if rf, ok := ret.Get(0).(func(context.Context, *pps.InspectDatumRequest, ...grpc.CallOption) *pps.DatumInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pps.DatumInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.InspectDatumRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InspectJob provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) InspectJob(ctx context.Context, in *pps.InspectJobRequest, opts ...grpc.CallOption) (*pps.JobInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pps.JobInfo
	if rf, ok := ret.Get(0).(func(context.Context, *pps.InspectJobRequest, ...grpc.CallOption) *pps.JobInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pps.JobInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.InspectJobRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InspectPipeline provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) InspectPipeline(ctx context.Context, in *pps.InspectPipelineRequest, opts ...grpc.CallOption) (*pps.PipelineInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pps.PipelineInfo
	if rf, ok := ret.Get(0).(func(context.Context, *pps.InspectPipelineRequest, ...grpc.CallOption) *pps.PipelineInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pps.PipelineInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.InspectPipelineRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InspectSecret provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) InspectSecret(ctx context.Context, in *pps.InspectSecretRequest, opts ...grpc.CallOption) (*pps.SecretInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pps.SecretInfo
	if rf, ok := ret.Get(0).(func(context.Context, *pps.InspectSecretRequest, ...grpc.CallOption) *pps.SecretInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pps.SecretInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.InspectSecretRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatum provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) ListDatum(ctx context.Context, in *pps.ListDatumRequest, opts ...grpc.CallOption) (pps.API_ListDatumClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 pps.API_ListDatumClient
	if rf, ok := ret.Get(0).(func(context.Context, *pps.ListDatumRequest, ...grpc.CallOption) pps.API_ListDatumClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pps.API_ListDatumClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.ListDatumRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJob provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) ListJob(ctx context.Context, in *pps.ListJobRequest, opts ...grpc.CallOption) (pps.API_ListJobClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 pps.API_ListJobClient
	if rf, ok := ret.Get(0).(func(context.Context, *pps.ListJobRequest, ...grpc.CallOption) pps.API_ListJobClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pps.API_ListJobClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.ListJobRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPipeline provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) ListPipeline(ctx context.Context, in *pps.ListPipelineRequest, opts ...grpc.CallOption) (*pps.PipelineInfos, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pps.PipelineInfos
	if rf, ok := ret.Get(0).(func(context.Context, *pps.ListPipelineRequest, ...grpc.CallOption) *pps.PipelineInfos); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pps.PipelineInfos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.ListPipelineRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecret provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) ListSecret(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*pps.SecretInfos, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pps.SecretInfos
	if rf, ok := ret.Get(0).(func(context.Context, *types.Empty, ...grpc.CallOption) *pps.SecretInfos); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pps.SecretInfos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartDatum provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) RestartDatum(ctx context.Context, in *pps.RestartDatumRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.RestartDatumRequest, ...grpc.CallOption) *types.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.RestartDatumRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunCron provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) RunCron(ctx context.Context, in *pps.RunCronRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.RunCronRequest, ...grpc.CallOption) *types.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.RunCronRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunPipeline provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) RunPipeline(ctx context.Context, in *pps.RunPipelineRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.RunPipelineRequest, ...grpc.CallOption) *types.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.RunPipelineRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartPipeline provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) StartPipeline(ctx context.Context, in *pps.StartPipelineRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.StartPipelineRequest, ...grpc.CallOption) *types.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.StartPipelineRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopJob provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) StopJob(ctx context.Context, in *pps.StopJobRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.StopJobRequest, ...grpc.CallOption) *types.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.StopJobRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopPipeline provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) StopPipeline(ctx context.Context, in *pps.StopPipelineRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.StopPipelineRequest, ...grpc.CallOption) *types.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.StopPipelineRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobState provides a mock function with given fields: ctx, in, opts
func (_m *APIClient) UpdateJobState(ctx context.Context, in *pps.UpdateJobStateRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pps.UpdateJobStateRequest, ...grpc.CallOption) *types.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pps.UpdateJobStateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
