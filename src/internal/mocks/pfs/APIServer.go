// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	pfs "github.com/pachyderm/pachyderm/v2/src/pfs"
	mock "github.com/stretchr/testify/mock"

	types "github.com/gogo/protobuf/types"
)

// APIServer is an autogenerated mock type for the APIServer type
type APIServer struct {
	mock.Mock
}

// ActivateAuth provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ActivateAuth(_a0 context.Context, _a1 *pfs.ActivateAuthRequest) (*pfs.ActivateAuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pfs.ActivateAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.ActivateAuthRequest) *pfs.ActivateAuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pfs.ActivateAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.ActivateAuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddFileset provides a mock function with given fields: _a0, _a1
func (_m *APIServer) AddFileset(_a0 context.Context, _a1 *pfs.AddFilesetRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.AddFilesetRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.AddFilesetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClearCommit provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ClearCommit(_a0 context.Context, _a1 *pfs.ClearCommitRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.ClearCommitRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.ClearCommitRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyFile provides a mock function with given fields: _a0, _a1
func (_m *APIServer) CopyFile(_a0 context.Context, _a1 *pfs.CopyFileRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.CopyFileRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.CopyFileRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBranch provides a mock function with given fields: _a0, _a1
func (_m *APIServer) CreateBranch(_a0 context.Context, _a1 *pfs.CreateBranchRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.CreateBranchRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.CreateBranchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFileset provides a mock function with given fields: _a0
func (_m *APIServer) CreateFileset(_a0 pfs.API_CreateFilesetServer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(pfs.API_CreateFilesetServer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRepo provides a mock function with given fields: _a0, _a1
func (_m *APIServer) CreateRepo(_a0 context.Context, _a1 *pfs.CreateRepoRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.CreateRepoRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.CreateRepoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAll provides a mock function with given fields: _a0, _a1
func (_m *APIServer) DeleteAll(_a0 context.Context, _a1 *types.Empty) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *types.Empty) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBranch provides a mock function with given fields: _a0, _a1
func (_m *APIServer) DeleteBranch(_a0 context.Context, _a1 *pfs.DeleteBranchRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.DeleteBranchRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.DeleteBranchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRepo provides a mock function with given fields: _a0, _a1
func (_m *APIServer) DeleteRepo(_a0 context.Context, _a1 *pfs.DeleteRepoRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.DeleteRepoRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.DeleteRepoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiffFile provides a mock function with given fields: _a0, _a1
func (_m *APIServer) DiffFile(_a0 *pfs.DiffFileRequest, _a1 pfs.API_DiffFileServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pfs.DiffFileRequest, pfs.API_DiffFileServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FinishCommit provides a mock function with given fields: _a0, _a1
func (_m *APIServer) FinishCommit(_a0 context.Context, _a1 *pfs.FinishCommitRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.FinishCommitRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.FinishCommitRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlushCommit provides a mock function with given fields: _a0, _a1
func (_m *APIServer) FlushCommit(_a0 *pfs.FlushCommitRequest, _a1 pfs.API_FlushCommitServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pfs.FlushCommitRequest, pfs.API_FlushCommitServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fsck provides a mock function with given fields: _a0, _a1
func (_m *APIServer) Fsck(_a0 *pfs.FsckRequest, _a1 pfs.API_FsckServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pfs.FsckRequest, pfs.API_FsckServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFile provides a mock function with given fields: _a0, _a1
func (_m *APIServer) GetFile(_a0 *pfs.GetFileRequest, _a1 pfs.API_GetFileServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pfs.GetFileRequest, pfs.API_GetFileServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFileset provides a mock function with given fields: _a0, _a1
func (_m *APIServer) GetFileset(_a0 context.Context, _a1 *pfs.GetFilesetRequest) (*pfs.CreateFilesetResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pfs.CreateFilesetResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.GetFilesetRequest) *pfs.CreateFilesetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pfs.CreateFilesetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.GetFilesetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobFile provides a mock function with given fields: _a0, _a1
func (_m *APIServer) GlobFile(_a0 *pfs.GlobFileRequest, _a1 pfs.API_GlobFileServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pfs.GlobFileRequest, pfs.API_GlobFileServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InspectBranch provides a mock function with given fields: _a0, _a1
func (_m *APIServer) InspectBranch(_a0 context.Context, _a1 *pfs.InspectBranchRequest) (*pfs.BranchInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pfs.BranchInfo
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.InspectBranchRequest) *pfs.BranchInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pfs.BranchInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.InspectBranchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InspectCommit provides a mock function with given fields: _a0, _a1
func (_m *APIServer) InspectCommit(_a0 context.Context, _a1 *pfs.InspectCommitRequest) (*pfs.CommitInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pfs.CommitInfo
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.InspectCommitRequest) *pfs.CommitInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pfs.CommitInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.InspectCommitRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InspectFile provides a mock function with given fields: _a0, _a1
func (_m *APIServer) InspectFile(_a0 context.Context, _a1 *pfs.InspectFileRequest) (*pfs.FileInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pfs.FileInfo
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.InspectFileRequest) *pfs.FileInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pfs.FileInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.InspectFileRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InspectRepo provides a mock function with given fields: _a0, _a1
func (_m *APIServer) InspectRepo(_a0 context.Context, _a1 *pfs.InspectRepoRequest) (*pfs.RepoInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pfs.RepoInfo
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.InspectRepoRequest) *pfs.RepoInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pfs.RepoInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.InspectRepoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBranch provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ListBranch(_a0 context.Context, _a1 *pfs.ListBranchRequest) (*pfs.BranchInfos, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pfs.BranchInfos
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.ListBranchRequest) *pfs.BranchInfos); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pfs.BranchInfos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.ListBranchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCommit provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ListCommit(_a0 *pfs.ListCommitRequest, _a1 pfs.API_ListCommitServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pfs.ListCommitRequest, pfs.API_ListCommitServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListFile provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ListFile(_a0 *pfs.ListFileRequest, _a1 pfs.API_ListFileServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pfs.ListFileRequest, pfs.API_ListFileServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRepo provides a mock function with given fields: _a0, _a1
func (_m *APIServer) ListRepo(_a0 context.Context, _a1 *pfs.ListRepoRequest) (*pfs.ListRepoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pfs.ListRepoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.ListRepoRequest) *pfs.ListRepoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pfs.ListRepoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.ListRepoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyFile provides a mock function with given fields: _a0
func (_m *APIServer) ModifyFile(_a0 pfs.API_ModifyFileServer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(pfs.API_ModifyFileServer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenewFileset provides a mock function with given fields: _a0, _a1
func (_m *APIServer) RenewFileset(_a0 context.Context, _a1 *pfs.RenewFilesetRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.RenewFilesetRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.RenewFilesetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SquashCommit provides a mock function with given fields: _a0, _a1
func (_m *APIServer) SquashCommit(_a0 context.Context, _a1 *pfs.SquashCommitRequest) (*types.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.SquashCommitRequest) *types.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.SquashCommitRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartCommit provides a mock function with given fields: _a0, _a1
func (_m *APIServer) StartCommit(_a0 context.Context, _a1 *pfs.StartCommitRequest) (*pfs.Commit, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pfs.Commit
	if rf, ok := ret.Get(0).(func(context.Context, *pfs.StartCommitRequest) *pfs.Commit); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pfs.Commit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pfs.StartCommitRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeCommit provides a mock function with given fields: _a0, _a1
func (_m *APIServer) SubscribeCommit(_a0 *pfs.SubscribeCommitRequest, _a1 pfs.API_SubscribeCommitServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pfs.SubscribeCommitRequest, pfs.API_SubscribeCommitServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalkFile provides a mock function with given fields: _a0, _a1
func (_m *APIServer) WalkFile(_a0 *pfs.WalkFileRequest, _a1 pfs.API_WalkFileServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pfs.WalkFileRequest, pfs.API_WalkFileServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
