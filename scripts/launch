#!/bin/sh
# Launch pfs in single node mode.
###############################################################################
set -E          # pass trap handlers down to subshells
#set -x         # execution tracing debug messages

HELP="A script to launch pfs in single node mode.\nUsage: $0 [-p port] [-i image]"

# --- Options processing -------------------------------------------
OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
PORT="650"
IMAGE="pachyderm/pfs"

while getopts "p:i:" opt; do
    case "$opt" in
    \?)  echo $HELP
        exit 0
        ;;
    p)  PORT=$OPTARG
        ;;
    i)  IMAGE=$OPTARG
        ;;
    esac
done

BTRFS_VERSION="$(which btrfs)" || { echo 'Please install btrfs-tools. (apt-get install btrfs-tools)' ; exit 1; }
DOCKER_VERSION="$(docker --version | awk '{ print $3 }')"

REGEX="([0-9]+)\.([0-9]+)\.([0-9]+),"

# pin major version at 1, in case pfs needs update
if [ $(echo $DOCKER_VERSION | sed -E "s/$REGEX/\1/") != "1" ]
then
    echo "This version of pfs only supports Docker 1.x"
    echo "Please upgrade pfs for support"
    exit 1
# docker versions below 1.5 are not supported
elif [ $(echo $DOCKER_VERSION | sed -E "s/$REGEX/\2/") < "5" ]
then
    echo "Docker >= 1.5.0 is required"
    echo "See: https://docs.docker.com/installation/ubuntulinux/#docker-maintained-package-installation"
    exit 1
fi

btrfs --version | grep 3.14 || { echo 'Upgrade btrfs-tools to 3.14.' ; exit 1; }

CMD="$0"
CMD_DIR="$(cd "$(dirname "$CMD")" && pwd)"
PFS_DIR=~/.pfs

mkdir -p "$PFS_DIR"/vol
echo -n "Creating file $PFS_DIR/data.img... "
truncate "$PFS_DIR"/data.img -s 10G
echo -n "done.\nCreating btrfs filesystem... "
mkfs.btrfs "$PFS_DIR"/data.img 2>/dev/null >/dev/null
echo -n "done.\nMounting $PFS_DIR/data.img on $PFS_DIR/vol... (this requires sudo) "
sudo mount "$PFS_DIR"/data.img "$PFS_DIR"/vol 2>/dev/null >/dev/null
echo -n "done.\nmkdir /var/lib/pfs/vol... (this requires sudo) "
sudo mkdir -p /var/lib/pfs/vol
echo "done."

sudo docker kill pfs 2>/dev/null >/dev/null
sudo docker rm pfs 2>/dev/null >/dev/null
echo "Launching container $IMAGE... (this requires sudo)"
echo "Container id:"
sudo docker run -d \
    --privileged=true \
    --name pfs \
    -v /:/host:ro \
    -v "$PFS_DIR"/vol:/host/var/lib/pfs/vol \
    -v "$PFS_DIR":/var/lib/pfs \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
    -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
    -p "$PORT":80 \
    -i "$IMAGE" \
    /go/bin/master 0-1
echo "done."
echo "Server is listening on localhost:$PORT"
echo "Logging to ~/.pfs/log/log-0-1"
echo "Data is stored in ~/.pfs/vol"
echo "To kill:"
echo "docker kill pfs"
