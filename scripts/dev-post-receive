#!/bin/sh
# What this hook does:
# create a Docker image from `Dockerfile`
# push that image to the local registry
# restart the services in the cluster
###############################################################################

set -Ee          # pass trap handlers down to subshells, exit on error

DIR="$(cd "$(dirname "${0}")" && pwd)"
cd "${DIR}"

. "${DIR}/lib/lib.sh"

REPOSITORY_BASENAME="$(basename "${PFS_REPO_DIR}")"
REPOSITORY_BASENAME="${REPOSITORY_BASENAME%.git}"
TMPDIR="/tmp/${REPOSITORY_BASE_NAME}"
if [ ! -d "${TMPDIR}" ]; then
  git clone "${PFS_REPO_DIR}" "${TMPDIR}"
fi

export GIT_WORK_TREE="${TMPDIR}"
git checkout -f

# Startup the supporting services
fleetctl start "${GIT_WORK_TREE}/deploy/static/dev/gitdaemon.service"
fleetctl start "${GIT_WORK_TREE}/deploy/static/dev/registry.service"
fleetctl start "${GIT_WORK_TREE}/deploy/static/dev/announce-registry.service"
# Build the image
REG="$(etcdctl get /pfs/registry)"
sudo docker build -t "${REG}/${REPOSITORY_BASENAME}" "${GIT_WORK_TREE}"
sudo docker push "${REG}/${REPOSITORY_BASENAME}"
# Restart the pfs services
fleetctl stop "${GIT_WORK_TREE}/deploy/static/dev/master-*"
fleetctl start "${GIT_WORK_TREE}/deploy/static/dev/master-*"
fleetctl stop "${GIT_WORK_TREE}/deploy/static/dev/router.service"
fleetctl start "${GIT_WORK_TREE}/deploy/static/dev/router.service"
fleetctl stop "${GIT_WORK_TREE}/deploy/static/dev/announce-*"
fleetctl start "${GIT_WORK_TREE}/deploy/static/dev/announce-*"
