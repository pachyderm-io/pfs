#!/bin/sh
# Install a git repo on a pfs cluster.
###############################################################################

set -Ee          # pass trap handlers down to subshells, exit on error

DIR="$(cd "$(dirname "${0}")" && pwd)"
cd "${DIR}"

. "${DIR}/lib/lib.sh"

USAGE="Usage: $0 host"

# --- Options processing -------------------------------------------
if [ $# != 1 ] ; then
    echo "${USAGE}" >&2
    exit 1
fi
HOST="${1}"

REPO="$(basename "${PFS_REPO_DIR}")"
REMOTE="${HOST}:/home/core/${REPO}.git"
TMPDIR="/tmp/${REPO}.$$.git"

#check_value_set AWS_ACCESS_KEY_ID
#check_value_set AWS_SECRET_ACCESS_KEY

echo "Installing ${REMOTE}"

rm -rf "${TMPDIR}"
git clone --bare . "${TMPDIR}"
scp -rqC "${TMPDIR}" "core@${REMOTE}"
scp -rqC "${DIR}/dev-post-receive" "core@${REMOTE}/hooks/post-receive"
git remote remove staging
git remote add staging "git://${HOST}/home/core/${REPO}.git"

# Do an initial run with the post-receive hook to set everything up.
ssh "core@${HOST}" etcdctl set /pfs/creds/AWS_ACCESS_KEY_ID "${AWS_ACCESS_KEY_ID}"
ssh "core@${HOST}" etcdctl set /pfs/creds/AWS_SECRET_ACCESS_KEY "${AWS_SECRET_ACCESS_KEY}"
ssh "core@${HOST}" etcdctl set /pfs/creds/IMAGE_BUCKET "${PFS_S3_BUCKET}"
ssh "core@${HOST}" etcdctl set /pfs/config/DISK "/var/lib/pfs/data.img"
ssh "core@${HOST}" 'cd pfs.git && hooks/post-receive'

echo "Done."
